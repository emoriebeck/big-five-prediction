plot((nested.mods %>% filter(ID == "006" & source == "Raw" & wave == "1" & gamma == "0"))$temp_plot[[1]])
plot((nested.mods %>% filter(ID == "006" & source == "Day Residualized" & wave == "1" & gamma == "0"))$contemp_plot[[1]])
plot((nested.mods %>% filter(ID == "006" & source == "Day Residualized" & wave == "1" & gamma == "0"))$temp_plot[[1]])
dev.off()
load_url <- function (url, ..., sha1 = NULL) {
# based very closely on code for devtools::source_url
stopifnot(is.character(url), length(url) == 1)
temp_file <- tempfile()
on.exit(unlink(temp_file))
request <- httr::GET(url)
httr::stop_for_status(request)
writeBin(httr::content(request, type = "raw"), temp_file)
file_sha1 <- digest::digest(file = temp_file, algo = "sha1")
if (is.null(sha1)) {
message("SHA-1 hash of file is ", file_sha1)
}
else {
if (nchar(sha1) < 6) {
stop("Supplied SHA-1 hash is too short (must be at least 6 characters)")
}
file_sha1 <- substr(file_sha1, 1, nchar(sha1))
if (!identical(file_sha1, sha1)) {
stop("SHA-1 hash of downloaded file (", file_sha1,
")\n  does not match expected value (", sha1,
")", call. = FALSE)
}
}
load(temp_file, envir = .GlobalEnv)
}
library(RColorBrewer)
edge_colors <- RColorBrewer::brewer.pal(8, "Purples")[c(3,4,6)]
idio_plot_fun <- function(data, subject, wave, type, Source){
if(type == "Lagged"){data_mod <- data$PDC}
else{data_mod <- data$PCC}
keep <- colSums(is.na(data_mod)) < nrow(data_mod) | rowSums(is.na(data_mod)) < nrow(data_mod)
data_mod <- data_mod[keep,keep]
if(type != "Lagged"){
data_mod[upper.tri(data_mod)] <- t(data_mod)[upper.tri(data_mod)]
diag(data_mod) <- 1
} #else {diag(data_mod) <- NA}
colnames(data_mod) <- mapvalues(colnames(data_mod), from = vars$old, vars$new, warn_missing = F)
rownames(data_mod) <- mapvalues(rownames(data_mod), from = vars$old, vars$new, warn_missing = F)
if(grepl("Comp", Source) == F){
cent_col <- centrality_pred %>% filter(ID == subject) %>% select(-ID) %>%
filter(Variable %in% rownames(data_mod)) %>%
full_join(tibble(Variable = rownames(data_mod))) %>%
mutate(`Most/Least` = ifelse(is.na(`Most/Least`), "Neither", `Most/Least`),
color = mapvalues(`Most/Least`, c("Most", "Least", "Neither"), c("black", "white", "gray")),
weight = mapvalues(`Most/Least`, unique(`Most/Least`), c(2, 4, 6)),
Variable = factor(Variable, levels = rownames(data_mod))) %>%
arrange(Variable)
groups <- list(Most = which(cent_col$`Most/Least` == "Most"),
Least = which(cent_col$`Most/Least` == "Least"),
Neither = which(cent_col$`Most/Least` == "Neither"))
}
if(Source == "Client Predictions"){
node_col <- cent_col$color
border_width <- rep(2, nrow(data_mod))
} else if (grepl("Comp", Source)){
groups <- list(all = seq(1, nrow(data_mod)))
node_col <- rep("white", nrow(data_mod))
border_width <- rep(2, nrow(data_mod))
} else {
node_col <- rep("white", nrow(data_mod))
border_width <- as.numeric(cent_col$weight)
}
plot <-
qgraph(data_mod
, legend = T
, legend.mode = "names"
, legend.cex = .5
, GLratio = 1.5
, layout = "spring"
, loop = .7
, node.width = 1.15
, edge.width = 1
, esize = 7
, title = sprintf("%s %s Wave %s for S%s", Source, type, wave, subject)
, label.font = 2
, repulsion = .8
, label.fill.vertical = 1
, border.width = border_width
, label.fill.horizontal = 1
, edge.color = "black"
, groups = groups
, color = node_col
, DoNotPlot = TRUE
, mar = c(4,4,4,4))
#change lines to dashed
plot$graphAttributes$Edges$lty[plot$Edgelist$weight < 0] <- 2
#change line colors
plot$graphAttributes$Edges$color <-
ifelse(abs(plot$Edgelist$weight) <.05, edge_colors[1],
ifelse(abs(plot$Edgelist$weight) <.1, edge_colors[2], edge_colors[3]))
# change labels of dark nodes to white
dark_colors <- c("#9E9AC8", "#807DBA", "#6A51A3", "#54278F", "#3F007D")
plot$graphAttributes$Nodes$label.color[plot$graphAttributes$Nodes$color %in% dark_colors] <- "white"
#change variable names
plot$graphAttributes$Nodes$labels <- gsub("_", "\n", names(plot$graphAttributes$Nodes$labels))
plot$graphAttributes$Nodes$names <- mapvalues(names(plot$graphAttributes$Nodes$names), cb$oldName, str_wrap(cb$shortDesc, 20), warn_missing = F)
plot$graphAttributes$Nodes$names <- mapvalues(plot$graphAttributes$Nodes$names,
c("DwEm", "DwLN", "DwRlRuWr", "RRW", "WrAf", "WrEm"),
rep("negative emotion composite", 6),
warn_missing = F)
return(plot)
}
centrality_Plot_fun <- function(x, ct, d, g){
centrality_long  %>%
filter(ID %in% x & source == ct & dir == d & gamma == g) %>%
arrange(measure, wave) %>%
ggplot(aes(x = var, y = z, group = wave))+
geom_line(aes(linetype = wave), color = "black", size = .3) +
geom_point(aes(shape = wave), size = 2) +
labs(x = NULL, y = "z-score", linetype = "Wave", shape = "Wave",
title = sprintf("Participant %s", x),
subtitle = ct) +
scale_y_continuous(limits = c(-3,3), breaks = seq(-3,3,1)) +
geom_hline(aes(yintercept = 0)) +
coord_flip() +
facet_grid(~dir + measure) +
theme_classic()+
theme(axis.text = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.position = "bottom",
plot.title = element_text(face = "bold", hjust = .5),
plot.subtitle = element_text(face = "bold", hjust = .5),
strip.text = element_text(face = "bold", color = "white", size = rel(1)),
strip.background = element_rect(fill = "black"))
}
load_url("https://github.com/emoriebeck/PSC_EMA/blob/master/app_data.RData?raw=true")
input = tibble(SID = "006", SID2 = "006", type1 = "Raw", resid1 = "Day", gamma1 = "0", type2 = "Raw", resid2 = "None", gamma2 = "0", wave = "1", wave2 = "1", Cor1 = "Contemporaneous", Cor2 = "Contemporaneous")
source1 <- type_fun(input$type1, input$resid1)
type_fun <- function(type, resid){
source <- ifelse(!resid == "None" & type == "Composites", paste(resid, "Residualized Composites"),
ifelse(!resid == "None" & type == "Raw", paste(resid, "Residualized Composites"),
ifelse(resid == "None" & type == "Composites", "Composites",
ifelse(resid == "None" & type == "Raw", "Raw",
"Client Predictions"))))
}
source1 <- type_fun(input$type1, input$resid1)
source1
type_fun <- function(type, resid){
source <- ifelse(!resid == "None" & type == "Composites", paste(resid, "Residualized Composites"),
ifelse(!resid == "None" & type == "Raw", paste(resid, "Residualized"),
ifelse(resid == "None" & type == "Composites", "Composites",
ifelse(resid == "None" & type == "Raw", "Raw",
"Client Predictions"))))
}
source1 <- type_fun(input$type1, input$resid1)
source1
gamma1 <- if(input$type1 == "Client Predictions") "N/A" else(input$gamma1)
dat <- (gVAR_data %>% filter(ID == input$SID & wave == input$wave & source == source1 & gamma == gamma1))$gVAR[[1]]
plot1 <- idio_plot_fun(dat, input$SID, input$wave, input$Cor1, source1)
source2 <- type_fun(input$type2, input$resid2)
gamma2 <- if(input$type2 == "Client Predictions") "N/A" else(input$gamma2)
dat <- (gVAR_data %>% filter(ID == input$SID2 & wave == input$wave2 & source == source2 & gamma == gamma2))$gVAR[[1]]
plot2 <- idio_plot_fun(dat, input$SID2, input$wave2, input$Cor2, source2)
# plot1  <-  plot_beta_w1[[input$SID]]
print(plot1); print(plot2)
# draw the histogram with the specified number of bins
if(!("" %in% input)){
par(mfrow = c(2,1))
plot(plot1)
plot(plot2)
}
shiny::runApp('Box/PSC EMA/Data/PSC_EMA')
source1
idio_plot_fun <- function(data, subject, wave, type, Source){
if(type == "Lagged"){data_mod <- data$PDC}
else{data_mod <- data$PCC}
keep <- colSums(is.na(data_mod)) < nrow(data_mod) | rowSums(is.na(data_mod)) < nrow(data_mod)
data_mod <- data_mod[keep,keep]
if(type != "Lagged"){
data_mod[upper.tri(data_mod)] <- t(data_mod)[upper.tri(data_mod)]
diag(data_mod) <- 1
} #else {diag(data_mod) <- NA}
colnames(data_mod) <- mapvalues(colnames(data_mod), from = vars$old, vars$new, warn_missing = F)
rownames(data_mod) <- mapvalues(rownames(data_mod), from = vars$old, vars$new, warn_missing = F)
if(grepl("Comp", Source) == F){
cent_col <- centrality_pred %>% filter(ID == subject) %>% select(-ID) %>%
filter(Variable %in% rownames(data_mod)) %>%
full_join(tibble(Variable = rownames(data_mod))) %>%
mutate(`Most/Least` = ifelse(is.na(`Most/Least`), "Neither", `Most/Least`),
color = mapvalues(`Most/Least`, c("Most", "Least", "Neither"), c("black", "white", "gray")),
weight = mapvalues(`Most/Least`, unique(`Most/Least`), c(2, 4, 6)),
Variable = factor(Variable, levels = rownames(data_mod))) %>%
arrange(Variable)
groups <- list(Most = which(cent_col$`Most/Least` == "Most"),
Least = which(cent_col$`Most/Least` == "Least"),
Neither = which(cent_col$`Most/Least` == "Neither"))
}
if(Source == "Client Predictions"){
node_col <- cent_col$color
border_width <- rep(2, nrow(data_mod))
} else if (grepl("Comp", Source)){
groups <- list(all = seq(1, nrow(data_mod)))
node_col <- rep("white", nrow(data_mod))
border_width <- rep(2, nrow(data_mod))
} else {
node_col <- rep("white", nrow(data_mod))
border_width <- as.numeric(cent_col$weight)
}
plot <-
qgraph(data_mod
, legend = T
, legend.mode = "names"
, legend.cex = .5
, GLratio = 1.5
, layout = "spring"
, loop = .7
, node.width = 1.15
, edge.width = 1
, esize = 4
, title = sprintf("%s %s Wave %s for S%s", Source, type, wave, subject)
, label.font = 2
, repulsion = .8
, label.fill.vertical = 1
, border.width = border_width
, label.fill.horizontal = 1
, edge.color = "black"
, groups = groups
, color = node_col
, DoNotPlot = TRUE
, mar = c(4,4,4,4))
#change lines to dashed
plot$graphAttributes$Edges$lty[plot$Edgelist$weight < 0] <- 2
#change line colors
plot$graphAttributes$Edges$color <-
ifelse(abs(plot$Edgelist$weight) <.05, edge_colors[1],
ifelse(abs(plot$Edgelist$weight) <.1, edge_colors[2], edge_colors[3]))
# change labels of dark nodes to white
dark_colors <- c("#9E9AC8", "#807DBA", "#6A51A3", "#54278F", "#3F007D")
plot$graphAttributes$Nodes$label.color[plot$graphAttributes$Nodes$color %in% dark_colors] <- "white"
#change variable names
plot$graphAttributes$Nodes$labels <- gsub("_", "\n", names(plot$graphAttributes$Nodes$labels))
plot$graphAttributes$Nodes$names <- mapvalues(names(plot$graphAttributes$Nodes$names), cb$oldName, str_wrap(cb$shortDesc, 20), warn_missing = F)
plot$graphAttributes$Nodes$names <- mapvalues(plot$graphAttributes$Nodes$names,
c("DwEm", "DwLN", "DwRlRuWr", "RRW", "WrAf", "WrEm"),
rep("negative emotion composite", 6),
warn_missing = F)
return(plot)
}
source1 <- type_fun(input$type1, input$resid1)
gamma1 <- if(input$type1 == "Client Predictions") "N/A" else(input$gamma1)
dat <- (gVAR_data %>% filter(ID == input$SID & wave == input$wave & source == source1 & gamma == gamma1))$gVAR[[1]]
plot1 <- idio_plot_fun(dat, input$SID, input$wave, input$Cor1, source1)
source2 <- type_fun(input$type2, input$resid2)
gamma2 <- if(input$type2 == "Client Predictions") "N/A" else(input$gamma2)
dat <- (gVAR_data %>% filter(ID == input$SID2 & wave == input$wave2 & source == source2 & gamma == gamma2))$gVAR[[1]]
source1
gVAR_data %>% filter(ID == input$SID & wave == input$wave & source == source1 & gamma == gamma1)
(gVAR_data %>% filter(ID == input$SID & wave == input$wave & source == source1 & gamma == gamma1))$gVAR[[1]]
dat <- (gVAR_data %>% filter(ID == input$SID & wave == input$wave & source == source1 & gamma == gamma1))$gVAR[[1]]
plot1 <- idio_plot_fun(dat, input$SID, input$wave, input$Cor1, source1)
source2 <- type_fun(input$type2, input$resid2)
gamma2 <- if(input$type2 == "Client Predictions") "N/A" else(input$gamma2)
dat <- (gVAR_data %>% filter(ID == input$SID2 & wave == input$wave2 & source == source2 & gamma == gamma2))$gVAR[[1]]
plot2 <- idio_plot_fun(dat, input$SID2, input$wave2, input$Cor2, source2)
# plot1  <-  plot_beta_w1[[input$SID]]
print(plot1); print(plot2)
# draw the histogram with the specified number of bins
if(!("" %in% input)){
par(mfrow = c(2,1))
plot(plot1)
plot(plot2)
}
edge_colors <- RColorBrewer::brewer.pal(8, "Purples")[c(4,6,7)]
idio_plot_fun <- function(data, subject, wave, type, Source){
if(type == "Lagged"){data_mod <- data$PDC}
else{data_mod <- data$PCC}
keep <- colSums(is.na(data_mod)) < nrow(data_mod) | rowSums(is.na(data_mod)) < nrow(data_mod)
data_mod <- data_mod[keep,keep]
if(type != "Lagged"){
data_mod[upper.tri(data_mod)] <- t(data_mod)[upper.tri(data_mod)]
diag(data_mod) <- 1
} #else {diag(data_mod) <- NA}
colnames(data_mod) <- mapvalues(colnames(data_mod), from = vars$old, vars$new, warn_missing = F)
rownames(data_mod) <- mapvalues(rownames(data_mod), from = vars$old, vars$new, warn_missing = F)
if(grepl("Comp", Source) == F){
cent_col <- centrality_pred %>% filter(ID == subject) %>% select(-ID) %>%
filter(Variable %in% rownames(data_mod)) %>%
full_join(tibble(Variable = rownames(data_mod))) %>%
mutate(`Most/Least` = ifelse(is.na(`Most/Least`), "Neither", `Most/Least`),
color = mapvalues(`Most/Least`, c("Most", "Least", "Neither"), c("black", "white", "gray")),
weight = mapvalues(`Most/Least`, unique(`Most/Least`), c(2, 4, 6)),
Variable = factor(Variable, levels = rownames(data_mod))) %>%
arrange(Variable)
groups <- list(Most = which(cent_col$`Most/Least` == "Most"),
Least = which(cent_col$`Most/Least` == "Least"),
Neither = which(cent_col$`Most/Least` == "Neither"))
}
if(Source == "Client Predictions"){
node_col <- cent_col$color
border_width <- rep(2, nrow(data_mod))
} else if (grepl("Comp", Source)){
groups <- list(all = seq(1, nrow(data_mod)))
node_col <- rep("white", nrow(data_mod))
border_width <- rep(2, nrow(data_mod))
} else {
node_col <- rep("white", nrow(data_mod))
border_width <- as.numeric(cent_col$weight)
}
plot <-
qgraph(data_mod
, legend = T
, legend.mode = "names"
, legend.cex = .5
, GLratio = 1.5
, layout = "spring"
, loop = .7
, node.width = 1.15
, edge.width = 1
, esize = 3
, title = sprintf("%s %s Wave %s for S%s", Source, type, wave, subject)
, label.font = 2
, repulsion = .8
, label.fill.vertical = 1
, border.width = border_width
, label.fill.horizontal = 1
, edge.color = "black"
, groups = groups
, color = node_col
, DoNotPlot = TRUE
, mar = c(4,4,4,4))
#change lines to dashed
plot$graphAttributes$Edges$lty[plot$Edgelist$weight < 0] <- 2
#change line colors
plot$graphAttributes$Edges$color <-
ifelse(abs(plot$Edgelist$weight) <.05, edge_colors[1],
ifelse(abs(plot$Edgelist$weight) <.1, edge_colors[2], edge_colors[3]))
# change labels of dark nodes to white
dark_colors <- c("#9E9AC8", "#807DBA", "#6A51A3", "#54278F", "#3F007D")
plot$graphAttributes$Nodes$label.color[plot$graphAttributes$Nodes$color %in% dark_colors] <- "white"
#change variable names
plot$graphAttributes$Nodes$labels <- gsub("_", "\n", names(plot$graphAttributes$Nodes$labels))
plot$graphAttributes$Nodes$names <- mapvalues(names(plot$graphAttributes$Nodes$names), cb$oldName, str_wrap(cb$shortDesc, 20), warn_missing = F)
plot$graphAttributes$Nodes$names <- mapvalues(plot$graphAttributes$Nodes$names,
c("DwEm", "DwLN", "DwRlRuWr", "RRW", "WrAf", "WrEm"),
rep("negative emotion composite", 6),
warn_missing = F)
return(plot)
}
source1 <- type_fun(input$type1, input$resid1)
gamma1 <- if(input$type1 == "Client Predictions") "N/A" else(input$gamma1)
dat <- (gVAR_data %>% filter(ID == input$SID & wave == input$wave & source == source1 & gamma == gamma1))$gVAR[[1]]
plot1 <- idio_plot_fun(dat, input$SID, input$wave, input$Cor1, source1)
source2 <- type_fun(input$type2, input$resid2)
gamma2 <- if(input$type2 == "Client Predictions") "N/A" else(input$gamma2)
dat <- (gVAR_data %>% filter(ID == input$SID2 & wave == input$wave2 & source == source2 & gamma == gamma2))$gVAR[[1]]
plot2 <- idio_plot_fun(dat, input$SID2, input$wave2, input$Cor2, source2)
# plot1  <-  plot_beta_w1[[input$SID]]
print(plot1); print(plot2)
# draw the histogram with the specified number of bins
if(!("" %in% input)){
par(mfrow = c(2,1))
plot(plot1)
plot(plot2)
}
runApp('Box/PSC EMA/Data/PSC_EMA')
lagged_long %>% filter(ID == "009") %>% filter(source == "Day and Survey Residualized Composites" & wave == 2 & gamma == "0.1") %>% filter(weight != 0) %>% arrange(desc(weight))
lagged_long %>% filter(ID == "009") %>% filter(source == "Day and Survey Residualized Composites" & gamma == "0.1") %>% filter(weight != 0) %>% arrange(wave, desc(weight))
centrality_long
centrality_long %>% filter(ID == "009" & source == "Day and Survey Residualized Composites" & gamma == "0.1")
centrality_long %>% filter(ID == "009" & source == "Day and Survey Residualized Composites" & gamma == "0.1") %>% arrange(wave, desc(z))
centrality_long %>% filter(ID == "009" & source == "Day and Survey Residualized Composites" & gamma == "0.1") %>% arrange(wave, z
)
centrality_long %>% filter(ID == "009" & source == "Day and Survey Residualized Composites" & gamma == "0.1") %>% arrange(wave, desc(z))
centrality_long %>% filter(ID == "009" & source == "Day and Survey Residualized Composites" & gamma == "0.1" & dir == "Lagged") %>% arrange(wave, desc(z))
centrality_long %>% filter(ID == "009" & source == "Day and Survey Residualized Composites" & gamma == "0.1" & dir == "Contemporaneous") %>% arrange(wave, desc(z))
contemp_centrality %>%
select(-Betweenness, -Closeness, -ExpectedInfluence)
centrality_long <-
contemp_centrality %>%
select(-Betweenness, -Closeness, -ExpectedInfluence) %>%
group_by(ID, source, wave, gamma) %>%
mutate_at(vars(Degree, Strength), ~as.numeric(scale(.))) %>%
gather(key = measure, value = z, na.rm = T, Degree, Strength) %>%
full_join(
temp_centrality %>%
select(ID:var, dir, InDegree, OutDegree, InStrength, OutStrength) %>%
group_by(ID, source, wave, dir) %>%
mutate_at(vars(InDegree, OutStrength), ~as.numeric(scale(.))) %>%
gather(key = measure, value = z, na.rm = T, InDegree:OutStrength)
)
centrality_long <-
contemp_centrality %>%
select(-Betweenness, -Closeness, -ExpectedInfluence) %>%
group_by(ID, source, wave, gamma) %>%
mutate_at(vars(Degree, Strength), ~as.numeric(scale(.))) %>%
gather(key = measure, value = z, na.rm = T, Degree, Strength) %>%
full_join(
temp_centrality %>%
select(ID:var, dir, InDegree, OutDegree, InStrength, OutStrength) %>%
group_by(ID, source, wave, dir, gamma) %>%
mutate_at(vars(InDegree, OutStrength), ~as.numeric(scale(.))) %>%
gather(key = measure, value = z, na.rm = T, InDegree:OutStrength)
)
centrality_long %>% filter(ID == "009" & source == "Day and Survey Residualized Composites" & gamma == "0.1" & dir == "Contemporaneous") %>% arrange(wave, desc(z))
centrality_long %>% filter(ID == "006" & source == "Day Residualized Composites" & gamma == "0.1" & dir == "Contemporaneous") %>% arrange(wave, desc(z))
library(pwr)
pwr.r.test(n = 700, power = .99)
pwr.r.test(n = 2000, power = .99)
library(knitr)
library(kableExtra)
library(plyr)
library(tidyverse)
wd <- "~/Box/post doc/dementia/prediction"
sprintf("%/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 2")
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 2")
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 2") %>%
kable(.
, "html"
, caption = "<strong>Table 1</strong><br><em>Personality and Well-Being Measures and Scales Across Studies</em>") %>%
kable_styling(full_width = F) %>%
collapse_rows(1, valign = "top")
, caption = "<strong>Table 1</strong><br><em>Personality and Well-Being Measures and Scales Across Studies</em>") %>%
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 1") %>%
kable(.
, "html"
, caption = "<strong>Table 1</strong><br><em>Personality and Well-Being Measures and Scales Across Studies</em>") %>%
kable_styling(full_width = F)
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 1") %>%
kable(.
, "html"
, caption = "<strong>Table 1</strong><br><em>Personality and Well-Being Measures and Scales Across Studies</em>") %>%
kable_styling(full_width = F)
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 1") %>%
select(-Category) %>%
kable(.
, "html"
, caption = "<strong>Table 1</strong><br><em>Personality and Well-Being Measures and Scales Across Studies</em>") %>%
kable_styling(full_width = F) %>%
group_rows("Personality and Well-Being", 1, 8) %>%
group_rows("Dementia Diagnoses and Markers", 9, 23) %>%
group_rows("Cognitive Tests", 24, 38)
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 1") %>%
select(-Category) %>%
kable(.
, "html"
, caption = "<strong>Table 1</strong><br><em>Personality and Well-Being Measures and Scales Across Studies</em>") %>%
kable_styling(full_width = F) %>%
kableExtra::group_rows("Personality and Well-Being", 1, 8) %>%
kableExtra::group_rows("Dementia Diagnoses and Markers", 9, 23) %>%
kableExtra::group_rows("Cognitive Tests", 24, 38)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F)
options(knitr.kable.NA = '')
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 1") %>%
select(-Category) %>%
kable(.
, "html"
, caption = "<strong>Table 1</strong><br><em>Personality and Well-Being Measures and Scales Across Studies</em>") %>%
kable_styling(full_width = F) %>%
kableExtra::group_rows("Personality and Well-Being", 1, 8) %>%
kableExtra::group_rows("Dementia Diagnoses and Markers", 9, 23) %>%
kableExtra::group_rows("Cognitive Tests", 24, 38)
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 1") %>%
select(-Category) %>%
kable(.
, "html"
, caption = "<strong>Table 2</strong><br><em>Personality, Well-Being, Dementia, and Cognition Measures Across Studies</em>") %>%
kable_styling(full_width = F) %>%
kableExtra::group_rows("Personality and Well-Being", 1, 8) %>%
kableExtra::group_rows("Dementia Diagnoses and Markers", 9, 23) %>%
kableExtra::group_rows("Cognitive Tests", 24, 38)
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 2")
sprintf("%s/codebooks/tables.xlsx", wd) %>%
readxl::read_xlsx(., sheet = "Table 2") %>%
select(-Measure) %>%
kable(.
, "html"
, caption = "<strong>Table 1</strong><br><em>Personality and Well-Being Measures and Scales Across Studies</em>") %>%
kable_styling(full_width = F) %>%
kableExtra::group_rows("Extraversion", 1, 7) %>%
kableExtra::group_rows("Agreeableness", 8, 14) %>%
kableExtra::group_rows("Conscientiousness", 15, 21) %>%
kableExtra::group_rows("Neuroticism", 22, 28) %>%
kableExtra::group_rows("Openness", 29, 35) %>%
kableExtra::group_rows("Satisfaction with Life", 36, 42) %>%
kableExtra::group_rows("Positive Affect", 43, 49) %>%
kableExtra::group_rows("Negative Affect", 50, 56)
library(dplyr)
library(ggplot2)
empire <- starwars
empire <- empire[c(1:5, 10, 13, 14, 19, 21), c(1:3, 8:11)]
empire$species <- factor(empire$species)
empire <- data.frame(empire)
ggplot(data = empire, aes(x = mass, y = height)) +
geom_point(aes(size = mass, color = species), alpha = .5) +
labs(title = "Star Wars Characters", subtitle = "by size") +
scale_size(guide = "none")
View(empire)
bookdown::render_book()
setwd("~/Box/network/other projects/big 5 prediction")
bookdown::render_book()
bookdown::render_book(input = "index.Rmd")
setwd("~/Box/network/other projects/big 5 prediction/scripts/book")
bookdown::render_book(input = "index.Rmd")
bookdown::render_book(input = "index.Rmd")
runApp('~/Box/network/other projects/big 5 prediction/app/Big-5-Prediction')
bookdown::render_book(input = "index.Rmd")
bookdown::render_book(input = "index.Rmd")
