[
["index.html", "A Mega-Analysis of Personality Predictions: Robustness and Boundary Conditions Chapter 1 Workspace 1.1 Packages 1.2 Directory Path 1.3 Codebook 1.4 Other Supporting Documents", " A Mega-Analysis of Personality Predictions: Robustness and Boundary Conditions Emorie D. Beck 2020-07-01 Chapter 1 Workspace 1.1 Packages library(knitr) library(kableExtra) library(readxl) library(psych) library(brms) library(mice) library(fixest) library(parallel) library(MuMIn) library(MatchIt) library(haven) library(broom.mixed) library(rstan) library(tidybayes) library(shiny) library(plyr) library(tidyverse) library(furrr) 1.2 Directory Path res_path &lt;- &quot;https://github.com/emoriebeck/selection/blob/master&quot; wd &lt;- &quot;/Volumes/Emorie Beck/projects/selection&quot; 1.3 Codebook Each study has a separate codebook indexing matching, covariate, personality, and outcome variables. Moreover, these codebooks contain information about the original scale of the variable, any recoding of the variable (including binarizing outcomes, changing the scale, and removing missing data), reverse coding of scale variables, categories, etc. # list of all codebook sheets sheets &lt;- sprintf(&quot;%s/codebooks/master_codebook_01.24.20.xlsx&quot;, wd) %&gt;% excel_sheets() # function for reading in sheets read_fun &lt;- function(x){ sprintf(&quot;%s/codebooks/master_codebook_01.24.20.xlsx&quot;, wd) %&gt;% read_xlsx(., sheet = x) } # read in sheets and index source codebook &lt;- tibble( study = sheets, codebook = map(study, read_fun) ) ## short and long versions of names of all categories for later use studies &lt;- c(&quot;addhealth&quot;, &quot;bhps&quot;, &quot;gsoep&quot;, &quot;hilda&quot;, &quot;hrs&quot;, &quot;liss&quot;, &quot;midus&quot;, &quot;nlsy&quot;, &quot;shp&quot;, &quot;wls&quot;) studies_long &lt;- c(&quot;Add Health&quot;, &quot;BHPS&quot;, &quot;GSOEP&quot;, &quot;HILDA&quot;, &quot;HRS&quot;, &quot;LISS&quot;, &quot;MIDUS&quot;, &quot;NLSY&quot;, &quot;SHP&quot;, &quot;WLS&quot;) traits &lt;- codebook$codebook[[2]] %&gt;% filter(category == &quot;pers&quot;) %&gt;% select(long_name = Construct, short_name = name) outcomes &lt;- codebook$codebook[[2]] %&gt;% filter(category == &quot;out&quot;) %&gt;% select(long_name = Construct, short_name = name) moderators &lt;- codebook$codebook[[2]] %&gt;% filter(category == &quot;mod&quot;) %&gt;% select(long_name = Construct, short_name = name, breaks, mod, mod_name) 1.4 Other Supporting Documents # used personality waves p_waves &lt;- sprintf(&quot;%s/codebooks/personality_waves.xlsx&quot;, wd) %&gt;% read_xlsx() # used covariates for specifications specifications &lt;- sprintf(&quot;%s/codebooks/specifications.xlsx&quot;, wd) %&gt;% read_xlsx() # coded specificatoin curve results spec_summ &lt;- sprintf(&quot;%s/results/sca/SCA_summary.xlsx&quot;, wd) %&gt;% read_xlsx() # occupation code converters occ90to00 &lt;- sprintf(&quot;%s/codebooks/occ_90-00.xls&quot;, wd) %&gt;% read_xls() %&gt;% mutate_at(vars(OCC90, OCC00), as.numeric) occ70to90 &lt;- sprintf(&quot;%s/codebooks/occ1970_occ1990dd.dta&quot;, wd) %&gt;% read_dta() %&gt;% setNames(c(&quot;OCC70&quot;, &quot;OCC90&quot;)) occ80to90 &lt;- sprintf(&quot;%s/codebooks/occ1980_occ1990dd.dta&quot;, wd) %&gt;% read_dta() %&gt;% setNames(c(&quot;OCC80&quot;, &quot;OCC90&quot;)) # npb codes for ses npb &lt;- sprintf(&quot;%s/codebooks/npb.xlsx&quot;, wd) %&gt;% read_xlsx() %&gt;% setNames(c(&quot;OCC00&quot;, &quot;NPB&quot;, &quot;desc&quot;)) "],
["dataCleaning.html", "Chapter 2 Data Cleaning 2.1 Add Health 2.2 US 2.3 BHPS 2.4 GSOEP 2.5 HILDA 2.6 HRS 2.7 LISS 2.8 MIDUS 2.9 NLSY 2.10 SHP 2.11 WLS", " Chapter 2 Data Cleaning Mode &lt;- function(x) { ux &lt;- unique(x) ux &lt;- ux[!is.na(ux)] ux[which.max(tabulate(match(x, ux)))] } 2.1 Add Health The National Study of Adolescent to Adult Health (Ad Health; Harris &amp; Udry, 2018) is an ongoing longitudinal study of adolescents in the United States that began as a response to a federal mandate to better understand adolescent health. The data are available online at https://www.icpsr.umich.edu/icpsrweb/DSDR/studies/21600. The initial sample of participants included approximately 20,000 students who completed at home administrations the study. Four waves of data collection (1994-1995, 1996, 2001-2002, and 2008) have been completed. The latest release contains data through 2008. Another wave of collection began in 2016 but has not yet been released. More documentation of the data are available at https://www.icpsr.umich.edu/icpsrweb/content/DSDR/add-health-data-guide.html#intro. Sample sizes vary by year, from 14,738 (1996) to 20,745 (1994-1995). This provides 99% power to detect a correlation effect size of ~.03. 2.1.1 Load Data addhealth_read_fun &lt;- function(x){ sprintf(&quot;%s/data/addhealth/%s&quot;, wd, x) %&gt;% haven::read_sav(.) %&gt;% select(one_of(old.names)) %&gt;% haven::zap_labels(.) } addhealth_codebook &lt;- (codebook %&gt;% filter(study == &quot;Add Health&quot;))$codebook[[1]] %&gt;% mutate(orig_itemname = str_to_upper(orig_itemname)) addhealth_codebook ## # A tibble: 533 x 16 ## study dataset category name itemname wave year new_itemname orig_itemname description ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 addh… SCH match adop… adopted SCH 1994 addhealth__… S25 Adopted ## 2 addh… SCH match age age SCH 1994 addhealth__… S1 Age ## 3 addh… SCH match alco… alc12mo SCH 1994 &lt;NA&gt; S59B Drank Alco… ## 4 addh… SCH match alco… alcohol SCH 1994 &lt;NA&gt; S49 Have Had A… ## 5 addh… SCH match alco… drunk12… SCH 1994 &lt;NA&gt; S59C Got Drunk … ## 6 addh… SCH match bioP… livingB… SCH 1994 &lt;NA&gt; S26 Live with … ## 7 addh… SCH match birt… birthpl… SCH 1994 &lt;NA&gt; S8 Born in Un… ## 8 addh… Parent match birt… borninUS Pare… 1995 &lt;NA&gt; PC64 Child was … ## 9 addh… Parent match birt… bornUS Pare… 1995 &lt;NA&gt; PA3 Born in Un… ## 10 addh… Parent match brth… birthwe… Pare… 1995 &lt;NA&gt; PC19A_P Child&#39;s bi… ## # … with 523 more rows, and 6 more variables: scale &lt;chr&gt;, reverse_code &lt;chr&gt;, recode &lt;chr&gt;, ## # mini &lt;dbl&gt;, maxi &lt;dbl&gt;, comp_rule &lt;chr&gt; old.names &lt;- unique(addhealth_codebook$orig_itemname) datasets &lt;- sprintf(&quot;%s/data/addhealth&quot;, wd) %&gt;% list.files(., pattern = &quot;.sav&quot;) addhealth &lt;- tibble(datasets = datasets) %&gt;% mutate(data = map(datasets, addhealth_read_fun), ncol = map(data, ncol)) %&gt;% unnest(ncol) addhealth_long &lt;- addhealth %&gt;% filter(ncol &gt; 1) %&gt;% mutate(data = map(data, ~(.) %&gt;% gather(key = orig_itemname, value = value, -AID))) %&gt;% select(-ncol, -datasets) %&gt;% unnest(data) %&gt;% rename(SID = AID) save(addhealth, file = sprintf(&quot;%s/data/clean/addhealth_raw.RData&quot;, wd)) 2.1.2 Matching Variables # rename variables # rename variables addhealth_match &lt;- addhealth_codebook %&gt;% filter(category == &quot;match&quot;) %&gt;% select(name, itemname, wave, year, orig_itemname, reverse_code:comp_rule) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% left_join(addhealth_long))) %&gt;% unnest() yrBrth &lt;- addhealth_match %&gt;% filter(name == &quot;yearBrth&quot;) %&gt;% mutate(yearBrth = value + 1900) %&gt;% select(SID, yearBrth) # recode recode_fun &lt;- function(rule, y, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } addhealth_match &lt;- addhealth_match %&gt;% filter(name != &quot;age&quot;) %&gt;% left_join(yrBrth) %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) # reverse code addhealth_match &lt;- addhealth_match %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% # group by person and item (collapse across age) group_by(SID, yearBrth, name, year) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } addhealth_waves &lt;- p_waves %&gt;% filter(Study == &quot;Add Health&quot;) %&gt;% select(Used) %&gt;% distinct() addhealth_match &lt;- addhealth_match %&gt;% filter(year &lt;= max(addhealth_waves$Used)) %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule), comp_rule = ifelse(comp_rule == &quot;mx&quot;, &quot;max&quot;, comp_rule)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ addhealth_match %&gt;% filter((year &lt;= 1996 | year &lt;= p_year) &amp; comp_rule == rule) %&gt;% group_by(SID, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% distinct() } addhealth_match &lt;- crossing( p_year = addhealth_waves$Used, comp_rule = unique(addhealth_match$comp_rule) ) %&gt;% mutate(data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) %&gt;% select(-comp_rule) %&gt;% spread(name, value) addhealth_match ## # A tibble: 19,515 x 120 ## p_year SID physhlthevnt A C DEP E IQ LOC N `NA` PA SE ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1995 5710… 0 3.5 3.5 0.5 NA 28 2 NA 0.5 0 5 ## 2 1996 5710… 0 NA NA NA NA NA NA NA NA NA NA ## 3 2001 5710… NA NA NA 1.75 NA NA NA NA 2 NA 4.75 ## 4 1995 5710… 0 3 2.75 0.611 NA 59.5 2 NA 0.5 0 3.83 ## 5 1996 5710… 0 NA NA 0.167 4 NA 3.5 3 0 0 5 ## 6 2001 5710… NA NA NA 1.25 NA NA NA NA 1 NA 3.5 ## 7 1995 5710… 0 4.5 3 0.0556 NA 79 3 NA 0 0 4.83 ## 8 1996 5710… 0 NA NA NA NA NA NA NA NA NA NA ## 9 2001 5710… 0 NA NA NA NA NA NA NA NA NA NA ## 10 1995 5710… 0 4.5 2 1.17 NA 57 5 NA 0.5 1 4.67 ## # … with 19,505 more rows, and 107 more variables: SWL &lt;dbl&gt;, adopted &lt;dbl&gt;, ## # ageMarried &lt;dbl&gt;, alcohol &lt;dbl&gt;, bioParinHH &lt;dbl&gt;, birthplace &lt;dbl&gt;, brthweight &lt;dbl&gt;, ## # childFrnd &lt;dbl&gt;, childHlthProb &lt;dbl&gt;, childTemper &lt;dbl&gt;, childTrustwrthy &lt;dbl&gt;, ## # chldAgeHlthProb &lt;dbl&gt;, chldHlthIns &lt;dbl&gt;, chldHlthProb &lt;dbl&gt;, clubs &lt;dbl&gt;, dadAlc &lt;dbl&gt;, ## # dadBornUS &lt;dbl&gt;, dadCare &lt;dbl&gt;, dadEdu &lt;dbl&gt;, dadEmployed &lt;dbl&gt;, dadHealthProb &lt;dbl&gt;, ## # dadInHH &lt;dbl&gt;, date &lt;dbl&gt;, dentist &lt;dbl&gt;, disability &lt;dbl&gt;, drugs &lt;dbl&gt;, drVisits &lt;dbl&gt;, ## # durBreastFeed &lt;dbl&gt;, employed &lt;dbl&gt;, everLiveBioDad &lt;dbl&gt;, everLiveBioMom &lt;dbl&gt;, ## # exercise &lt;dbl&gt;, expAIDS &lt;dbl&gt;, expDie25 &lt;dbl&gt;, expGradCollege &lt;dbl&gt;, expInc &lt;dbl&gt;, ## # expLive35 &lt;dbl&gt;, expMarried25 &lt;dbl&gt;, extracurricular &lt;dbl&gt;, friendship &lt;dbl&gt;, ## # frndsGoodInf &lt;dbl&gt;, gender &lt;dbl&gt;, grade &lt;dbl&gt;, grades &lt;dbl&gt;, grsWages &lt;dbl&gt;, ## # height &lt;dbl&gt;, HHsize &lt;dbl&gt;, hlthProb &lt;dbl&gt;, hlthSymp &lt;dbl&gt;, involvedSchWrk &lt;dbl&gt;, ## # liveMom &lt;dbl&gt;, momAlc &lt;dbl&gt;, momAlive &lt;dbl&gt;, momBornUS &lt;dbl&gt;, momCare &lt;dbl&gt;, ## # momEdu &lt;dbl&gt;, momEmployed &lt;dbl&gt;, momHealthProb &lt;dbl&gt;, momInHH &lt;dbl&gt;, ## # moneyForBills &lt;dbl&gt;, nbhdQual &lt;dbl&gt;, numMarriages &lt;dbl&gt;, numSiblng &lt;dbl&gt;, ## # ParDisabled &lt;dbl&gt;, parDivorce &lt;dbl&gt;, parExpGrad &lt;dbl&gt;, parMarriedAge &lt;dbl&gt;, ## # parReligFreq &lt;dbl&gt;, parReligImp &lt;dbl&gt;, parReligion &lt;dbl&gt;, parReligScript &lt;dbl&gt;, ## # parRelSat &lt;dbl&gt;, parRepHlth &lt;dbl&gt;, parSmokes &lt;dbl&gt;, parTalkSex &lt;dbl&gt;, ParTalkSex &lt;dbl&gt;, ## # parUnemployBen &lt;dbl&gt;, physFunc &lt;dbl&gt;, PhysFunc &lt;fct&gt;, prntAlcohol &lt;dbl&gt;, ## # prntWelfare &lt;dbl&gt;, race &lt;dbl&gt;, recoverFast &lt;dbl&gt;, relChld &lt;dbl&gt;, religFreq &lt;dbl&gt;, ## # religImp &lt;dbl&gt;, religion &lt;dbl&gt;, religScript &lt;dbl&gt;, sameHouse &lt;dbl&gt;, satHH &lt;dbl&gt;, ## # satSchl &lt;dbl&gt;, school &lt;dbl&gt;, skipClass &lt;dbl&gt;, smokes &lt;dbl&gt;, sports &lt;dbl&gt;, ## # SRhealth &lt;dbl&gt;, twin &lt;dbl&gt;, Understandchild &lt;dbl&gt;, weapon &lt;dbl&gt;, weed &lt;dbl&gt;, … 2.1.3 Personality Variables addhealth_pers &lt;- addhealth_codebook %&gt;% filter(category == &quot;pers&quot;) %&gt;% select(name, itemname, wave, year, orig_itemname, reverse_code:comp_rule) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% left_join(addhealth_long))) %&gt;% unnest(data) %&gt;% distinct() %&gt;% filter(year %in% c(addhealth_waves$Used)) recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode addhealth_pers &lt;- addhealth_pers %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code addhealth_pers &lt;- addhealth_pers %&gt;% mutate(value = ifelse(tolower(reverse_code) == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) # alpha&#39;s addhealth_alpha &lt;- addhealth_pers %&gt;% select(name, itemname, year, SID, value) %&gt;% group_by(name, year) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% pivot_wider(names_from = itemname, values_from = value, values_fn = list(value = mean))), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-SID)), NA_real_))) # create composites addhealth_pers &lt;- addhealth_pers %&gt;% group_by(SID, name, year) %&gt;% summarize(value = mean(value, na.rm = T)) %&gt;% ungroup() ## # A tibble: 105,398 x 4 ## SID name year value ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 57100270 A 1995 3.5 ## 2 57100270 C 1995 3.5 ## 3 57100270 DEP 1995 0.5 ## 4 57100270 DEP 2001 1.75 ## 5 57100270 IQ 1995 28 ## 6 57100270 LOC 1995 2 ## 7 57100270 NA 1995 0.5 ## 8 57100270 NA 2001 2 ## 9 57100270 PA 1995 0 ## 10 57100270 SE 1995 5 ## # … with 105,388 more rows 2.1.4 Outcome Variables # missing all edu 2008 variables addhealth_out &lt;- addhealth_codebook %&gt;% filter(category == &quot;out&quot;) %&gt;% select(name, itemname, wave, year, orig_itemname, reverse_code:comp_rule) %&gt;% left_join(addhealth_long) %&gt;% distinct() %&gt;% full_join(crossing(p_year = addhealth_waves$Used, name = unique((.)$name))) # recode recode_fun &lt;- function(rule, y, p_year, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } addhealth_out &lt;- addhealth_out %&gt;% left_join(yrBrth) %&gt;% select(-orig_itemname) %&gt;% group_by(recode, year, p_year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(year = as.numeric(year), data = pmap(list(recode, data, p_year, year), recode_fun)) %&gt;% unnest(data) %&gt;% distinct() # composite within years # compositing within years addhealth_out &lt;- addhealth_out %&gt;% group_by(SID, name, year, p_year) %&gt;% summarize(value = max(value)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.nan(value) | is.infinite(value), NA, value)) addhealth_out &lt;- addhealth_out %&gt;% mutate(group = ifelse(year &gt; p_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, name, group, p_year) %&gt;% summarize(value = max(value)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) %&gt;% ungroup() %&gt;% mutate(value = ifelse(name == &quot;crim&quot; &amp; is.na(value), 0, value)) ## # A tibble: 198,117 x 4 ## SID name p_year value ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 57100270 chldbrth 1995 0 ## 2 57100270 chldbrth 1996 0 ## 3 57100270 chldbrth 2001 0 ## 4 57100270 crim 1995 0 ## 5 57100270 crim 1996 0 ## 6 57100270 crim 2001 0 ## 7 57100270 divorced 1995 0 ## 8 57100270 divorced 1996 0 ## 9 57100270 divorced 2001 0 ## 10 57100270 edu 1995 0 ## # … with 198,107 more rows 2.1.5 Covariates addhealth_match &lt;- addhealth_pers %&gt;% spread(name, value) %&gt;% rename(p_year = year) %&gt;% full_join(addhealth_match) addhealth_match &lt;- addhealth_match %&gt;% mutate(age = p_year - yearBrth, height = height*2.54/100, weight = weight/2.2/2.2, BMI = weight / (height)^2, BMI = ifelse(is.infinite(BMI), NA, BMI)) addhealth_match &lt;- addhealth_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(p_year, SID, physhlthevnt = past) %&gt;% full_join(addhealth_match) %&gt;% mutate_at(vars(drugs, weed), ~ifelse(is.na(.), 0, .)) # select(-yearBrth, -contains(&quot;dad&quot;), -contains(&quot;mom&quot;), -religion, # -gender, -parDivorce, -numSiblng, -religion, -race, -SRhealth) %&gt;% # full_join(addhealth_dem) addhealth_out &lt;- addhealth_out %&gt;% select(-past, -future) %&gt;% distinct() unique(specifications$name)[!unique(specifications$name) %in% colnames(addhealth_match2)] addhealth_SCA &lt;- addhealth_match %&gt;% select(SID, p_year, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% mutate_at(vars(parEdu), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu) ## # A tibble: 19,515 x 16 ## SID p_year age gender grsWages race physhlthevnt SRhealth smokes alcohol exercise ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5710… 1995 18 1 55000 2 0 4 1 1 2 ## 2 5710… 1996 19 1 55000 2 0 4 1 1 2 ## 3 5710… 2001 24 1 55000 2 NA 4 1 1 2 ## 4 5710… 1995 19 1 NA 2 0 NA 1 1 1 ## 5 5710… 1996 20 1 NA 2 0 NA 1 1 1 ## 6 5710… 2001 25 1 NA 2 NA NA 1 1 1 ## 7 5710… 1995 16 0 45000 0 0 3 0 0 2 ## 8 5710… 1996 17 0 45000 0 0 3 0 0 2 ## 9 5710… 2001 22 0 45000 0 0 3 0 0 2 ## 10 5710… 1995 18 0 9000 NA 0 1 NA 0 NA ## # … with 19,505 more rows, and 5 more variables: BMI &lt;dbl&gt;, parDivorce &lt;dbl&gt;, ## # PhysFunc &lt;int&gt;, religion &lt;dbl&gt;, parEdu &lt;dbl&gt; 2.1.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2} else{F}} not_all_na &lt;- function(x) any(!is.na(x)) mice_fun &lt;- function(df){ df &lt;- df %&gt;% select(-bioParinHH, -ageMarried, -chldAgeHlthProb, -childHlthProb, -dadInHH,-momInHH, -parReligion, -liveMom, -yearsNoMom, -yearsNoDad, -yearMoveUS) mice(df, m = 5, maxit=5, printFlag=TRUE) } start &lt;- Sys.time() addhealth_match_imp &lt;- addhealth_match %&gt;% rename(NegAff = `NA`) %&gt;% mutate_if(factor_fun, as.factor) %&gt;% group_by(p_year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na)), imp = map(data, mice_fun)) beepr::beep(sound = 8) print(Sys.time() - start) addhealth_match_imp &lt;- addhealth_match_imp %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% select(-PhysFunc) %&gt;% mutate(PhysFunc = ifelse(physFunc &gt; 0, 1, 0))), imp_df = map(imp_df, ~(.) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu)), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name))))) addhealth_match_imp_long &lt;- addhealth_match_imp %&gt;% select(p_year, imp_df) %&gt;% unnest(imp_df) addhealth_SCA_imp &lt;- addhealth_match_imp %&gt;% select(p_year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% left_join(addhealth_SCA %&gt;% select(p_year, SID, colnames(addhealth_SCA)[!colnames(addhealth_SCA) %in% colnames(.)])) %&gt;% mutate(education = factor(0), married = factor(0), numKids = 0, PhysFunc = factor(PhysFunc)) save(addhealth_match_imp_long, addhealth_SCA_imp, file = sprintf(&quot;%s/data/imputed/addhealth_imputed_small.RData&quot;, wd)) save(addhealth_match_imp, file = sprintf(&quot;%s/data/imputed/addhealth_imputed.RData&quot;, wd)) save(addhealth_alpha, addhealth_pers, addhealth_out, addhealth_match, addhealth_SCA, file = sprintf(&quot;%s/data/clean/addhealth_cleaned.RData&quot;, wd)) save(addhealth_long, file = sprintf(&quot;%s/data/clean/addhealth_raw_long.RData&quot;, wd)) rm(list =ls()[grepl(&quot;addhealth&quot;, ls())]) rm(list =ls()[grepl(&quot;addhealth&quot;, ls())]) 2.2 US 2.2.1 Load Data us_read_fun &lt;- function(Year, WL){ old.names &lt;- (us_codebook %&gt;% filter(year == Year | year == 0))$orig_itemname keep &lt;- c(&quot;pidp&quot;, sprintf(&quot;%s_hidp&quot;, WL)) sprintf(&quot;%s/data/us/%s_indresp.sav&quot;, wd, WL) %&gt;% haven::read_sav(.) %&gt;% select(one_of(old.names)) %&gt;% haven::zap_labels(.) %&gt;% gather(key = orig_itemname, value = value, -one_of(keep), na.rm = T) %&gt;% set_names(c(&quot;HHID&quot;, &quot;PID&quot;, &quot;orig_itemname&quot;, &quot;value&quot;)) %&gt;% mutate(value = as.numeric(value)) } us_codebook &lt;- (codebook %&gt;% filter(study == &quot;US&quot;))$codebook[[1]] %&gt;% mutate(orig_itemname = str_to_lower(orig_itemname)) us_codebook ## # A tibble: 235 x 17 ## study dataset category name itemname wave waveletter year new_itemname orig_itemname ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 US xwaved… out chld… chldbrth 0 &lt;NA&gt; 0 US__out_chl… ch1by_dv ## 2 US a_INDR… out chld… chldbrth 1 a 2009 US__out_chl… a_ch1by4 ## 3 US b_INDR… out chld… chldbrth 2 b 2010 US__out_chl… b_ch1by4 ## 4 US c_INDR… out chld… chldbrth 3 c 2011 US__out_chl… c_ch1by4 ## 5 US d_INDR… out chld… chldbrth 4 d 2012 US__out_chl… d_ch1by4 ## 6 US e_INDR… out chld… chldbrth 5 e 2013 US__out_chl… e_ch1by4 ## 7 US f_INDR… out chld… chldbrth 6 f 2014 US__out_chl… f_ch1by4 ## 8 US g_INDR… out chld… chldbrth 7 g 2015 US__out_chl… g_ch1by4 ## 9 US h_INDR… out chld… chldbrth 8 h 2016 US__out_chl… h_ch1by4 ## 10 US i_INDR… out chld… chldbrth 9 i 2017 US__out_chl… i_ch1by4 ## # … with 225 more rows, and 7 more variables: description &lt;chr&gt;, scale &lt;chr&gt;, ## # reverse_code &lt;lgl&gt;, recode &lt;chr&gt;, mini &lt;lgl&gt;, maxi &lt;lgl&gt;, comp_rule &lt;chr&gt; us_xwaveid &lt;- sprintf(&quot;%s/data/us/xwaveid.sav&quot;, wd) %&gt;% read_sav() %&gt;% filter(hhorig %in% c(3:6)) us &lt;- us_codebook %&gt;% select(wave, waveletter, year) %&gt;% distinct() %&gt;% filter(year != 0) %&gt;% mutate(data = map2(year, waveletter, us_read_fun)) us_long &lt;- us %&gt;% unnest(data) save(us, file = sprintf(&quot;%s/data/clean/us_raw.RData&quot;, wd)) rm(us) 2.2.2 Outcome Variables bhps_waves &lt;- p_waves %&gt;% filter(Study == &quot;BHPS&quot;) %&gt;% select(Used) %&gt;% distinct() us_out &lt;- us_codebook %&gt;% select(-new_itemname) %&gt;% filter(category == &quot;out&quot;) %&gt;% # full_join(crossing(name = unique((.)$name), p_year = bhps_waves$Used)) %&gt;% left_join(us_long) # recode recode_fun &lt;- function(rule, y){ print(rule) x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } us_out &lt;- us_out %&gt;% select(name, itemname, year, reverse_code:comp_rule, PID, value) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data), recode_fun)) %&gt;% unnest(data) ## # A tibble: 9,282,789 x 10 ## recode name itemname year reverse_code mini maxi comp_rule PID value ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## 2 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## 3 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## 4 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## 5 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## 6 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## 7 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## 8 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## 9 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## 10 ifelse(x &lt; 0 &amp; !is.… chldb… chldbrth 2009 NA NA NA max 6.80e7 0 ## # … with 9,282,779 more rows save(us_out, file = sprintf(&quot;%s/data/clean/us_cleaned.RData&quot;, wd)) save(us_long, file = sprintf(&quot;%s/data/clean/us_raw_long.RData&quot;, wd)) rm(us_long) 2.3 BHPS The British Household Panel Study (BHPS; University of Essex, 2018) is a longitudinal study of households in the United Kingdom. These data are available online, through application, from https://www.iser.essex.ac.uk/bhps/about/latest-release-of-bhps-data. Participants were recruited from more than 15,000 individuals from approximately 8,000 households in the United Kingdom. Data have been collected annually since 1991 from approximately 10,000 individuals (5,500 households) in Great Britain but expanded to include Scotland and Wales in 1999 and Northern Ireland in 2001. In 2010, the BHPS stopped data collection, but 6,700 of the current 8,000 participants were solicited to become part of the broader Understanding Society study (University of Essex, 2019). Participants can be matched across studies, so I will use additional data on the original BHPS participants from the Understanding Society study for additional waves of outcome data. Sample sizes vary by year, ranging from 10,264 (1991) to 14419 (2008). This provides 99% power to detect a zero-order correlation effect size of ~.05, two-tailed at alpha .05. 2.3.1 Load Data bhps_read_fun &lt;- function(Year, WL){ old.names &lt;- (bhps_codebook %&gt;% filter(year == Year | year == 0))$orig_itemname keep &lt;- c(&quot;pidp&quot;, sprintf(&quot;%shid&quot;, WL)) sprintf(&quot;%s/data/bhps/%sindresp.sav&quot;, wd, WL) %&gt;% haven::read_sav(.) %&gt;% full_join(sprintf(&quot;%s/data/bhps/%segoalt.sav&quot;, wd, WL) %&gt;% haven::read_sav(.)) %&gt;% full_join(sprintf(&quot;%s/data/bhps/%shhresp.sav&quot;, wd, WL) %&gt;% haven::read_sav(.)) %&gt;% full_join(sprintf(&quot;%s/data/bhps/%sincome.sav&quot;, wd, WL) %&gt;% haven::read_sav(.)) %&gt;% full_join(sprintf(&quot;%s/data/bhps/%sjobhist.sav&quot;, wd, WL) %&gt;% haven::read_sav(.)) %&gt;% select(one_of(keep), one_of(old.names)) %&gt;% haven::zap_labels(.) %&gt;% gather(key = orig_itemname, value = value, -one_of(keep), na.rm = T) %&gt;% set_names(c(&quot;PID&quot;, &quot;HHID&quot;, &quot;orig_itemname&quot;, &quot;value&quot;)) %&gt;% mutate(value = as.numeric(value)) } bhps_codebook &lt;- (codebook %&gt;% filter(study == &quot;BHPS&quot;))$codebook[[1]] %&gt;% mutate(orig_itemname = str_to_lower(orig_itemname)) bhps_codebook ## # A tibble: 1,878 x 23 ## study dataset category name itemname wave waveletter year new_itemname orig_itemname ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 bhps aINDRE… match acci… numAcci… 1 a 1991 bhps__match… anxdts ## 2 bhps bINDRE… match acci… numAcci… 2 b 1992 bhps__match… bnxdts ## 3 bhps cINDRE… match acci… numAcci… 3 c 1993 bhps__match… cnxdts ## 4 bhps dINDRE… match acci… numAcci… 4 d 1994 bhps__match… dnxdts ## 5 bhps eINDRE… match acci… numAcci… 5 e 1995 bhps__match… enxdts ## 6 bhps fINDRE… match acci… numAcci… 6 f 1996 bhps__match… fnxdts ## 7 bhps gINDRE… match acci… numAcci… 7 g 1997 bhps__match… gnxdts ## 8 bhps hINDRE… match acci… numAcci… 8 h 1998 bhps__match… hnxdts ## 9 bhps iINDRE… match acci… numAcci… 9 i 1999 bhps__match… inxdts ## 10 bhps jINDRE… match acci… numAcci… 10 j 2000 bhps__match… jnxdts ## # … with 1,868 more rows, and 13 more variables: description &lt;chr&gt;, scale &lt;chr&gt;, ## # reverse_code &lt;chr&gt;, recode &lt;chr&gt;, mini &lt;dbl&gt;, maxi &lt;dbl&gt;, comp_rule &lt;chr&gt;, ...18 &lt;chr&gt;, ## # ...19 &lt;chr&gt;, ...20 &lt;chr&gt;, ...21 &lt;chr&gt;, ...22 &lt;chr&gt;, ...23 &lt;chr&gt; bhps_xwaveid &lt;- sprintf(&quot;%s/data/bhps/xwaveid.sav&quot;, wd) %&gt;% read_sav() bhps &lt;- bhps_codebook %&gt;% select(wave, waveletter, year) %&gt;% distinct() %&gt;% filter(year != 0) %&gt;% mutate(data = map2(year, waveletter, bhps_read_fun)) bhps_long &lt;- bhps %&gt;% unnest(data) %&gt;% rename(SID = PID) %&gt;% distinct() save(bhps, file = sprintf(&quot;%s/data/clean/bhps_raw.RData&quot;, wd)) rm(bhps) 2.3.2 Matching Variables recode_fun &lt;- function(rule, y, year){ print(rule) yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # rename variables bhps_match &lt;- bhps_codebook %&gt;% filter(category == &quot;match&quot;) %&gt;% select(-wave, -waveletter) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% left_join(bhps_long))) yrBrth &lt;- bhps_codebook %&gt;% filter(name == &quot;yearBrth&quot;) %&gt;% left_join(bhps_long) %&gt;% filter(!is.na(value)) %&gt;% group_by(SID) %&gt;% summarize(yearBrth = Mode(value)) %&gt;% ungroup() bhps_match &lt;- bhps_match %&gt;% filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map(data, ~(.) %&gt;% full_join(yrBrth))) # recode bhps_match &lt;- bhps_match %&gt;% mutate(data = map(data, ~(.) %&gt;% select(SID, year, recode, itemname, value, yearBrth) %&gt;% distinct() %&gt;% group_by(recode, year, itemname) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data))) bhps_htwt &lt;- bhps_match %&gt;% filter(name %in% c(&quot;height&quot;, &quot;weight&quot;)) %&gt;% unnest(data) %&gt;% filter(!is.na(value)) %&gt;% select(year, name, itemname, value, SID) %&gt;% group_by(SID, itemname, year) %&gt;% summarize(value = mean(value, na.rm = T)) %&gt;% ungroup() %&gt;% spread(itemname, value) %&gt;% # filter(weightStn != 0) %&gt;% mutate(height = rowSums(cbind(heightft, heightin), na.rm = T), weight = ifelse(is.na(weightStn), weightkg, rowSums(cbind(weightlbs, weightStn), na.rm = T)), height = height/100) %&gt;% filter(height &gt; .5 &amp; height &lt; 2.5 &amp; weight &gt; 20 &amp; weight &lt; 150) %&gt;% mutate(BMI = weight / (height)^2, BMI = ifelse(is.infinite(BMI), NA, BMI)) %&gt;% select(-heightft, -heightin, -weightlbs, -weightStn, -weightkg, -year) %&gt;% gather(key = name, value = value, height, weight, BMI) %&gt;% group_by(SID, name) %&gt;% summarize(value = mean(value, na.rm = T)) %&gt;% ungroup() %&gt;% spread(name, value) %&gt;% mutate_all(~ifelse(is.infinite(.) | is.nan(.), NA, .)) bhps_relig &lt;- bhps_codebook %&gt;% filter(name == &quot;religion&quot;) %&gt;% left_join(bhps_long) %&gt;% group_by(year, recode) %&gt;% nest() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) %&gt;% ungroup() %&gt;% filter(!is.na(value)) %&gt;% group_by(SID, name) %&gt;% summarize(value = Mode(value)) # reverse code bhps_match &lt;- bhps_match %&gt;% mutate(data = map(data, ~(.) %&gt;% select(-recode) %&gt;% left_join(bhps_codebook %&gt;% select(year, itemname, reverse_code, mini:comp_rule)) %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))))) parIDs &lt;- bhps_match %&gt;% filter(name %in% c(&quot;momID&quot;, &quot;dadID&quot;)) %&gt;% unnest(data) %&gt;% select(SID, year, parID = name, value) %&gt;% distinct() %&gt;% filter(value != 0) %&gt;% group_by(SID, parID) %&gt;% filter(year == min(year)) %&gt;% ungroup() %&gt;% spread(parID, value) %&gt;% mutate_at(vars(momID, dadID), ~mapvalues(., bhps_xwaveid$pid, bhps_xwaveid$pidp, warn_missing = F)) parWages &lt;- bhps_match %&gt;% filter(name == &quot;grsWages&quot;) %&gt;% unnest(data) %&gt;% rename(momID = SID) %&gt;% right_join(parIDs %&gt;% select(momID, SID)) %&gt;% filter(!is.na(value)) %&gt;% mutate(itemname = &quot;momGrsWages&quot;) %&gt;% select(-(reverse_code:maxi), -momID) %&gt;% full_join( bhps_match %&gt;% filter(name == &quot;grsWages&quot;) %&gt;% unnest(data) %&gt;% rename(dadID = SID) %&gt;% right_join(parIDs %&gt;% select(dadID, SID)) %&gt;% filter(!is.na(value)) %&gt;% mutate(itemname = &quot;dadGrsWages&quot;) %&gt;% select(-(reverse_code:maxi), -dadID) ) %&gt;% mutate(name = &quot;parGrsWages&quot;) %&gt;% group_by(year, name, SID) %&gt;% summarize(value = mean(value, na.rm = T)) %&gt;% group_by(SID) %&gt;% summarize(parGrsWages = mean(value, na.rm = T)) %&gt;% ungroup() fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ rule &lt;- ifelse(is.na(rule), &quot;skip&quot;, rule) df %&gt;% group_by(SID, yearBrth, year) %&gt;% # group by person and item (collapse across age) summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } bhps_waves &lt;- p_waves %&gt;% filter(Study == &quot;BHPS&quot;) %&gt;% select(Used) %&gt;% distinct() bhps_match &lt;- bhps_match %&gt;% mutate(data = map(data, ~(.) %&gt;% left_join(yrBrth) %&gt;% filter(year &lt;= max(bhps_waves$Used)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data))) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ rule &lt;- ifelse(is.na(rule), &quot;skip&quot;, rule) bhps_match %&gt;% filter(year &lt;= p_year &amp; comp_rule == rule) %&gt;% group_by(SID, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } bhps_match &lt;- crossing( p_year = bhps_waves$Used, comp_rule = unique(bhps_match$comp_rule) ) %&gt;% mutate(data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% select(-comp_rule) %&gt;% filter(name != &quot;HHID&quot;) %&gt;% pivot_wider(names_from = name, values_from = value, values_fn = list(value = ~max(., na.rm = T))) %&gt;% mutate_all(~ifelse(is.infinite(.), NA, .)) %&gt;% full_join(bhps_htwt) %&gt;% full_join(parWages) %&gt;% filter(!is.na(p_year)) ## # A tibble: 95,699 x 67 ## SID p_year A C DEP E LOC N O OP SE SS SWB SWL ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 9527 1996 NA NA 1.83 NA NA NA NA NA 1 NA 10 4 ## 2 12251 1996 NA NA 1.83 NA NA NA NA NA 1 NA 10 5 ## 3 12935 1996 NA NA 1 NA NA NA NA NA 1 NA 0 4 ## 4 14287 1996 NA NA 1.92 NA NA NA NA NA 2 NA 11 5 ## 5 14971 1996 NA NA 2.75 NA NA NA NA NA 3 NA 21 2 ## 6 15645 1996 NA NA 2.5 NA NA NA NA NA 3 NA 18 2 ## 7 16339 1996 NA NA NA NA NA NA NA NA NA NA NA NA ## 8 17687 1996 NA NA 1.75 NA NA NA NA NA 1 NA 9 6 ## 9 21087 1996 NA NA 1.92 NA NA NA NA NA 1 NA 11 3 ## 10 21767 1996 NA NA 2.08 NA NA NA NA NA 1 NA 13 3 ## # … with 95,689 more rows, and 53 more variables: yearBrth &lt;dbl&gt;, drVisits &lt;dbl&gt;, ## # genderRoles &lt;dbl&gt;, grsWages &lt;dbl&gt;, nbhdQual &lt;dbl&gt;, SRhealth &lt;dbl&gt;, religiosity &lt;dbl&gt;, ## # exercise &lt;dbl&gt;, satFam &lt;dbl&gt;, satHH &lt;dbl&gt;, accidents &lt;dbl&gt;, disability &lt;dbl&gt;, ## # education &lt;dbl&gt;, employed &lt;dbl&gt;, homeHelp &lt;dbl&gt;, married &lt;dbl&gt;, smokes &lt;dbl&gt;, ## # unempBen &lt;dbl&gt;, welfare &lt;dbl&gt;, mvdBigSlry &lt;dbl&gt;, mvdForWork &lt;dbl&gt;, numKids &lt;dbl&gt;, ## # debt &lt;dbl&gt;, investments &lt;dbl&gt;, savings &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, dadID &lt;dbl&gt;, ## # dentalIns &lt;dbl&gt;, dentist &lt;dbl&gt;, domesticDuties &lt;dbl&gt;, eyeDr &lt;dbl&gt;, eyeDrIns &lt;dbl&gt;, ## # gender &lt;dbl&gt;, momID &lt;dbl&gt;, prvntvHlthChcks &lt;dbl&gt;, neighbors &lt;dbl&gt;, satSchl &lt;dbl&gt;, ## # ageMarried &lt;dbl&gt;, weight &lt;dbl&gt;, height &lt;dbl&gt;, momAgeAtBrth &lt;dbl&gt;, numSiblng &lt;dbl&gt;, ## # BMI &lt;dbl&gt;, parGrsWages &lt;dbl&gt;, physhlthevnt &lt;dbl&gt;, age &lt;dbl&gt;, dadEdu &lt;dbl&gt;, ## # dadOccPrstg &lt;dbl&gt;, momEdu &lt;dbl&gt;, momOccPrstg &lt;dbl&gt;, parDivorce &lt;dbl&gt;, race &lt;dbl&gt;, ## # religion &lt;dbl&gt; 2.3.3 Personality Variables # keep correct personality waves bhps_pers &lt;- bhps_codebook %&gt;% mutate(reverse_code = tolower(reverse_code)) %&gt;% select(-new_itemname) %&gt;% filter(category == &quot;pers&quot;) %&gt;% left_join(bhps_long) %&gt;% left_join(p_waves %&gt;% filter(Study == &quot;BHPS&quot;) %&gt;% select(name = p_item, Used)) %&gt;% filter(year %in% bhps_waves$Used) %&gt;% distinct() recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode bhps_pers &lt;- bhps_pers %&gt;% select(name, itemname, year, reverse_code:comp_rule, SID:value) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code bhps_pers &lt;- bhps_pers %&gt;% distinct() %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) # alpha&#39;s bhps_alpha &lt;- bhps_pers %&gt;% select(name, itemname, year, SID, value) %&gt;% group_by(name, year) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% distinct() %&gt;% pivot_wider(names_from = itemname, values_from = value)), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-SID)), NA_real_))) comp_fun &lt;- function(df, rule){ df %&gt;% group_by(SID, HHID) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } # create composites bhps_pers &lt;- bhps_pers %&gt;% group_by(name, comp_rule, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, comp_rule, comp_fun)) %&gt;% unnest(data) %&gt;% select(-comp_rule, -HHID) ## # A tibble: 291,507 x 4 ## name year SID value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 2005 14971 4 ## 2 A 2005 15645 6 ## 3 A 2005 16339 NA ## 4 A 2005 17015 5.67 ## 5 A 2005 22445 5.33 ## 6 A 2005 23807 5.33 ## 7 A 2005 27284 4 ## 8 A 2005 28575 3.67 ## 9 A 2005 30615 5.67 ## 10 A 2005 46927 4.67 ## # … with 291,497 more rows 2.3.4 Outcome Variables bhps_subs &lt;- unique(bhps_pers$SID) us_out &lt;- us_out %&gt;% filter(PID %in% bhps_subs) exit &lt;- sprintf(&quot;%s/data/bhps/xwlsten.sav&quot;, wd) %&gt;% haven::read_sav(.) %&gt;% haven::zap_labels(.) %&gt;% select(SID = pidp, lrio, lewave) %&gt;% mutate(lrio = ifelse(lrio == 99, 1990 + lewave, NA)) %&gt;% full_join(crossing(SID = unique((.)$SID), p_year = bhps_waves$Used)) %&gt;% # filter(!value &lt; 0) mutate(year = ifelse(is.na(lrio) | lrio &lt; 0, NA, lrio), value = ifelse(year &lt;= p_year, NA, ifelse(is.na(year), 0, ifelse(year &gt; p_year, 1, NA)))) %&gt;% select(-year, -lrio, -lewave) %&gt;% mutate(name = &quot;mortality&quot;) bhps_out &lt;- bhps_codebook %&gt;% select(-new_itemname) %&gt;% filter(category == &quot;out&quot;) %&gt;% left_join(bhps_long) recode_fun &lt;- function(rule, y, p_year){ print(rule) x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode bhps_out &lt;- bhps_out %&gt;% select(name, itemname, year, reverse_code:comp_rule, SID:value) %&gt;% full_join(crossing(name = unique((.)$name), p_year = bhps_waves$Used)) %&gt;% group_by(recode, p_year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) # composite within years # compositing within years bhps_out &lt;- bhps_out %&gt;% select(-(reverse_code:maxi), -HHID, -recode) %&gt;% full_join(us_out %&gt;% select(p_year:year, comp_rule, SID = PID, value)) %&gt;% group_by(SID, name, year, p_year) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.nan(value) | is.infinite(value), NA, value)) # composite across years comp_fun &lt;- function(p_year){ bhps_out %&gt;% mutate(group = ifelse(year &gt; p_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, name, group,) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) } bhps_out &lt;- bhps_out %&gt;% mutate(group = ifelse(year &gt; p_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, name, group, p_year) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name, p_year) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) %&gt;% ungroup() bhps_out &lt;- bhps_out %&gt;% filter(name != &quot;mortality&quot;) %&gt;% full_join( bhps_out %&gt;% filter(name == &quot;mortality&quot;) %&gt;% full_join(exit) %&gt;% distinct() %&gt;% group_by(SID, name, p_year) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) ) ## # A tibble: 1,154,787 x 6 ## SID name p_year past future value ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 687 divorced 1996 0 NA 0 ## 2 687 divorced 2001 0 NA 0 ## 3 687 divorced 2005 0 NA 0 ## 4 687 edu 1996 0 NA 0 ## 5 687 edu 2001 0 NA 0 ## 6 687 edu 2005 0 NA 0 ## 7 687 frstjob 1996 1 NA NA ## 8 687 frstjob 2001 1 NA NA ## 9 687 frstjob 2005 1 NA NA ## 10 687 mntlhlthevnt 1996 0 NA 0 ## # … with 1,154,777 more rows 2.3.5 Covariates bhps_match &lt;- bhps_pers %&gt;% spread(name, value) %&gt;% rename(p_year = year) %&gt;% full_join(bhps_match) %&gt;% # physical health event left_join(bhps_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(p_year, SID, physhlthevnt = past) %&gt;% distinct() %&gt;% group_by(SID, p_year) %&gt;% summarize(physhlthevnt = max(physhlthevnt)) %&gt;% ungroup()) %&gt;% distinct() # parental divorce bhps_match &lt;- bhps_out %&gt;% filter(name == &quot;divorced&quot;) %&gt;% rename(momID = SID) %&gt;% select(-name) %&gt;% right_join(parIDs %&gt;% select(momID, SID)) %&gt;% filter(!is.na(past)) %&gt;% mutate(itemname = &quot;momDivorced&quot;, name = &quot;parDivorce&quot;) %&gt;% select(p_year, SID, name, value = past, itemname) %&gt;% full_join( bhps_out %&gt;% filter(name == &quot;divorced&quot;) %&gt;% rename(dadID = SID) %&gt;% right_join(parIDs %&gt;% select(dadID, SID)) %&gt;% filter(!is.na(past)) %&gt;% mutate(itemname = &quot;dadDivorced&quot;, name = &quot;parDivorce&quot;) %&gt;% select(p_year, SID, name, value = past, itemname) ) %&gt;% group_by(p_year, SID, name) %&gt;% summarize(parDivorce = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% select(-name) %&gt;% right_join(bhps_match) bhps_match &lt;- bhps_codebook %&gt;% filter(grepl(&quot;OccPrstg&quot;, name)) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% left_join(bhps_long))) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(value &lt; 0, NA, value)) %&gt;% filter(!is.na(value)) %&gt;% group_by(SID, name) %&gt;% filter(year == min(year)) %&gt;% select(name, SID, value) %&gt;% distinct() %&gt;% spread(name, value) %&gt;% right_join(bhps_match) %&gt;% ungroup() %&gt;% filter(!is.na(p_year)) %&gt;% # select(-comp_rule, -HHID) %&gt;% mutate_all(~ifelse(is.infinite(.), NA, .)) bhps_out &lt;- bhps_out %&gt;% select(-past, -future) %&gt;% distinct() bhps_dem &lt;- bhps_match %&gt;% select(SID, dadOccPrstg, momOccPrstg, parDivorce, race = ethnicity, momEdu, dadEdu)%&gt;% gather(key = item, value = value, -SID, na.rm = T) %&gt;% group_by(SID, item) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% spread(item,value) %&gt;% full_join(bhps_relig %&gt;% spread(name, value)) # age bhps_match &lt;- bhps_match %&gt;% mutate(age = p_year - yearBrth) %&gt;% select(-dadOccPrstg, -momOccPrstg, -parDivorce, -ethnicity, -momEdu, -dadEdu, -religion) %&gt;% full_join(bhps_dem) bhps_SCA &lt;- bhps_match %&gt;% select(SID, p_year, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T), parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% mutate_at(vars(parEdu, parOccPrstg), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu, -momOccPrstg, -dadOccPrstg) ## # A tibble: 95,699 x 19 ## SID p_year age education gender grsWages race physhlthevnt SRhealth smokes exercise ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 9527 1996 35 0 1 13186. 0 1 3.17 1 3.5 ## 2 12251 1996 25 0 1 10485. 2 1 3.17 0 1 ## 3 12935 1996 23 0 1 13109. 1 0 4.8 1 3 ## 4 14287 1996 35 0 0 10948. 0 1 2.5 1 1 ## 5 14971 1996 34 0 1 10948. 1 1 3.17 1 2 ## 6 15645 1996 40 1 1 14686. 0 1 4 0 3 ## 7 16339 1996 24 0 1 15111. 0 0 4.83 0 NA ## 8 17687 1996 27 0 1 11266. 0 0 4.17 1 3 ## 9 21087 1996 32 0 1 28184. 1 1 4.17 1 3.5 ## 10 21767 1996 51 2 1 29317. 0 0 3.33 0 5 ## # … with 95,689 more rows, and 8 more variables: BMI &lt;dbl&gt;, married &lt;dbl&gt;, numKids &lt;dbl&gt;, ## # parDivorce &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, religion &lt;dbl&gt;, parEdu &lt;dbl&gt;, parOccPrstg &lt;dbl&gt; 2.3.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2} else{F}} not_all_na &lt;- function(x) any(!is.na(x)) not_all_id &lt;- function(x) if(is.numeric(x)) sd(x, na.rm = T) != 0 mice_fun &lt;- function(df){ df &lt;- df %&gt;% select(-homeHelp, -dentalIns, -eyeDrIns) mice(df, m = 5, maxit=5, printFlag=TRUE, method = &quot;cart&quot;) } start &lt;- Sys.time() bhps_match_imp &lt;- bhps_match %&gt;% group_by(SID, p_year) %&gt;% mutate(parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% ungroup() %&gt;% # filter(p_year==2001) %&gt;% select(everything(), -dadID, -momID, -momOccPrstg,-dadOccPrstg) %&gt;% filter(!is.na(p_year) &amp; !is.na(SID) &amp; !is.na(yearBrth)) %&gt;% mutate(parOccPrstg = ifelse(is.infinite(parOccPrstg), NA, parOccPrstg)) %&gt;% group_by(p_year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na) %&gt;% select_if(not_all_id)), data = map(data, ~(.) %&gt;% mutate_if(factor_fun, as.factor)), imp = map(data, mice_fun)) beepr::beep(sound = 8) print(Sys.time() - start) bhps_match_imp &lt;- bhps_match_imp %&gt;% filter(year != 1991) %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% select(-momEdu, -dadEdu) %&gt;% ungroup()), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name))))) bhps_match_imp_long &lt;- bhps_match_imp %&gt;% select(p_year, imp_df) %&gt;% unnest(imp_df) %&gt;% select(-SWB) bhps_SCA_imp &lt;- bhps_match_imp %&gt;% select(p_year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% full_join(bhps_SCA %&gt;% select(p_year = year, SID, BMI)) unique(specifications$name)[!unique(specifications$name) %in% colnames(bhps_SCA_imp)] save(bhps_match_imp_long, bhps_SCA_imp, file = sprintf(&quot;%s/data/imputed/bhps_imputed_small.RData&quot;, wd)) save(bhps_match_imp, file = sprintf(&quot;%s/data/imputed/bhps_imputed.RData&quot;, wd)) save(bhps_alpha, bhps_pers, bhps_out, bhps_match, bhps_SCA, file = sprintf(&quot;%s/data/clean/bhps_cleaned.RData&quot;, wd)) save(bhps_long, file = sprintf(&quot;%s/data/clean/bhps_raw_long.RData&quot;, wd)) rm(list =ls()[grepl(&quot;bhps&quot;, ls())]) rm(list = ls()[grepl(&quot;us&quot;, ls())]) 2.4 GSOEP The German Socioeconomic Panel Study (GSOEP; Socio-Economic Panel, 2017) is an ongoing longitudinal study of German collected by the German Institute of Economic Research (DIW Berlin). The data are freely available at https://www.diw.de/soep by application. Data have been collected annually since 1984 (the latest data release includes data up to 2017). Participants have been recruited from more than 11,000 households, which are nationally representative of private German households. 20,000 individuals are sampled each year, on average. It is critical to note that the GSOEP samples households, not individuals, and the households consist of individuals living in both the “old” and “new” federal states (the former West and East Germany), foreigners, and recent immigrants to Germany. Sample size varies by year, ranging from approximately 10,000 (1989) to 31,000 (2013). This provides 99% power to detect a zero-order correlation effect size of ~.06, two-tailed at alpha &lt; .05. 2.4.1 Load Data gsoep_read_fun &lt;- function(Year, WL){ old.names &lt;- (gsoep_codebook %&gt;% filter(year == Year | category == &quot;proc&quot;))$orig_itemname p &lt;- sprintf(&quot;%s/data/gsoep/%sp.sav&quot;, wd, WL) %&gt;% haven::read_sav(.) %&gt;% full_join(sprintf(&quot;%s/data/gsoep/%skind.sav&quot;, wd, WL) %&gt;% haven::read_sav(.)) %&gt;% full_join(sprintf(&quot;%s/data/gsoep/%spequiv.sav&quot;, wd, WL) %&gt;% haven::read_sav(.)) %&gt;% full_join(sprintf(&quot;%s/data/gsoep/%spgen.sav&quot;, wd, WL) %&gt;% haven::read_sav(.)) %&gt;% full_join(sprintf(&quot;%s/data/gsoep/%spkal.sav&quot;, wd, WL) %&gt;% haven::read_sav(.)) %&gt;% select(one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -persnr, -hhnr, na.rm = T) sprintf(&quot;%s/data/gsoep/%shbrutto.sav&quot;, wd, WL) %&gt;% haven::read_sav(.) %&gt;% full_join(sprintf(&quot;%s/data/gsoep/%sh.sav&quot;, wd, WL) %&gt;% haven::read_sav(.)) %&gt;% select(one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -hhnr, na.rm = T) %&gt;% full_join(p %&gt;% select(persnr, hhnr) %&gt;% distinct()) %&gt;% full_join(p) } gsoep_codebook &lt;- (codebook %&gt;% filter(study == &quot;GSOEP&quot;))$codebook[[1]] %&gt;% mutate(orig_itemname = str_to_lower(orig_itemname)) gsoep_codebook ## # A tibble: 1,843 x 20 ## study dataset category name itemname wave waveletter year new_itemname orig_itemname ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 gsoep apequiv match age age 1 a 1984 gsoep__matc… d1110184 ## 2 gsoep bpequiv match age age 2 b 1985 gsoep__matc… d1110185 ## 3 gsoep cpequiv match age age 3 c 1986 gsoep__matc… d1110186 ## 4 gsoep dpequiv match age age 4 d 1987 gsoep__matc… d1110187 ## 5 gsoep epequiv match age age 5 e 1988 gsoep__matc… d1110188 ## 6 gsoep fpequiv match age age 6 f 1989 gsoep__matc… d1110189 ## 7 gsoep gpequiv match age age 7 g 1990 gsoep__matc… d1110190 ## 8 gsoep hpequiv match age age 8 h 1991 gsoep__matc… d1110191 ## 9 gsoep ipequiv match age age 9 i 1992 gsoep__matc… d1110192 ## 10 gsoep jpequiv match age age 10 j 1993 gsoep__matc… d1110193 ## # … with 1,833 more rows, and 10 more variables: description &lt;chr&gt;, scale &lt;chr&gt;, ## # reverse_code &lt;chr&gt;, recode &lt;chr&gt;, mini &lt;dbl&gt;, maxi &lt;dbl&gt;, comp_rule &lt;chr&gt;, ...18 &lt;dbl&gt;, ## # ...19 &lt;lgl&gt;, ...20 &lt;lgl&gt; gsoep &lt;- gsoep_codebook %&gt;% select(wave, waveletter, year) %&gt;% filter(complete.cases(.)) %&gt;% distinct() %&gt;% mutate(data = map2(year, waveletter, gsoep_read_fun)) old.names &lt;- unique(gsoep_codebook$orig_itemname) gsoep_post &lt;- sprintf(&quot;%s/data/gsoep/gpost.sav&quot;, wd) %&gt;% haven::read_sav(.) %&gt;% full_join(sprintf(&quot;%s/data/gsoep/hpost.sav&quot;, wd) %&gt;% haven::read_sav(.)) %&gt;% select(persnr, hhnr, one_of(old.names)) %&gt;% haven::zap_labels(.) %&gt;% select(-hhnr) %&gt;% gather(key = orig_itemname, value = value, -persnr, na.rm = T) gsoep_long &lt;- gsoep %&gt;% unnest(data) %&gt;% select(-hhnr) %&gt;% full_join(gsoep_post) save(gsoep, file = sprintf(&quot;%s/data/clean/gsoep_raw.RData&quot;, wd)) rm(gsoep) 2.4.2 Matching Variables recode_fun &lt;- function(rule, y, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # rename variables gsoep_match &lt;- gsoep_codebook %&gt;% filter(name == &quot;yearBrth&quot;) %&gt;% filter(category == &quot;match&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% left_join(gsoep_long))) yrBrth &lt;- gsoep_match %&gt;% filter(name == &quot;yearBrth&quot;) %&gt;% unnest(data) %&gt;% group_by(persnr) %&gt;% summarize(yearBrth = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(yearBrth = ifelse(is.infinite(yearBrth), NA, yearBrth)) # recode gsoep_match &lt;- gsoep_match %&gt;% filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map(data, ~(.) %&gt;% left_join(yrBrth) %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data))) # reverse code gsoep_match &lt;- gsoep_match %&gt;% mutate(data = map(data, ~(.) %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))))) fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% group_by(persnr, yearBrth, year) %&gt;% # group by person and item (collapse across age) summarize(value = fun_call(value, rule)) %&gt;% ungroup() } gsoep_waves &lt;- p_waves %&gt;% filter(Study == &quot;GSOEP&quot;) %&gt;% select(Used) %&gt;% distinct() gsoep_match &lt;- gsoep_match %&gt;% mutate(data = map(data, ~(.) %&gt;% filter(year &lt;= max(gsoep_waves$Used)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule), data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data))) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ gsoep_match %&gt;% filter(year &lt;= p_year &amp; comp_rule == rule) %&gt;% group_by(persnr, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } gsoep_match &lt;- crossing( p_year = gsoep_waves$Used, comp_rule = unique(gsoep_match$comp_rule) ) %&gt;% mutate(data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) %&gt;% select(-comp_rule, -yearBrth) %&gt;% pivot_wider(names_from = name, values_from = value) ## # A tibble: 346,921 x 62 ## year SID A C DEP E LOC N `NA` O OP PA SE SS SWL ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1994 201 NA NA NA NA 2.62 NA NA NA NA NA NA NA 5 ## 2 1994 203 NA NA NA NA 3.25 NA NA NA NA NA NA NA 6 ## 3 1994 204 NA NA NA NA NA NA NA NA NA NA NA NA NA ## 4 1994 601 NA NA NA NA 3.5 NA NA NA NA NA NA NA 9 ## 5 1994 602 NA NA NA NA 3 NA NA NA NA NA NA NA 4 ## 6 1994 603 NA NA NA NA NA NA NA NA NA NA NA NA NA ## 7 1994 604 NA NA NA NA NA NA NA NA NA NA NA NA NA ## 8 1994 901 NA NA NA NA 3.12 NA NA NA NA NA NA NA 6 ## 9 1994 1101 NA NA NA NA 2.25 NA NA NA NA NA NA NA 10 ## 10 1994 1202 NA NA NA NA 2.62 NA NA NA NA NA NA NA 9 ## # … with 346,911 more rows, and 47 more variables: drVisits &lt;dbl&gt;, exercise &lt;dbl&gt;, ## # grsWages &lt;dbl&gt;, satHealth &lt;dbl&gt;, satHH &lt;dbl&gt;, satIncome &lt;dbl&gt;, social &lt;dbl&gt;, ## # SRhealth &lt;dbl&gt;, nbhdQual &lt;dbl&gt;, religiosity &lt;dbl&gt;, disability &lt;dbl&gt;, education &lt;dbl&gt;, ## # HHsize &lt;dbl&gt;, hlthcare &lt;dbl&gt;, married &lt;dbl&gt;, numKids &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, ## # unempBen &lt;dbl&gt;, urban &lt;dbl&gt;, broPres &lt;dbl&gt;, dadPres &lt;dbl&gt;, momPres &lt;dbl&gt;, ## # religion &lt;dbl&gt;, sisPres &lt;dbl&gt;, ageMarried &lt;dbl&gt;, gender &lt;dbl&gt;, age &lt;dbl&gt;, ## # occPrestige &lt;dbl&gt;, height &lt;dbl&gt;, smokes &lt;dbl&gt;, weight &lt;dbl&gt;, welfare &lt;dbl&gt;, ## # eatingHabits &lt;dbl&gt;, dadAlive &lt;dbl&gt;, momAlive &lt;dbl&gt;, alcohol &lt;dbl&gt;, satFam &lt;dbl&gt;, ## # auntPres &lt;dbl&gt;, gmaPres &lt;dbl&gt;, gpaPres &lt;dbl&gt;, unclPres &lt;dbl&gt;, dadEdu &lt;dbl&gt;, ## # dadOccPrstg &lt;dbl&gt;, momEdu &lt;dbl&gt;, momOccPrstg &lt;dbl&gt;, physhlthevnt &lt;dbl&gt;, BMI &lt;dbl&gt; 2.4.3 Personality Variables # keep correct personality waves gsoep_pers &lt;- gsoep_codebook %&gt;% select(-new_itemname) %&gt;% filter(category == &quot;pers&quot;) %&gt;% left_join(gsoep_long) %&gt;% left_join(p_waves %&gt;% filter(Study == &quot;GSOEP&quot;) %&gt;% select(name = p_item, Used)) %&gt;% filter(year %in% Used) recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode gsoep_pers &lt;- gsoep_pers %&gt;% select(name, itemname, year, reverse_code:comp_rule, persnr, value) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code # reverse code gsoep_pers &lt;- gsoep_pers %&gt;% distinct() %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) # alpha&#39;s gsoep_alpha &lt;- gsoep_pers %&gt;% select(name, itemname, year, persnr, value) %&gt;% group_by(name, year) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% pivot_wider(names_from = itemname, values_from = value)), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-persnr)), NA_real_))) comp_fun &lt;- function(df, rule){ df %&gt;% group_by(persnr) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } # create composites gsoep_pers &lt;- gsoep_pers %&gt;% group_by(name, comp_rule, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, comp_rule, comp_fun)) %&gt;% unnest(data) %&gt;% select(-comp_rule) %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) ## # A tibble: 504,605 x 4 ## name year SID value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 2005 201 7 ## 2 A 2005 203 4.67 ## 3 A 2005 602 4.33 ## 4 A 2005 901 4.67 ## 5 A 2005 1202 7 ## 6 A 2005 1501 4.67 ## 7 A 2005 1601 4 ## 8 A 2005 1602 6.67 ## 9 A 2005 1603 4.33 ## 10 A 2005 1701 7 ## # … with 504,595 more rows 2.4.4 Outcome Variables gsoep_pers_subs &lt;- unique(gsoep_pers$persnr) gsoep_waves &lt;- p_waves %&gt;% filter(Study == &quot;GSOEP&quot;) %&gt;% select(Used) %&gt;% distinct() exit &lt;- sprintf(&quot;%s/data/gsoep/ppfad.sav&quot;, wd) %&gt;% haven::read_sav(.) %&gt;% select(persnr, todjahr) %&gt;% gather(key = orig_itemname, value = value, -persnr) %&gt;% full_join(crossing(orig_itemname = &quot;todjahr&quot;, p_year = gsoep_waves$Used)) %&gt;% # filter(!value &lt; 0) mutate(year = ifelse(is.na(value) | value &lt; 0, NA, value), value = ifelse(year &lt;= p_year | is.na(year), 0, ifelse(year &gt; p_year, 1, NA))) %&gt;% left_join(gsoep_codebook %&gt;% select(orig_itemname, name)) %&gt;% select(-year, -orig_itemname) %&gt;% filter(persnr %in% gsoep_pers_subs) gsoep_out &lt;- gsoep_codebook %&gt;% select(-new_itemname) %&gt;% filter(category == &quot;out&quot;) %&gt;% left_join(gsoep_long %&gt;% filter(persnr %in% gsoep_pers_subs)) # recode gsoep_out &lt;- gsoep_out %&gt;% select(name, itemname, year, reverse_code:comp_rule, persnr, recode, value) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # composite within years # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% group_by(persnr, name, year) %&gt;% # group by person and item (collapse across age) summarize(value = fun_call(value, rule)) %&gt;% ungroup() } gsoep_out &lt;- gsoep_out %&gt;% # filter(year &lt;= max(gsoep_waves$Used)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(comp_rule = ifelse(comp_rule == &quot;select&quot;, &quot;skip&quot;, comp_rule), data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data) # composite across years comp_fun &lt;- function(p_year){ gsoep_out %&gt;% mutate(group = ifelse(year &gt; p_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(persnr, name, group) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(persnr, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) } gsoep_out &lt;- tibble(p_year = gsoep_waves$Used) %&gt;% mutate(data = map(p_year, comp_fun)) %&gt;% unnest(data) %&gt;% filter(name != &quot;mortality&quot;) %&gt;% full_join(exit) ## # A tibble: 4,008,294 x 6 ## p_year SID name future past value ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2005 201 chldbrth 0 0 0 ## 2 2005 201 chldmvout 0 0 0 ## 3 2005 201 divorced 0 0 0 ## 4 2005 201 edu NA NA NA ## 5 2005 201 frstJob 0 0 0 ## 6 2005 201 married 0 0 0 ## 7 2005 201 mntlhlthevnt 0 0 0 ## 8 2005 201 mvInPrtnr 0 0 0 ## 9 2005 201 physhlthevnt 0 1 NA ## 10 2005 201 retired 1 1 NA ## # … with 4,008,284 more rows 2.4.5 Covariates recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } old.names &lt;- unique(gsoep_codebook$orig_itemname) gsoep_bp &lt;- sprintf(&quot;%s/data/gsoep/bioparen.sav&quot;, wd) %&gt;% haven::read_sav(.) %&gt;% select(one_of(old.names), -hhnr) %&gt;% gather(key = orig_itemname, value = value, -persnr, -fnr, -mnr, na.rm = T) %&gt;% left_join(gsoep_codebook) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data), recode_fun)) %&gt;% unnest(data) %&gt;% filter(!is.na(value)) %&gt;% group_by(persnr, name, fnr, mnr) %&gt;% summarize(value = fun_call(value, comp_rule)) %&gt;% ungroup() %&gt;% spread(name, value) %&gt;% mutate_at(vars(fnr, mnr), ~ifelse((.) &lt; 0, NA, .)) %&gt;% rename(dadID = fnr, momID = mnr) # parental divorce gsoep_match &lt;- gsoep_out %&gt;% filter(name == &quot;divorced&quot;) %&gt;% rename(momID = persnr) %&gt;% right_join(gsoep_bp %&gt;% select(momID, persnr)) %&gt;% filter(!is.na(past)) %&gt;% mutate(itemname = &quot;momDivorced&quot;, name = &quot;parDivorce&quot;) %&gt;% select(p_year, persnr, name, value = past, itemname) %&gt;% full_join( gsoep_out %&gt;% filter(name == &quot;divorced&quot;) %&gt;% rename(dadID = persnr) %&gt;% right_join(gsoep_bp %&gt;% select(dadID, persnr)) %&gt;% filter(!is.na(past)) %&gt;% mutate(itemname = &quot;dadDivorced&quot;, name = &quot;parDivorce&quot;) %&gt;% select(p_year, persnr, name, value = past, itemname) ) %&gt;% group_by(p_year, persnr, name) %&gt;% summarize(parDivorce = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% select(-name) %&gt;% right_join(gsoep_match) gsoep_match &lt;- gsoep_pers %&gt;% spread(name, value) %&gt;% full_join(gsoep_match %&gt;% rename(year = p_year)) %&gt;% select(-momOccPrstg, -dadOccPrstg) %&gt;% full_join(gsoep_bp %&gt;% select(-momID, -dadID)) %&gt;% # physical health event left_join(gsoep_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(year = p_year, persnr, physhlthevnt = past) %&gt;% distinct() %&gt;% group_by(persnr, year) %&gt;% summarize(physhlthevnt = max(physhlthevnt)) %&gt;% ungroup()) %&gt;% distinct() gsoep_out &lt;- gsoep_out %&gt;% group_by(persnr, p_year, name) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% distinct() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) gsoep_match &lt;- gsoep_match %&gt;% group_by(persnr, year) %&gt;% mutate(BMI = ifelse(!is.na(weight) &amp; !is.na(height), weight/(height/100)^2, NA)) %&gt;% ungroup() gsoep_SCA &lt;- gsoep_match %&gt;% select(persnr, p_year = year, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(persnr) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T), parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% mutate_at(vars(parEdu, parOccPrstg), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu, -momOccPrstg, -dadOccPrstg) unique(specifications$name)[!unique(specifications$name) %in% colnames(gsoep_match)] ## # A tibble: 346,921 x 18 ## SID p_year age education gender grsWages physhlthevnt SRhealth smokes alcohol exercise ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 201 1994 58 NA 1 2979. 1 2.5 NA NA 1 ## 2 203 1994 24 2 NA 5054. 1 4.5 NA NA 4 ## 3 204 1994 NA NA NA 2599. 0 NA NA NA NA ## 4 601 1994 30 NA 0 31259. 1 4 NA NA 3.86 ## 5 602 1994 26 1 1 35436. 1 4 NA NA 2.86 ## 6 603 1994 43 NA NA 66717. 0 NA NA NA NA ## 7 604 1994 1 NA NA 69202. 0 NA NA NA NA ## 8 901 1994 33 NA 1 13774. 1 3.5 NA NA 3.71 ## 9 1101 1994 78 NA 1 1940. 1 3 NA NA 1 ## 10 1202 1994 71 NA 1 2989. 1 3 NA NA 1 ## # … with 346,911 more rows, and 7 more variables: BMI &lt;dbl&gt;, married &lt;dbl&gt;, numKids &lt;dbl&gt;, ## # PhysFunc &lt;dbl&gt;, religion &lt;dbl&gt;, parEdu &lt;dbl&gt;, parOccPrstg &lt;dbl&gt; 2.4.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2} else{F}} not_all_na &lt;- function(x) any(!is.na(x)) not_all_id &lt;- function(x) if(is.numeric(x)) sd(x, na.rm = T) != 0 mice_fun &lt;- function(df){ mice(df, m = 5, maxit=5, printFlag=TRUE, method = &quot;cart&quot;) } gsoep_match_imp &lt;- gsoep_match %&gt;% filter(!is.na(year) &amp; !is.na(SID)) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T), parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% mutate_at(vars(parEdu, parOccPrstg), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu, -momOccPrstg, -dadOccPrstg) %&gt;% group_by(year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na) %&gt;% select_if(not_all_id)), data = map(data, ~(.) %&gt;% mutate_if(factor_fun, as.factor)), imp = map(data, mice_fun)) beepr::beep(sound = 8) load_fun &lt;- function(year){ load(sprintf(&quot;~/Downloads/GSOEP_%s.RData&quot;, year)) m } gsoep_match_imp &lt;- tibble(year = c(1994, 2002, 2005, 2006, 2007), imp = map(year, load_fun)) gsoep_match_imp &lt;- gsoep_match_imp %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% mutate(nbhdQual = ifelse(is.factor(nbhdQual), as.numeric(as.character(nbhdQual)), nbhdQual))), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name))))) gsoep_match_imp_long &lt;- gsoep_match_imp %&gt;% select(year, imp_df) %&gt;% unnest(imp_df) %&gt;% mutate(alcohol = factor(ifelse(alcohol &gt; 3, 0, 1))) gsoep_SCA_imp &lt;- gsoep_match_imp %&gt;% select(p_year = year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% mutate(alcohol = ifelse(alcohol &gt; 3, 0, 1)) %&gt;% full_join(gsoep_SCA %&gt;% select(p_year, SID, BMI)) unique(specifications$name)[!unique(specifications$name) %in% colnames(gsoep_SCA_imp)] gsoep_match_imp_long &lt;- gsoep_match_imp_long %&gt;% select(SID, age) %&gt;% distinct() %&gt;% group_by(SID) %&gt;% summarize(age = Mode(age)) %&gt;% full_join(gsoep_match_imp_long %&gt;% select(-age)) gsoep_SCA_imp &lt;- gsoep_SCA_imp %&gt;% select(SID, smokes, alcohol, BMI) %&gt;% mutate_at(vars(smokes), ~as.numeric(as.character(.))) %&gt;% distinct() %&gt;% gather(item, value, -SID, na.rm = T) %&gt;% group_by(SID, item) %&gt;% summarize(value = max(value)) %&gt;% ungroup() %&gt;% spread(item, value) %&gt;% mutate_at(vars(alcohol, smokes), factor) %&gt;% full_join(gsoep_SCA_imp %&gt;% select(-smokes, -alcohol, -BMI)) %&gt;% filter(!is.na(age)) %&gt;% select(-age) %&gt;% full_join(gsoep_match_imp_long %&gt;% select(SID, p_year = year, age) %&gt;% distinct()) gsoep_match_imp_long &lt;- gsoep_match_imp_long %&gt;% rename(p_year = year) gsoep_match &lt;- gsoep_match %&gt;% rename(SID = persnr) gsoep_out &lt;- gsoep_out %&gt;% rename(SID = persnr) gsoep_pers &lt;- gsoep_pers %&gt;% rename(SID = persnr) gsoep_SCA &lt;- gsoep_SCA %&gt;% rename(SID = persnr) save(gsoep_SCA_imp, gsoep_match_imp_long, file = sprintf(&quot;%s/data/imputed/gsoep_imputed_small.RData&quot;, wd)) save(gsoep_match_imp, file = sprintf(&quot;%s/data/imputed/gsoep_imputed.RData&quot;, wd)) save(gsoep_alpha, gsoep_pers, gsoep_out, gsoep_match, gsoep_SCA, file = sprintf(&quot;%s/data/clean/gsoep_cleaned.RData&quot;, wd)) save(gsoep_long, file = sprintf(&quot;%s/data/clean/gsoep_raw_long.RData&quot;, wd)) rm(list =ls()[grepl(&quot;gsoep&quot;, ls())]) rm(list =ls()[grepl(&quot;gsoep&quot;, ls())]) 2.5 HILDA The Household Income and Labour Dynamics in Australia (HILDA; Wilkins, Laß, Butterworth, &amp; Vera-Toscano, 2019) study is an ongoing longitudinal study of Australian households. These data are available through application from https://melbourneinstitute.unimelb.edu.au/hilda/for-data-users. Participants were recruited from more than 17,000 individuals. Data have been collected annually since 2001. The latest data release includes 17 waves of data from 2001 to 2017. More documentation can be found in the HILDA data dictionary at https://www.online.fbe.unimelb.edu.au/HILDAodd/srchSubjectAreas.aspx. Sample sizes vary by year, ranging from 12,408 (2004) to 17,693 (2016). This provides 99% power to detect a zero-order correlation effect size of ~.03, two tailed at alpha .05. 2.5.1 Load Data hilda_read_fun &lt;- function(Year, WL){ old.names &lt;- (hilda_codebook %&gt;% filter(year == Year | year == 0))$orig_itemname sprintf(&quot;%s/data/hilda/Combined %s180c.sav&quot;, wd, WL) %&gt;% haven::read_sav(.) %&gt;% select(one_of(old.names)) } hilda_codebook &lt;- (codebook %&gt;% filter(study == &quot;HILDA&quot;))$codebook[[1]] hilda_codebook ## # A tibble: 1,692 x 17 ## study dataset category name itemname wave_letter ...7 year new_itemname orig_itemname ## &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 hilda NA match alco… alcohol &lt;NA&gt; NA 2001 hilda__matc… alsdrink ## 2 hilda NA match alco… alcohol &lt;NA&gt; NA 2002 hilda__matc… blsdrkf ## 3 hilda NA match alco… alcohol &lt;NA&gt; NA 2003 hilda__matc… clsdrkf ## 4 hilda NA match alco… alcohol &lt;NA&gt; NA 2004 hilda__matc… dlsdrkf ## 5 hilda NA match alco… alcohol &lt;NA&gt; NA 2005 hilda__matc… elsdrkf ## 6 hilda NA match alco… alcohol &lt;NA&gt; NA 2006 hilda__matc… flsdrkf ## 7 hilda NA match alco… alcohol &lt;NA&gt; NA 2007 hilda__matc… glsdrkf ## 8 hilda NA match alco… alcohol &lt;NA&gt; NA 2008 hilda__matc… hlsdrkf ## 9 hilda NA match alco… alcohol &lt;NA&gt; NA 2009 hilda__matc… ilsdrkf ## 10 hilda NA match alco… alcohol &lt;NA&gt; NA 2010 hilda__matc… jlsdrkf ## # … with 1,682 more rows, and 7 more variables: description &lt;chr&gt;, scale &lt;chr&gt;, ## # reverse_code &lt;chr&gt;, recode &lt;chr&gt;, mini &lt;dbl&gt;, maxi &lt;dbl&gt;, comp_rule &lt;chr&gt; hilda &lt;- hilda_codebook %&gt;% select(year, wave_letter) %&gt;% filter(!is.na(wave_letter)) %&gt;% distinct() %&gt;% filter(year &lt;= 2015) %&gt;% mutate(data = map2(year, wave_letter, hilda_read_fun)) save(hilda, file = sprintf(&quot;%s/data/clean/hilda_raw.RData&quot;, wd)) 2.5.2 Matching Variables rename_fun &lt;- function(df, Year){ df &lt;- df %&gt;% haven::zap_labels(.) %&gt;% gather(key = orig_itemname, value = value, -xwaveid, na.rm=T) %&gt;% mutate(value=as.numeric(value)) hilda_codebook %&gt;% filter(category == &quot;match&quot; &amp; year == Year) %&gt;% full_join(df) } # rename variables hilda_match &lt;- hilda %&gt;% mutate(data = map2(data, year, rename_fun)) %&gt;% select(-year, -wave_letter) %&gt;% unnest(data) %&gt;% distinct() %&gt;% rename(SID = xwaveid) yrBrth &lt;- hilda_match %&gt;% filter(name == &quot;yearBrth&quot;) %&gt;% group_by(SID) %&gt;% summarize(yearBrth = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(yearBrth = ifelse(is.infinite(yearBrth), NA, yearBrth)) # recode recode_fun &lt;- function(rule, y, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } hilda_match &lt;- hilda_match %&gt;% filter(name != &quot;yearBrth&quot;) %&gt;% left_join(yrBrth) %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) # reverse code hilda_match &lt;- hilda_match %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% group_by(SID, yearBrth, name, year) %&gt;% # group by person and item (collapse across age) summarize(value = fun_call(value, rule)) %&gt;% ungroup() } hilda_waves &lt;- p_waves %&gt;% filter(Study == &quot;HILDA&quot;) %&gt;% select(Used) %&gt;% distinct() hilda_match &lt;- hilda_match %&gt;% filter(year &lt;= max(hilda_waves$Used)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ hilda_match %&gt;% filter(year &lt;= p_year &amp; comp_rule == rule) %&gt;% group_by(SID, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } hilda_match &lt;- crossing( p_year = hilda_waves$Used, comp_rule = unique(hilda_match$comp_rule) ) %&gt;% mutate(data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) %&gt;% select(-comp_rule) %&gt;% pivot_wider(names_from = name, values_from = value, names_repair = &quot;unique&quot;) ## # A tibble: 82,104 x 58 ## p_year SID A C DEP E IQ LOC N `NA` O PA SE SS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2003 100001 NA NA 0 NA NA 6 NA 1.33 NA 5 NA 4.3 ## 2 2003 100002 NA NA 1 NA NA 2.71 NA 2 NA 4 NA 5 ## 3 2003 100003 NA NA 0 NA NA 5.71 NA 2 NA 4.5 NA 4.2 ## 4 2003 100004 NA NA 0 NA NA 4.43 NA 2.67 NA 4.5 NA 5.3 ## 5 2003 100005 NA NA 0 NA NA 7 NA 1 NA 5 NA 7 ## 6 2003 100006 NA NA 1 NA NA 5 NA 3 NA 5.5 NA 4.2 ## 7 2003 100008 NA NA NA NA NA NA NA NA NA NA NA NA ## 8 2003 100009 NA NA NA NA NA NA NA NA NA NA NA NA ## 9 2003 100010 NA NA 0 NA NA 5.57 NA 1.33 NA 5 NA 5.9 ## 10 2003 100011 NA NA 1 NA NA 6.14 NA 2.33 NA 4 NA 6.5 ## # … with 82,094 more rows, and 44 more variables: SWL &lt;dbl&gt;, yearBrth &lt;dbl&gt;, ## # compareHealth &lt;dbl&gt;, grsWages &lt;dbl&gt;, HHsize &lt;dbl&gt;, hlthDecline &lt;dbl&gt;, loneliness &lt;dbl&gt;, ## # nbhdQual &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, satFam &lt;dbl&gt;, satFinances &lt;dbl&gt;, satHH &lt;dbl&gt;, ## # sickEasy &lt;dbl&gt;, SRhealth &lt;dbl&gt;, alcohol &lt;dbl&gt;, dadOccPrstg &lt;dbl&gt;, dadOcc &lt;dbl&gt;, ## # education &lt;dbl&gt;, employed &lt;dbl&gt;, exercise &lt;dbl&gt;, married &lt;dbl&gt;, numKids &lt;dbl&gt;, ## # urban &lt;dbl&gt;, welfare &lt;dbl&gt;, momOccPrstg &lt;dbl&gt;, momOcc &lt;dbl&gt;, disability &lt;dbl&gt;, ## # ageMarried &lt;dbl&gt;, gender &lt;dbl&gt;, hospital &lt;dbl&gt;, visitDr &lt;dbl&gt;, weight &lt;dbl&gt;, ## # height &lt;dbl&gt;, numSiblng &lt;dbl&gt;, dadAlive &lt;dbl&gt;, momAlive &lt;dbl&gt;, physhlthevnt &lt;dbl&gt;, ## # age &lt;dbl&gt;, BMI &lt;dbl&gt;, dadEdu &lt;dbl&gt;, momEdu &lt;dbl&gt;, parDivorce &lt;dbl&gt;, religion &lt;dbl&gt;, ## # smokes &lt;dbl&gt; 2.5.3 Personality Variables hilda &lt;- reduce(hilda$data, full_join) %&gt;% haven::zap_labels(.) hilda_long &lt;- hilda %&gt;% mutate_all(as.numeric) %&gt;% pivot_longer(-xwaveid, names_to = &quot;orig_itemname&quot;, values_to = &quot;value&quot;, values_drop_na = TRUE) %&gt;% rename(SID = xwaveid) # keep correct personality waves hilda_pers &lt;- hilda_codebook %&gt;% select(-new_itemname) %&gt;% filter(category == &quot;pers&quot;) %&gt;% left_join(hilda_long) %&gt;% left_join(p_waves %&gt;% filter(Study == &quot;HILDA&quot;) %&gt;% select(name = p_item, Used)) %&gt;% filter(year %in% Used) recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode hilda_pers &lt;- hilda_pers %&gt;% select(name, itemname, year, reverse_code:comp_rule, SID, value) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code hilda_pers &lt;- hilda_pers %&gt;% distinct() %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) # alpha&#39;s hilda_alpha &lt;- hilda_pers %&gt;% select(name, itemname, year, SID, value) %&gt;% group_by(name, year) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% pivot_wider(names_from = itemname, values_from = value)), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-SID)), NA_real_))) comp_fun &lt;- function(df, rule){ df %&gt;% group_by(SID) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } # create composites hilda_pers &lt;- hilda_pers %&gt;% group_by(name, comp_rule, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;average&quot;, comp_rule), data = map2(data, comp_rule, comp_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(is.nan(value) | is.infinite(value), NA, value)) 2.5.4 Outcome Variables hilda_out &lt;- hilda_codebook %&gt;% select(-new_itemname) %&gt;% filter(category == &quot;out&quot; &amp; year != &quot;0&quot;) %&gt;% left_join(hilda_long) old.names &lt;- unique((hilda_codebook %&gt;% filter(category == &quot;out&quot; &amp; year == &quot;0&quot;))$orig_itemname) hilda_out_stp &lt;- sprintf(&quot;%s/data/hilda/Master r180c.sav&quot;, wd) %&gt;% read_sav() %&gt;% zap_labels() %&gt;% select(SID = xwaveid, one_of(old.names)) %&gt;% gather(orig_itemname, value, one_of(old.names)) %&gt;% full_join(crossing(orig_itemname = &quot;yodeath&quot;, year = hilda_waves$Used)) %&gt;% left_join(hilda_codebook %&gt;% select(-new_itemname, -year)) # recode hilda_out &lt;- hilda_out %&gt;% select(name, itemname, year, reverse_code:comp_rule, SID, value) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) recode_fun &lt;- function(rule, y, p_year){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } hilda_out_stp &lt;- hilda_out_stp %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) # composite within years # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% group_by(SID, name, year) %&gt;% # group by person and item (collapse across age) summarize(value = fun_call(value, rule)) %&gt;% ungroup() } hilda_waves &lt;- p_waves %&gt;% filter(Study == &quot;HILDA&quot;) %&gt;% select(Used) %&gt;% distinct() hilda_out &lt;- hilda_out %&gt;% # filter(year &lt;= max(hilda_waves$Used)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;max&quot;, comp_rule), data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) # composite across years comp_fun &lt;- function(p_year){ hilda_out %&gt;% mutate(group = ifelse(year &gt; p_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, name, group) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) } hilda_out &lt;- tibble(p_year = hilda_waves$Used) %&gt;% mutate(data = map(p_year, comp_fun)) %&gt;% unnest(data) %&gt;% full_join(hilda_out_stp %&gt;% select(p_year = year, SID, name, value) %&gt;% mutate(SID = as.numeric(SID))) 2.5.5 Covariates hilda_match &lt;- hilda_pers %&gt;% select(-comp_rule) %&gt;% spread(name, value) %&gt;% rename(p_year = year) %&gt;% full_join(hilda_match %&gt;% mutate(SID = as.numeric(SID))) %&gt;% # physical health event left_join(hilda_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(p_year, SID, physhlthevnt = past) %&gt;% distinct() %&gt;% group_by(SID, p_year) %&gt;% summarize(physhlthevnt = max(physhlthevnt)) %&gt;% ungroup()) %&gt;% distinct() hilda_match &lt;- hilda_match %&gt;% group_by(SID, p_year) %&gt;% mutate(age = p_year - yearBrth) %&gt;% ungroup() %&gt;% rename(momOccPrstg = momJobPrstg, dadOccPrstg = dadJobPrstg) hilda_dem &lt;- hilda_match %&gt;% select(SID, religion, smokes, parDivorce, BMI, momEdu, dadEdu) %&gt;% gather(key= item, value = value, -SID, na.rm = T) %&gt;% group_by(SID, item) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% spread(item, value) %&gt;% mutate(parDivorce = ifelse(is.na(parDivorce), 0, parDivorce)) hilda_match &lt;- hilda_match %&gt;% select(-religion, -smokes, -parDivorce, -BMI, -momEdu, -dadEdu) %&gt;% full_join(hilda_dem) hilda_out &lt;- hilda_out %&gt;% select(-past, -future) %&gt;% distinct() hilda_SCA &lt;- hilda_match %&gt;% select(SID, p_year, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T), parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% mutate_at(vars(parEdu, parOccPrstg), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu, -momOccPrstg, -dadOccPrstg) unique(specifications$name)[!unique(specifications$name) %in% colnames(hilda_SCA_imp)] 2.5.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2 &amp; length(unique(x)) &lt;= 4} else{F}} not_all_id &lt;- function(x) if(is.numeric(x)) sd(x, na.rm = T) != 0 mice_fun &lt;- function(df){ mice(df, m = 5, maxit=5, printFlag=TRUE) } hilda_match_imp &lt;- hilda_match %&gt;% rename(NegAff = `NA`) %&gt;% group_by(SID, year) %&gt;% mutate(parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% select(-momOccPrstg, -dadOccPrstg) %&gt;% ungroup() %&gt;% mutate_all(~ifelse(is.infinite(.), NA, .)) %&gt;% filter(!is.na(year) &amp; !is.na(SID)) %&gt;% group_by(year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na) %&gt;% select_if(not_all_id)), data = map(data, ~(.) %&gt;% mutate_if(factor_fun, as.factor)), imp = map(data, mice_fun)) beepr::beep(sound = 8) hilda_match_imp &lt;- hilda_match_imp %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% mutate(PhysFunc = factor(ifelse(PhysFunc == 1, 0, 1)))), imp_df = map(imp_df, ~(.) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% select(-momEdu, -dadEdu) %&gt;% ungroup()), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name))))) hilda_match_imp_long &lt;- hilda_match_imp %&gt;% select(p_year, imp_df) %&gt;% unnest(imp_df) hilda_SCA_imp &lt;- hilda_match_imp %&gt;% select(p_year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% left_join(hilda_SCA %&gt;% select(p_year, SID, colnames(hilda_SCA)[!colnames(hilda_SCA) %in% colnames(.)])) %&gt;% mutate(race = factor(0)) unique(specifications$name)[!unique(specifications$name) %in% colnames(hilda_SCA_imp)] save(hilda_match_imp_long, hilda_SCA_imp, file = sprintf(&quot;%s/data/imputed/hilda_imputed_small.RData&quot;, wd)) save(hilda_match_imp, file = sprintf(&quot;%s/data/imputed/hilda_imputed.RData&quot;, wd)) save(hilda_alpha, hilda_pers, hilda_out, hilda_match, hilda_SCA, file = sprintf(&quot;%s/data/clean/hilda_cleaned.RData&quot;, wd)) save(hilda_long, file = sprintf(&quot;%s/data/clean/hilda_raw_long.RData&quot;, wd)) rm(list =ls()[grepl(&quot;hilda&quot;, ls())]) rm(list =ls()[grepl(&quot;hilda&quot;, ls())]) 2.6 HRS The Health and Retirement Study (HRS; Juster &amp; Suzman, 1995) is an ongoing longitudinal study of households in the United States. These data are available at https://hrs.isr.umich.edu by creating a free account. Participants were recruited from more than 35,000 individuals from the financial households of individuals born between 1931 and 1941 in the US. Data have been collected biannually since 1992. The latest data release includes data up to 2016. On average, 10,000 individuals are sampled each wave More information on the HRS can be found at https://hrs.isr.umich.edu/documentation/survey-design, but, in short, the HRS is a nationally representative sample of adults over 50 in the US. It is critical to note that the HRS samples households of the original cohort and follows individuals and their spouses or partners until their death. Sample size varies by year, ranging from approximately 7,500 (2014) to 15,500 (1992). (https://hrs.isr.umich.edu/sites/default/files/biblio/ResponseRates_2017.pdf). This provides 99/% power to detect a zero-order correlation effect size of ~.04, two-tailed at alpha .05. 2.6.1 Load Data hrs_read_fun &lt;- function(year) { read_da &lt;- function(da, dct, Year){ print(paste(da, dct, year, sep = &quot; &quot;)) data.file &lt;- sprintf(&quot;%s/data/hrs/%s/%s&quot;, wd, Year, da) # Set path to the dictionary file &quot;*.DCT&quot; dict.file &lt;- sprintf(&quot;%s/data/hrs/%s/%s&quot;, wd, Year, dct) # Read the dictionary file df.dict &lt;- read.table(dict.file, skip = 1, fill = TRUE, stringsAsFactors = FALSE) # Set column names for dictionary dataframe colnames(df.dict) &lt;- c(&quot;col.num&quot;,&quot;col.type&quot;,&quot;col.name&quot;,&quot;col.width&quot;,&quot;col.lbl&quot;) # Remove last row which only contains a closing } row &lt;- which(df.dict$col.name == &quot;HHID&quot;) df.dict &lt;- df.dict[-nrow(df.dict),] if(row == 2){df.dict &lt;- df.dict[-1,]} # Extract numeric value from column width field df.dict$col.width &lt;- as.integer(sapply(df.dict$col.width, gsub, pattern = &quot;[^0-9\\\\.]&quot;, replacement = &quot;&quot;)) # Convert column types to format to be used with read_fwf function df.dict$col.type &lt;- sapply(df.dict$col.type, function(x) ifelse(x %in% c(&quot;int&quot;,&quot;byte&quot;,&quot;long&quot;), &quot;i&quot;, ifelse(x == &quot;float&quot;, &quot;n&quot;, ifelse(x == &quot;double&quot;, &quot;d&quot;, &quot;c&quot;)))) # Read the data file into a dataframe df &lt;- read_fwf(file = data.file, fwf_widths(widths = df.dict$col.width, col_names = df.dict$col.name), col_types = paste(df.dict$col.type, collapse = &quot;&quot;)) # Add column labels to headers attributes(df)$variable.labels &lt;- df.dict$col.lbl old.names &lt;- (hrs_codebook %&gt;% filter(year == Year))$orig_itemname if(any(c(&quot;PN&quot;, &quot;HHID&quot;) %in% colnames(df)) &amp; any(old.names %in% colnames(df))){ # if(any(c(&quot;PN&quot;, &quot;HHID&quot;) %in% colnames(df))){ df &lt;- df %&gt;% mutate(hhidpn = 1000*as.numeric(HHID) + as.numeric(PN)) %&gt;% select(one_of(c(&quot;PN&quot;, &quot;HHID&quot;)), one_of(old.names)) %&gt;% distinct() # gather(key = item, value = value, -hhidpn) } else {df &lt;- NA} return(df) } # Set path to the data file &quot;*.DA&quot; files &lt;- list.files(sprintf(&quot;%s/data/hrs/%s&quot;, wd, year)) df2 &lt;- tibble( da = files[grepl(&quot;.da&quot;, files) | grepl(&quot;.DA&quot;, files)], dct = files[grepl(&quot;.dct&quot;, files) | grepl(&quot;.DCT&quot;, files)] ) %&gt;% mutate(data = map2(da, dct, possibly(~read_da(.x, .y, year), NA_real_))) %&gt;% filter(!is.na(data)) %&gt;% select(-da, -dct) if(nrow(df2) != 0){df2$data %&gt;% reduce(full_join) %&gt;% distinct()} else {NA} } hrs_codebook &lt;- (codebook %&gt;% filter(study == &quot;HRS&quot;))$codebook[[1]] %&gt;% mutate(orig_itemname = str_to_upper(orig_itemname)) %&gt;% mutate_at(vars(orig_itemname, name, itemname), ~str_remove_all(., &quot;[[:space:]]&quot;)) hrs_codebook ## # A tibble: 2,293 x 19 ## study dataset category name itemname wave waveletter year new_itemname orig_itemname ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 hrs &lt;NA&gt; match ageM… yearMar… 1 a 1992 hrs__match_… V241 ## 2 hrs &lt;NA&gt; match ageM… yearMar… 2 b 1993 hrs__match_… V156 ## 3 hrs &lt;NA&gt; match ageM… yearMar… 3 c 1994 hrs__match_… A3-V1 ## 4 hrs &lt;NA&gt; match ageM… yearMar… 4 d 1995 hrs__match_… D678 ## 5 hrs &lt;NA&gt; match ageM… yearMar… 5 e 1996 hrs__match_… E678 ## 6 hrs &lt;NA&gt; match ageM… yearMar… 6 f 1998 hrs__match_… F1073 ## 7 hrs &lt;NA&gt; match ageM… yearMar… 7 g 2000 hrs__match_… GB066_1 ## 8 hrs &lt;NA&gt; match ageM… yearMar… 8 h 2002 hrs__match_… HB066_1 ## 9 hrs &lt;NA&gt; match ageM… yearMar… 9 i 2004 hrs__match_… IB066_1 ## 10 hrs &lt;NA&gt; match ageM… yearMar… 10 j 2006 hrs__match_… JB066_1 ## # … with 2,283 more rows, and 9 more variables: description &lt;chr&gt;, scale &lt;chr&gt;, ## # reverse_code &lt;chr&gt;, recode &lt;chr&gt;, mini &lt;dbl&gt;, maxi &lt;dbl&gt;, comp_rule &lt;chr&gt;, ...18 &lt;lgl&gt;, ## # ...19 &lt;chr&gt; old.names &lt;- unique(hrs_codebook$orig_itemname) hrs.paq &lt;- tibble(year = sprintf(&quot;%s/data/hrs&quot;, wd) %&gt;% list.files(., pattern = &quot;^[0-9]&quot;)) %&gt;% mutate(data = map(year, hrs_read_fun), names = map(data, colnames)) %&gt;% filter(!is.na(data)) old.names &lt;- unique((hrs_codebook %&gt;% filter(dataset == &quot;Rand&quot;))$orig_itemname) hrs.rand &lt;- sprintf(&quot;%s/data/hrs/randhrs1992_2016v1.sav&quot;, wd) %&gt;% haven::read_sav(.) %&gt;% haven::zap_labels(.) %&gt;% select(SID = HHIDPN, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID, na.rm = T) hrs_long &lt;- hrs.paq %&gt;% mutate(data = map(data, ~(.) %&gt;% gather(key = orig_itemname, value = value, -HHID, -PN))) %&gt;% select(-names, -year) %&gt;% unnest(data) %&gt;% mutate(SID = 1000*as.numeric(HHID) + as.numeric(PN)) %&gt;% select(-PN, -HHID) hrs.subs &lt;- unique(hrs_long$SID)[unique(hrs_long$SID) %in% unique(hrs.rand$SID)] hrs_long &lt;- hrs_long %&gt;% bind_rows(hrs.rand %&gt;% select(orig_itemname, value, SID)) %&gt;% filter(SID %in% hrs.subs) save(hrs.rand, hrs.paq, file = sprintf(&quot;%s/data/clean/hrs_raw.RData&quot;, wd)) rm(list = c(&quot;hrs.paq&quot;, &quot;hrs.rand&quot;)) 2.6.2 Matching Variables hrs_waves &lt;- p_waves %&gt;% filter(Study == &quot;HRS&quot;) %&gt;% select(Used) %&gt;% distinct() # rename variables hrs_match &lt;- hrs_codebook %&gt;% filter(year &lt;= max(hrs_waves$Used)) %&gt;% filter(grepl(&quot;match&quot;, category)) %&gt;% select(name, itemname, wave, year, orig_itemname, reverse_code:comp_rule) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% left_join(hrs_long))) yrBrth &lt;- hrs_match %&gt;% filter(name == &quot;yearBrth&quot;) %&gt;% unnest(data) %&gt;% mutate(yearBrth = value) %&gt;% select(SID, yearBrth) # recode recode_fun &lt;- function(rule, y, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } hrs_match &lt;- hrs_match %&gt;% filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map(data, ~(.) %&gt;% left_join(yrBrth) %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(value &lt; 0 | is.nan(value) | is.infinite(value), NA, value)))) # reverse code hrs_match &lt;- hrs_match %&gt;% mutate(data = map(data, ~(.) %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))))) fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% # group by person and item (collapse across age) group_by(SID, yearBrth, name, year) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } hrs_match &lt;- hrs_match %&gt;% unnest(data) %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ hrs_match %&gt;% filter(year &lt;= p_year &amp; comp_rule == rule) %&gt;% group_by(SID, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% distinct() } hrs_match &lt;- crossing( p_year = hrs_waves$Used, comp_rule = unique(hrs_match$comp_rule) ) %&gt;% mutate(data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) %&gt;% select(-comp_rule) %&gt;% spread(name, value) %&gt;% filter(!is.na(SID)) 2.6.3 Personality Variables # keep correct personality waves hrs_pers &lt;- hrs_codebook %&gt;% mutate(reverse_code = tolower(reverse_code)) %&gt;% select(-new_itemname) %&gt;% filter(category == &quot;pers&quot;) %&gt;% left_join(hrs_long) %&gt;% mutate(year = mapvalues(year, seq(2006, 2016, 2), rep(c(2006, 2010, 2014), each = 2))) %&gt;% left_join(p_waves %&gt;% filter(Study == &quot;HRS&quot;) %&gt;% select(name = p_item, Used)) %&gt;% filter(year %in% Used) %&gt;% distinct() recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode hrs_pers &lt;- hrs_pers %&gt;% select(name, itemname, year, reverse_code:comp_rule, SID, Used, value) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code hrs_pers &lt;- hrs_pers %&gt;% distinct() %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) %&gt;% group_by(name, itemname, year, SID, comp_rule) %&gt;% summarize(value = mean(value, na.rm = T)) # alpha&#39;s hrs_alpha &lt;- hrs_pers %&gt;% filter(!is.na(value)) %&gt;% select(name, itemname, year, SID, value) %&gt;% group_by(name, year) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% distinct() %&gt;% pivot_wider(names_from = itemname, values_from = value, values_fn = list(mean))), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-SID)), NA_real_))) comp_fun &lt;- function(df, rule){ df %&gt;% group_by(SID) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } # create composites hrs_pers &lt;- hrs_pers %&gt;% group_by(name, comp_rule, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, comp_rule, comp_fun)) %&gt;% unnest() ## # A tibble: 314,336 x 5 ## name year comp_rule SID value ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 2006 average 3010 3 ## 2 A 2006 average 3020 3 ## 3 A 2006 average 10001010 4 ## 4 A 2006 average 10003030 3.4 ## 5 A 2006 average 10004010 3.4 ## 6 A 2006 average 10004040 3.6 ## 7 A 2006 average 10013010 2 ## 8 A 2006 average 10013040 2.6 ## 9 A 2006 average 10038010 3.4 ## 10 A 2006 average 10038040 2.6 ## # … with 314,326 more rows 2.6.4 Outcome Variables hrs_out &lt;- hrs_codebook %&gt;% select(-new_itemname) %&gt;% filter(category == &quot;out&quot; &amp; year != 0) %&gt;% left_join(hrs_long) %&gt;% distinct() %&gt;% full_join(crossing(p_year = hrs_waves$Used, name = unique((.)$name))) hrs_out_stp &lt;- hrs_codebook %&gt;% select(-new_itemname, -description, scale) %&gt;% filter(category == &quot;out&quot; &amp; year == 0) %&gt;% left_join(hrs_long) %&gt;% full_join(tibble(name = &quot;mortality&quot;, SID = unique(hrs_long$SID), recode = unique(.$recode))) %&gt;% full_join(crossing(p_year = hrs_waves$Used, name = unique((.)$name))) # recode recode_fun &lt;- function(rule, y, p_year){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } hrs_out &lt;- hrs_out %&gt;% select(name, itemname, year, reverse_code:comp_rule, value, SID, p_year) %&gt;% group_by(recode, p_year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) hrs_out_stp &lt;- hrs_out_stp %&gt;% select(name, itemname, reverse_code:comp_rule, value, SID, p_year) %&gt;% mutate(value = ifelse(value &gt; 2050 | value &lt; 0 | is.na(value), 0, value)) %&gt;% group_by(recode, p_year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) # composite within years # compositing within years hrs_out &lt;- hrs_out %&gt;% group_by(SID, name, year, p_year) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.nan(value) | is.infinite(value), NA, value)) # composite across years comp_fun &lt;- function(p_year){ hrs_out %&gt;% mutate(group = ifelse(year &gt; p_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, name, group) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) } hrs_out &lt;- tibble(p_year = hrs_waves$Used) %&gt;% mutate(data = map(p_year, comp_fun)) %&gt;% unnest(data) %&gt;% full_join(hrs_out_stp %&gt;% select(name, p_year, value, SID)) %&gt;% filter((!name %in% c(&quot;married&quot;, &quot;edu&quot;)) &amp; !is.na(SID)) ## # A tibble: 774,366 x 6 ## p_year SID name future past value ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2006 1010 divorced 1 1 NA ## 2 2006 1010 mntlhlthevnt 1 1 NA ## 3 2006 1010 physhlthevnt 1 1 NA ## 4 2006 1010 retired NA 0 0 ## 5 2006 1010 unemployed NA 0 0 ## 6 2006 2010 divorced 0 0 0 ## 7 2006 2010 mntlhlthevnt 1 1 NA ## 8 2006 2010 physhlthevnt 1 1 NA ## 9 2006 2010 retired 1 1 NA ## 10 2006 2010 unemployed 0 0 0 ## # … with 774,356 more rows 2.6.5 Covariates hrs_match &lt;- hrs_pers %&gt;% select(-comp_rule) %&gt;% spread(name, value) %&gt;% full_join(hrs_match %&gt;% rename(year = p_year)) %&gt;% # left_join(gsoep_bp %&gt;% select(-momID, -dadID)) %&gt;% # physical health event left_join(hrs_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(year = p_year, SID, physhlthevnt = past) %&gt;% distinct() %&gt;% group_by(SID, year) %&gt;% summarize(physhlthevnt = max(physhlthevnt)) %&gt;% ungroup()) %&gt;% distinct() hrs_match &lt;- hrs_match %&gt;% group_by(SID, year) %&gt;% mutate(age = year - yearBrth) %&gt;% ungroup() npb_fun &lt;- function(l, u){ lb &lt;- sort(c(l,u))[1] ub &lt;- sort(c(l,u))[2] mean((tibble(occ00 = seq(lb,ub), npb = mapvalues(occ00, npb$OCC00, npb$NPB, warn_missing = F)) %&gt;% mutate(npb = ifelse(npb &gt; 100, NA, npb)))$npb, na.rm = T)[1] } hrs_npb_groups &lt;- tribble( ~hrsCat, ~occ80l, ~occ80u, ~occ90l, ~occ90u, 1, 003, 037, 001, 037, 2, 043, 235, 043, 235, 3, 243, 285, 243, 274, 4, 303, 389, 303, 389, 5, 403, 407, 403, 407, 6, 413, 427, 417, 427, 7, 433, 444, 433, 444, 8, 445, 447, 445, 447, 9, 448, 469, 448, 469, 10, 473, 499, 473, 498, 11, 503, 549, 503, 542, 12, 553, 617, 553, 617, 13, 633, 699, 628, 699, 14, 703, 799, 703, 799, 15, 803, 859, 803, 859, 16, 863, 889, 863, 889, 17, 900, 900, 900, 900 ) %&gt;% mutate(occ00l = mapvalues(occ90l, occ90to00$OCC90, occ90to00$OCC00), occ00u = mapvalues(occ90u, occ90to00$OCC90, occ90to00$OCC00)) %&gt;% group_by(hrsCat) %&gt;% mutate(npb = npb_fun(occ00l, occ00u)) hrs_match &lt;- hrs_match %&gt;% select(SID, year, dadOcc) %&gt;% filter(!is.na(dadOcc)) %&gt;% mutate(dadOccPrstg = ifelse(dadOcc == 98, NA, dadOcc), dadOccPrstg = mapvalues(dadOccPrstg, hrs_npb_groups$hrsCat, hrs_npb_groups$npb)) %&gt;% select(-dadOcc, -year) %&gt;% full_join(hrs_match) hrs_out &lt;- hrs_out %&gt;% select(-past, -future) %&gt;% distinct() hrs_SCA &lt;- hrs_match %&gt;% select(SID, p_year = year, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% mutate_at(vars(parEdu), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% rename(parOccPrstg = dadOccPrstg) %&gt;% select(-momEdu, -dadEdu) unique(specifications$name)[!unique(specifications$name) %in% colnames(hrs_match2)] ## # A tibble: 128,334 x 20 ## SID p_year age education gender grsWages race physhlthevnt SRhealth smokes alcohol ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.01e7 1992 51 0 1 34932 2 1 2 1 NA ## 2 1.01e7 1996 55 0 1 24137. 2 1 2 1 0 ## 3 1.01e7 2006 65 0 1 20276. 2 1 1.75 1 0 ## 4 1.03e7 1996 63 0 0 31800 0 1 4 0 2 ## 5 1.03e7 1992 59 0 0 NA 0 1 NA NA NA ## 6 1.03e7 2006 73 0 0 70108. 0 1 3.8 0 1.8 ## 7 1.04e7 1992 54 0 1 139700 0 1 5 1 NA ## 8 1.04e7 1996 58 0 1 154033. 0 1 4.33 1 7 ## 9 1.04e7 2006 68 0 1 306668. 0 1 3.5 1 7 ## 10 1.04e7 1992 49 1 1 116000 0 1 4 1 NA ## # … with 128,324 more rows, and 9 more variables: exercise &lt;dbl&gt;, BMI &lt;dbl&gt;, married &lt;dbl&gt;, ## # numKids &lt;dbl&gt;, parDivorce &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, religion &lt;dbl&gt;, parOccPrstg &lt;dbl&gt;, ## # parEdu &lt;dbl&gt; 2.6.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2 &amp; length(unique(x)) &lt;= 4} else{F}} not_all_id &lt;- function(x) if(is.numeric(x)) sd(x, na.rm = T) != 0 sum_na &lt;- function(x) sum(is.na(x))/length(x)*100 mice_fun &lt;- function(df){ s &lt;- unique(hrs_pers$SID) df &lt;- df %&gt;% select(-ageMarried, -CurMarYears, -spouseEmployed, -weight, -numHospStays, -SRhealthChng) %&gt;% filter(SID %in% s) pos &lt;- apply(df, 1, sum_na) &lt; 60 df &lt;- df %&gt;% filter(pos) mice(df, m = 5, maxit=5, printFlag=TRUE, method = &quot;cart&quot;) } hrs_match_imp &lt;- hrs_match %&gt;% rename(NegAff = `NA`, parOccPrstg = dadOccPrstg) %&gt;% mutate_at(vars(eduMom, eduDad), ~ifelse(. &gt;= 17 &amp; !is.na(.), 2, ifelse(. &gt;= 15, 1, 0))) %&gt;% group_by(SID, year) %&gt;% mutate(momEdu = max(cbind(momEdu, eduMom), na.rm = T), dadEdu = max(cbind(dadEdu, eduDad), na.rm = T)) %&gt;% ungroup() %&gt;% select(-eduMom, -eduDad) %&gt;% mutate_all(~ifelse(is.infinite(.), NA, .)) %&gt;% filter(!is.na(year) &amp; !is.na(SID)) %&gt;% group_by(year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na) %&gt;% select_if(not_all_id)), data = map(data, ~(.) %&gt;% mutate_if(factor_fun, as.factor)), imp = map(data, mice_fun)) hrs_match_imp &lt;- hrs_match_imp %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% mutate_at(vars(exercise, PhysFunc), ~ifelse(as.numeric(as.character(.)) &gt; 0, 1, 0)) %&gt;% mutate(PhysFunc = factor(PhysFunc), satRetire = ifelse(is.factor(satRetire), as.numeric(as.character(satRetire)), satRetire))), imp_df = map(imp_df, ~(.) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% select(-momEdu, -dadEdu) %&gt;% ungroup()), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name))))) hrs_match_imp_long &lt;- hrs_match_imp %&gt;% select(p_year = year, imp_df) %&gt;% unnest(imp_df) %&gt;% mutate(alcohol = factor(ifelse(alcohol &gt; 0, 1, 0))) hrs_SCA_imp &lt;- hrs_match_imp %&gt;% select(p_year = year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% full_join(hrs_SCA %&gt;% select(p_year = year, SID)) %&gt;% distinct() %&gt;% mutate(alcohol = factor(ifelse(alcohol &gt; 0, 1, 0))) hrs_SCA_imp &lt;- hrs_SCA_imp %&gt;% filter(!is.na(alcohol)) %&gt;% select(SID, alcohol) %&gt;% distinct() %&gt;% full_join(hrs_SCA_imp %&gt;% select(-alcohol)) %&gt;% filter(!is.na(age)) unique(specifications$name)[!unique(specifications$name) %in% colnames(hrs_SCA_imp)] save(hrs_match_imp_long, hrs_SCA_imp, file = sprintf(&quot;%s/data/imputed/hrs_imputed_small.RData&quot;, wd)) save(hrs_match_imp, file = sprintf(&quot;%s/data/imputed/hrs_imputed.RData&quot;, wd)) save(hrs_alpha, hrs_pers, hrs_out, hrs_match, hrs_SCA, file = sprintf(&quot;%s/data/clean/hrs_cleaned.RData&quot;, wd)) save(hrs_long, file = sprintf(&quot;%s/data/clean/hrs_raw_long.RData&quot;, wd)) rm(list =ls()[grepl(&quot;hrs&quot;, ls())]) rm(list =ls()[grepl(&quot;hrs&quot;, ls())]) 2.7 LISS The Longitudinal Studies for the Social sciences (LISS; Scherpenzeel, Das, Ester, &amp; Kaczmirek, 2010) is an ongoing longitudinal study of households in the Netherlands. These data are online, through application, from https://statements.centerdata.nl/liss-panel-data-statement. Participants were approximately 8,000 Dutch-speaking individuals permanently residing in the Netherlands from 5,000 households. Data have been collected annually since 2007. The latest data release includes 11 waves of data from 2008 to 2018. More documentation are available at https://www.dataarchive.lissdata.nl/study_units/view/1. Sample sizes vary by year, ranging from 5,021 (2018) to 6808 (2008). This provides 99/% power to detect a correlation effect size of ~.04, two-tailed at alpha .05. 2.7.1 Load Data liss_read_fun &lt;- function(x){ sprintf(&quot;%s/data/liss/%s&quot;, wd, x) %&gt;% haven::read_sav(.) %&gt;% select(one_of(old.names)) } liss_codebook &lt;- (codebook %&gt;% filter(study == &quot;LISS&quot;))$codebook[[1]] liss_codebook ## # A tibble: 3,688 x 18 ## study dataset category name itemname wave wave_letter year new_itemname orig_itemname ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 liss avars_… match age YOB1 1 a 2008 &lt;NA&gt; gebjaar ## 2 liss avars_… match age YOB1 2 b 2009 &lt;NA&gt; gebjaar ## 3 liss avars_… match age YOB1 3 c 2010 &lt;NA&gt; gebjaar ## 4 liss avars_… match age YOB1 4 d 2011 &lt;NA&gt; gebjaar ## 5 liss avars_… match age YOB1 5 e 2012 &lt;NA&gt; gebjaar ## 6 liss avars_… match age YOB1 6 f 2013 &lt;NA&gt; gebjaar ## 7 liss avars_… match age YOB1 7 g 2014 &lt;NA&gt; gebjaar ## 8 liss avars_… match age YOB1 8 h 2015 &lt;NA&gt; gebjaar ## 9 liss avars_… match age YOB1 9 i 2016 &lt;NA&gt; gebjaar ## 10 liss avars_… match age YOB1 10 j 2017 &lt;NA&gt; gebjaar ## # … with 3,678 more rows, and 8 more variables: description &lt;chr&gt;, scale &lt;chr&gt;, ## # reverse_code &lt;chr&gt;, recode &lt;chr&gt;, mini &lt;dbl&gt;, maxi &lt;dbl&gt;, comp_rule &lt;chr&gt;, LHQ &lt;chr&gt; old.names &lt;- unique(liss_codebook$orig_itemname) %&gt;% str_to_lower datasets &lt;- sprintf(&quot;%s/data/liss&quot;, wd) %&gt;% list.files() liss &lt;- tibble(datasets = datasets) %&gt;% mutate(data = map(datasets, liss_read_fun)) liss &lt;- reduce(liss$data, full_join) %&gt;% haven::zap_labels(.) save(liss, file = sprintf(&quot;%s/data/clean/liss_raw.RData&quot;, wd)) avars &lt;- tibble(ds = datasets[grepl(&quot;avar&quot;, datasets)]) %&gt;% mutate(data = map(ds, ~sprintf(&quot;%s/data/liss/%s&quot;, wd, .) %&gt;% haven::read_sav(.) %&gt;% select(one_of(old.names)) %&gt;% haven::zap_labels(.))) %&gt;% separate(ds, c(&quot;ds&quot;, &quot;year&quot;, &quot;scrap1&quot;, &quot;scrap2&quot;), sep = &quot;_&quot;) %&gt;% separate(year, c(&quot;year&quot;, &quot;month&quot;), -2) %&gt;% select(year, month, data) %&gt;% unnest(data) 2.7.2 Matching Variables rename_fun &lt;- function(cb, var){ old.names &lt;- unique((liss_codebook %&gt;% filter(name == var))$orig_itemname) df &lt;- liss %&gt;% select(SID = nomem_encr, HHID = nohouse_encr, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID, -HHID, na.rm=T) if(length(old.names) &gt; 1){ df %&gt;% left_join(cb %&gt;% select(itemname, year, orig_itemname, reverse_code:comp_rule)) } else { df %&gt;% left_join(cb %&gt;% select(-(itemname:year), -new_itemname, -dataset) %&gt;% distinct()) %&gt;% mutate(year = 0) } } # rename variables liss_match &lt;- liss_codebook %&gt;% filter(category == &quot;match&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() # bring in year or birth for cleaning liss_match &lt;- liss_match %&gt;% filter(name != &quot;age&quot;) %&gt;% left_join( liss_match %&gt;% filter(name == &quot;age&quot;) %&gt;% mutate(yearBrth = value) %&gt;% select(SID, yearBrth) ) %&gt;% distinct() # recode recode_fun &lt;- function(rule, y, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } liss_match &lt;- liss_match %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) # reverse code liss_match &lt;- liss_match %&gt;% mutate(value = ifelse(tolower(reverse_code) == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% # group by person and item (collapse across age) group_by(SID, HHID, yearBrth, name, year) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } liss_waves &lt;- p_waves %&gt;% filter(Study == &quot;LISS&quot;) %&gt;% select(Used) %&gt;% distinct() liss_match &lt;- liss_match %&gt;% filter(year &lt;= max(liss_waves$Used) | name %in% c(&quot;dadEdu&quot;, &quot;momEdu&quot;, &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ liss_match %&gt;% filter(year &lt;= p_year &amp; comp_rule == rule | name %in% c(&quot;dadEdu&quot;, &quot;momEdu&quot;, &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;)) %&gt;% group_by(SID, HHID, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } liss_match &lt;- crossing( p_year = liss_waves$Used, comp_rule = unique(liss_match$comp_rule) ) %&gt;% mutate(data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) %&gt;% select(-comp_rule) %&gt;% pivot_wider(names_from = name, values_from = value, values_fn = list(value = max)) ## # A tibble: 27,382 x 62 ## SID HHID year A C DEP E IQ N `NA` O PA SE SS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 800033 583404 2008 3 2 NA 2.2 NA 3.5 3.3 3.29 4.2 5.38 2 ## 2 800042 500277 2008 3.5 4 2.67 3.2 NA 3 2.1 3.43 5.7 4.88 2.08 ## 3 800045 548654 2008 NA NA 1 NA NA NA NA NA NA NA NA ## 4 800057 580532 2008 2.83 2.67 1 4.2 NA 4.5 1.4 4.57 4.5 6.75 2 ## 5 800076 578048 2008 3.17 3.5 2.33 3 4 3 2.5 3.14 5.6 4.5 1.3 ## 6 800119 537783 2008 2.83 3.33 1.33 3.4 NA 3 NA 3.14 NA 5.75 NA ## 7 800125 582101 2008 4 4 4.33 2.4 NA 2 3.3 4.29 4.3 4.5 0 ## 8 800134 549826 2008 4.67 2.67 1.67 4.8 NA 4 1.8 3.43 5.4 5.62 NA ## 9 800155 545016 2008 NA NA NA NA NA NA NA NA NA NA 1.2 ## 10 800158 519049 2008 3.67 3.67 1 2.4 NA 4 1.3 3 3.2 5.5 2 ## # … with 27,372 more rows, and 48 more variables: SWL &lt;dbl&gt;, yearBrth &lt;dbl&gt;, HHsize &lt;dbl&gt;, ## # dadEdu &lt;dbl&gt;, dadOccPrstg &lt;dbl&gt;, momEdu &lt;dbl&gt;, momOccPrstg &lt;dbl&gt;, eatingHabits &lt;dbl&gt;, ## # loneliness &lt;dbl&gt;, physAct &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, satFnc &lt;dbl&gt;, satLeisure &lt;dbl&gt;, ## # satSchl &lt;dbl&gt;, satWgs &lt;dbl&gt;, SRhealth &lt;dbl&gt;, survAtt &lt;dbl&gt;, exercise &lt;dbl&gt;, ## # satFam &lt;dbl&gt;, satHH &lt;dbl&gt;, alcohol &lt;dbl&gt;, alcoholType &lt;dbl&gt;, disability &lt;dbl&gt;, ## # drugs &lt;dbl&gt;, drVisits &lt;dbl&gt;, employed &lt;dbl&gt;, ethnicity &lt;dbl&gt;, numSibling &lt;dbl&gt;, ## # religion &lt;dbl&gt;, smokes &lt;dbl&gt;, unempBen &lt;dbl&gt;, welfare &lt;dbl&gt;, gender &lt;dbl&gt;, urban &lt;dbl&gt;, ## # ageMarried &lt;dbl&gt;, married &lt;dbl&gt;, dadAlive &lt;dbl&gt;, diet &lt;dbl&gt;, height &lt;dbl&gt;, ## # momAlive &lt;dbl&gt;, parDivorce &lt;dbl&gt;, weight &lt;dbl&gt;, grsWages &lt;dbl&gt;, numKids &lt;dbl&gt;, ## # education &lt;dbl&gt;, physhlthevnt &lt;dbl&gt;, age &lt;dbl&gt;, BMI &lt;dbl&gt; 2.7.3 Personality Variables liss_pers &lt;- liss_codebook %&gt;% filter(category == &quot;pers&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% left_join(p_waves %&gt;% filter(Study == &quot;LISS&quot;) %&gt;% select(name = p_item, Used)) %&gt;% filter(year %in% Used) recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode liss_pers &lt;- liss_pers %&gt;% select(name:HHID, itemname, year, reverse_code:comp_rule, value) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code liss_pers &lt;- liss_pers %&gt;% mutate(value = ifelse(tolower(reverse_code) == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) # alpha&#39;s liss_alpha &lt;- liss_pers %&gt;% select(name, itemname, year, SID, value) %&gt;% group_by(name, year) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% pivot_wider(names_from = itemname, values_from = value)), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-SID)), NA_real_))) # create composites liss_pers &lt;- liss_pers %&gt;% group_by(SID, HHID, name, year) %&gt;% summarize(value = mean(value, na.rm = T)) 2.7.4 Outcome Variables rename_fun &lt;- function(cb, var){ old.names &lt;- unique((liss_codebook %&gt;% filter(name == var))$orig_itemname) df &lt;- liss %&gt;% select(SID = nomem_encr, HHID = nohouse_encr, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID, -HHID) %&gt;% left_join(cb %&gt;% select(itemname, year, orig_itemname, reverse_code:comp_rule)) } liss_out &lt;- liss_codebook %&gt;% filter(category == &quot;out&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% full_join(crossing(p_year = liss_waves$Used, name = unique((.)$name))) liss_out &lt;- avars %&gt;% select(year, itemname = month, SID = nomem_encr, divorced = burgstat, unemployed = belbezig) %&gt;% gather(key = name, value = value, divorced, unemployed) %&gt;% distinct() %&gt;% mutate(year = as.numeric(year), p_year = 2008) %&gt;% left_join(liss_codebook %&gt;% filter(name %in% c(&quot;divorced&quot;, &quot;unemployed&quot;)) %&gt;% select(name, recode, reverse_code, mini, maxi) %&gt;% distinct()) %&gt;% full_join(liss_out %&gt;% filter(!(orig_itemname %in% c(&quot;burgstat&quot;, &quot;belbezig&quot;)))) # recode recode_fun &lt;- function(rule, y, p_year){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } liss_out &lt;- liss_out %&gt;% select(year:maxi, p_year) %&gt;% # select(name:HHID, itemname, year, reverse_code:comp_rule, value, p_year) %&gt;% # filter(name %in% c(&quot;married&quot;, &quot;mvInPrtnr&quot;)) %&gt;% group_by(recode, p_year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) %&gt;% distinct() liss_waves &lt;- p_waves %&gt;% filter(Study == &quot;LISS&quot;) %&gt;% select(Used) %&gt;% distinct() liss_out &lt;- liss_out %&gt;% # filter(year &lt;= max(gsoep_waves$Used)) %&gt;% group_by(SID, name, year) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.nan(value)|is.infinite(value), NA, value)) # composite across years comp_fun &lt;- function(p_year){ liss_out %&gt;% mutate(group = ifelse(year &gt; p_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, name, group) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) } liss_out &lt;- tibble(p_year = liss_waves$Used) %&gt;% mutate(data = map(p_year, comp_fun)) %&gt;% unnest(data) 2.7.5 Covariates liss_match &lt;- liss_pers %&gt;% spread(name, value) %&gt;% full_join(liss_match %&gt;% rename(year = p_year)) %&gt;% # left_join(gsoep_bp %&gt;% select(-momID, -dadID)) %&gt;% # physical health event left_join(liss_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(year = p_year, SID, physhlthevnt = past) %&gt;% distinct() %&gt;% group_by(SID, year) %&gt;% summarize(physhlthevnt = max(physhlthevnt)) %&gt;% ungroup()) %&gt;% distinct() %&gt;% ungroup() liss_match &lt;- liss_match %&gt;% group_by(SID, HHID, year) %&gt;% mutate(age = year - yearBrth, BMI = weight / ((height/100)^2)) %&gt;% ungroup() liss_out &lt;- liss_out %&gt;% select(-past, -future) %&gt;% distinct() liss_SCA &lt;- liss_match %&gt;% select(SID = SID, p_year = year, race = ethnicity, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T), parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% mutate_at(vars(parEdu, parOccPrstg), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu, -momOccPrstg, -dadOccPrstg) unique(specifications$name)[!unique(specifications$name) %in% colnames(liss_match2)] 2.7.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2 &amp; length(unique(x)) &lt;= 4} else{F}} not_all_id &lt;- function(x) if(is.numeric(x)) sd(x, na.rm = T) != 0 mice_fun &lt;- function(df){ mice(df, m = 5, maxit=5, printFlag=TRUE, method = &quot;cart&quot;) } liss_match_imp &lt;- liss_match %&gt;% rename(NegAff = `NA`, race = ethnicity) %&gt;% group_by(SID, year) %&gt;% mutate(parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% select(-momOccPrstg, -dadOccPrstg, -HHID) %&gt;% ungroup() %&gt;% mutate_all(~ifelse(is.infinite(.), NA, .)) %&gt;% filter(!is.na(year) &amp; !is.na(SID)) %&gt;% group_by(year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na) %&gt;% select_if(not_all_id)), data = map(data, ~(.) %&gt;% mutate_if(factor_fun, as.factor)), imp = map(data, mice_fun)) beepr::beep(sound = 8) liss_match_imp &lt;- liss_match_imp %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% mutate(PhysFunc = factor(ceiling(PhysFunc)))), imp_df = map(imp_df, ~(.) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% select(-momEdu, -dadEdu) %&gt;% ungroup()), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name))))) liss_match_imp_long &lt;- liss_match_imp %&gt;% select(p_year = year, imp_df) %&gt;% unnest(imp_df) liss_SCA_imp &lt;- liss_match_imp %&gt;% select(p_year = year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% left_join(liss_SCA %&gt;% select(p_year=year, SID, colnames(liss_SCA)[!colnames(liss_SCA) %in% colnames(.)])) save(liss_match_imp_long, liss_SCA_imp, file = sprintf(&quot;%s/data/imputed/liss_imputed_small.RData&quot;, wd)) save(liss_match_imp, file = sprintf(&quot;%s/data/imputed/liss_imputed.RData&quot;, wd)) save(liss_alpha, liss_pers, liss_out, liss_match, avars, liss_SCA, file = sprintf(&quot;%s/data/clean/liss_cleaned.RData&quot;, wd)) rm(list =ls()[grepl(&quot;liss&quot;, ls())]) rm(list =ls()[grepl(&quot;liss&quot;, ls())]) 2.8 MIDUS The Midlife in the United States (MIDUS; Brim, Ryff, &amp; Kessler, 2004; Ryff et al., 2012, 2016) study is an ongoing longitudinal study of adults in the United States. These data are available at http://www.icpsr.umich.edu by making a free account. Participants included more than 10,000 individuals aged 25 or older from the United States. The present study uses data from MIDUS I, II, and III. MIDUS I was collected in 1995-1996. MIDUS II was the follow-up to MIDUS I and was collected from 2004-2006. MIDUS III was an additional follow-up conducted from 2013-2014. More information can be found at http://midus.wisc.edu/findings/Understanding_Data_Collection_in_MIDUS.pdf. Sample size varies by wave, with 7,108 (MIDUS I), 4,963 (MIDUS II), 3,294 (MIDUS III). This provides 99/% power to detect a zero-order correlation effect size of ~.06, two-tailed at alpha .05. 2.8.1 Load Data loadRData &lt;- function(fileName){ #loads an RData file, and returns it load(fileName) get(ls()[ls() != &quot;fileName&quot;]) } midus_read_fun &lt;- function(x){ sprintf(&quot;%s/data/midus/%s&quot;, wd, x) %&gt;% loadRData(.) %&gt;% select(one_of(old.names)) %&gt;% tbl_df } midus_codebook &lt;- (codebook %&gt;% filter(study == &quot;MIDUS&quot;))$codebook[[1]] midus_codebook ## # A tibble: 1,051 x 16 ## study dataset category name itemname wave year new_itemname orig_itemname description ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 midus M2P1 match achv… hghStnd… M2P1 2004 midus__matc… B1SE7FF Set very h… ## 2 midus M3P1 match achv… hghStnd… M3P1 2013 midus__matc… C1SE7FF Set very h… ## 3 midus M2P1 match achv… keepWrk… M2P1 2004 midus__matc… B1SE7L Keep worki… ## 4 midus M3P1 match achv… keepWrk… M3P1 2013 midus__matc… C1SE7L Keep worki… ## 5 midus M2P1 match achv… likeDiff M2P1 2004 midus__matc… B1SE7O I like to … ## 6 midus M3P1 match achv… likeDiff M3P1 2013 midus__matc… C1SE7O I like to … ## 7 midus M2P1 match achv… likeWrk M2P1 2004 midus__matc… B1SE7R I like har… ## 8 midus M3P1 match achv… likeWrk M3P1 2013 midus__matc… C1SE7R I like har… ## 9 midus M1P1 match age age M1P1 1994 midus__matc… A1PAGE_M2 M1 age com… ## 10 midus M2P1 match age age M2P1 2004 midus__matc… B1PAGE_M2 M1 age com… ## # … with 1,041 more rows, and 6 more variables: scale &lt;chr&gt;, reverse_code &lt;chr&gt;, ## # recode &lt;chr&gt;, mini &lt;dbl&gt;, maxi &lt;dbl&gt;, comp_rule &lt;chr&gt; old.names &lt;- unique(midus_codebook$orig_itemname) %&gt;% str_to_upper datasets &lt;- sprintf(&quot;%s/data/midus&quot;, wd) %&gt;% list.files(., pattern = &quot;.rda&quot;) midus &lt;- tibble(datasets = datasets) %&gt;% mutate(data = map(datasets, midus_read_fun), ncol = map_dbl(data, ncol)) %&gt;% filter(ncol != 0) midus &lt;- reduce(midus$data, full_join) %&gt;% haven::zap_labels(.) midus &lt;- midus %&gt;% mutate_if(is.factor, ~as.numeric(sub(&quot;^\\\\(0*([0-9]+)\\\\).+$&quot;, &quot;\\\\1&quot;, .))) save(midus, file = sprintf(&quot;%s/data/clean/midus_raw.RData&quot;, wd)) 2.8.2 Matching Variables rename_fun &lt;- function(cb, var){ old.names &lt;- unique((midus_codebook %&gt;% filter(name == var))$orig_itemname) df &lt;- midus %&gt;% select(SID = M2ID, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID) %&gt;% mutate(value = as.numeric(value)) if(length(old.names) &gt; 1){ df %&gt;% left_join(cb %&gt;% select(itemname, year, orig_itemname, reverse_code:comp_rule)) } else { df %&gt;% left_join(cb %&gt;% select(-(itemname:year), -new_itemname, -dataset) %&gt;% distinct()) %&gt;% mutate(year = 0) } } # rename variables midus_match &lt;- midus_codebook %&gt;% filter(category == &quot;match&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() # bring in year or birth for cleaning yrBrth &lt;- midus_match %&gt;% filter(name == &quot;age&quot;) %&gt;% mutate(yearBrth = year - value) %&gt;% group_by(SID) %&gt;% summarize(yearBrth = max(yearBrth, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(yearBrth = ifelse(is.infinite(yearBrth), NA, yearBrth)) # recode recode_fun &lt;- function(rule, y, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } midus_match &lt;- midus_match %&gt;% left_join(yrBrth) %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) # reverse code midus_match &lt;- midus_match %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% # group by person and item (collapse across age) group_by(SID, yearBrth, name, year) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } midus_waves &lt;- p_waves %&gt;% filter(Study == &quot;MIDUS&quot;) %&gt;% select(Used) %&gt;% distinct() midus_match &lt;- midus_match %&gt;% filter(year &lt;= max(midus_waves$Used)) %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule) | comp_rule == &quot;none&quot;, &quot;skip&quot;, comp_rule)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ midus_match %&gt;% filter(year &lt;= p_year &amp; comp_rule == rule) %&gt;% group_by(SID, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } midus_match &lt;- crossing( p_year = midus_waves$Used, comp_rule = unique(midus_match$comp_rule) ) %&gt;% mutate(data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) %&gt;% select(-comp_rule) %&gt;% pivot_wider(names_from = name, values_from = value, values_fn = list(value = max)) 2.8.3 Personality Variables midus_pers &lt;- midus_codebook %&gt;% filter(category == &quot;pers&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% left_join(p_waves %&gt;% filter(Study == &quot;MIDUS&quot;) %&gt;% select(name = p_item, Used)) %&gt;% filter(year %in% Used &amp; !is.na(value)) recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode midus_pers &lt;- midus_pers %&gt;% select(name, SID, itemname, year, reverse_code:comp_rule, value) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code midus_pers &lt;- midus_pers %&gt;% mutate(value = ifelse(tolower(reverse_code) == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) # alpha&#39;s midus_alpha &lt;- midus_pers %&gt;% select(name, itemname, year, SID, value) %&gt;% group_by(name, year) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% pivot_wider(names_from = itemname, values_from = value)), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-SID)), NA_real_))) # create composites midus_pers &lt;- midus_pers %&gt;% group_by(SID, name, year) %&gt;% summarize(value = mean(value, na.rm = T)) ## # A tibble: 118,712 x 4 ## # Groups: SID, name [78,545] ## SID name year value ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10001 A 1994 3 ## 2 10001 A 2004 2.6 ## 3 10001 C 1994 2.75 ## 4 10001 C 2004 3.25 ## 5 10001 E 1994 2.8 ## 6 10001 E 2004 2.8 ## 7 10001 LOC 1994 5.5 ## 8 10001 LOC 2004 4.75 ## 9 10001 N 1994 2 ## 10 10001 N 2004 2.25 ## # … with 118,702 more rows 2.8.4 Outcome Variables rename_fun &lt;- function(cb, var){ old.names &lt;- unique((midus_codebook %&gt;% filter(name == var))$orig_itemname) df &lt;- midus %&gt;% select(SID = M2ID, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID) %&gt;% left_join(cb %&gt;% select(itemname, year, orig_itemname, reverse_code:comp_rule)) } midus_out &lt;- midus_codebook %&gt;% filter(category == &quot;out&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% full_join(crossing(p_year = midus_waves$Used, name = unique((.)$name))) # recode recode_fun &lt;- function(rule, y, p_year, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } midus_out &lt;- midus_out %&gt;% select(name, SID, value:year, recode, p_year) %&gt;% left_join(yrBrth) %&gt;% group_by(recode, p_year, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year, year), recode_fun)) %&gt;% unnest(data) %&gt;% distinct() midus_out &lt;- midus_out %&gt;% filter(name != &quot;mvInPrtnr&quot;) %&gt;% select(-recode) %&gt;% full_join( midus_out %&gt;% filter(name %in% c(&quot;mvInPrtnr&quot;, &quot;married&quot;)) %&gt;% group_by(p_year, name, SID, year) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.nan(value)|is.infinite(value), NA, value)) %&gt;% spread(name, value) %&gt;% mutate(name = &quot;mvInPrtnr&quot;, value = ifelse((married == 0 | is.na(married)) &amp; mvInPrtnr == 1 &amp; !is.na(mvInPrtnr), 1, 0)) %&gt;% select(-married, -mvInPrtnr) ) midus_waves &lt;- p_waves %&gt;% filter(Study == &quot;MIDUS&quot;) %&gt;% select(Used) %&gt;% distinct() midus_out &lt;- midus_out %&gt;% # filter(year &lt;= max(gsoep_waves$Used)) %&gt;% group_by(SID, name, year) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.nan(value)|is.infinite(value), NA, value)) # composite across years comp_fun &lt;- function(p_year){ midus_out %&gt;% mutate(group = ifelse(year &gt; p_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, name, group) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) } midus_out &lt;- tibble(p_year = midus_waves$Used) %&gt;% mutate(data = map(p_year, comp_fun)) %&gt;% unnest(data) ## # A tibble: 202,405 x 4 ## p_year SID name value ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1994 10001 chldbrth NA ## 2 1994 10001 crim 0 ## 3 1994 10001 divorced NA ## 4 1994 10001 edu NA ## 5 1994 10001 frstjob NA ## 6 1994 10001 married NA ## 7 1994 10001 mntlhlthevnt NA ## 8 1994 10001 mortality 0 ## 9 1994 10001 mvInPrtnr 0 ## 10 1994 10001 physhlthevnt 1 ## # … with 202,395 more rows 2.8.5 Covariates midus_match &lt;- midus_pers %&gt;% spread(name, value) %&gt;% full_join(midus_match %&gt;% rename(year = p_year)) %&gt;% # physical health event left_join(midus_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(year = p_year, SID, physhlthevnt = past) %&gt;% distinct() %&gt;% group_by(SID, year) %&gt;% summarize(physhlthevnt = max(physhlthevnt)) %&gt;% ungroup()) %&gt;% distinct() %&gt;% ungroup() midus_out &lt;- midus_out %&gt;% select(-past, -future) %&gt;% distinct() midus_SCA &lt;- midus_match %&gt;% select(SID, p_year = year, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T), parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% mutate_at(vars(parEdu, parOccPrstg), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu, -momOccPrstg, -dadOccPrstg) unique(specifications$name)[!unique(specifications$name) %in% colnames(midus_match)] ## # A tibble: 15,184 x 20 ## SID p_year age education gender grsWages race physhlthevnt SRhealth smokes alcohol ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10001 1994 53 1 0 300000 0 0 7 1 1 ## 2 10001 2004 53 1 0 300000 0 1 7 1 1 ## 3 10002 1994 60 2 0 NA NA 0 NA NA 1 ## 4 10002 2004 60 2 0 235500 NA 1 8 NA 1 ## 5 10004 1994 69 2 0 54000 0 0 7 1 0 ## 6 10005 1994 70 0 1 27500 0 1 9 0 0 ## 7 10005 2004 70 0 1 13750 0 1 8.5 0 0 ## 8 10006 1994 51 1 1 34000 0 1 8 0 0 ## 9 10006 2004 51 1 1 34000 0 1 8 1 0 ## 10 10007 1994 35 0 1 46500 1 0 7 1 0 ## # … with 15,174 more rows, and 9 more variables: exercise &lt;dbl&gt;, BMI &lt;dbl&gt;, married &lt;dbl&gt;, ## # numKids &lt;dbl&gt;, parDivorce &lt;dbl&gt;, PhysFunc &lt;fct&gt;, religion &lt;dbl&gt;, parEdu &lt;dbl&gt;, ## # parOccPrstg &lt;dbl&gt; 2.8.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2 &amp; length(unique(x)) &lt;= 4} else{F}} not_all_id &lt;- function(x) if(is.numeric(x)) sd(x, na.rm = T) != 0 mice_fun &lt;- function(df){ mice(df, m = 5, maxit=5, printFlag=TRUE) } midus_match_imp &lt;- midus_match %&gt;% rename(NegAff = `NA`) %&gt;% group_by(SID, year) %&gt;% mutate(parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% select(-momOccPrstg, -dadOccPrstg) %&gt;% ungroup() %&gt;% mutate_all(~ifelse(is.infinite(.), NA, .)) %&gt;% filter(!is.na(year) &amp; !is.na(SID)) %&gt;% group_by(year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na) %&gt;% select_if(not_all_id)), data = map(data, ~(.) %&gt;% mutate_if(factor_fun, as.factor)), imp = map(data, mice_fun)) beepr::beep(sound = 8) midus_match_imp &lt;- midus_match_imp %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% mutate(PhysFunc = factor(ifelse(PhysFunc &lt; 2, 1, 0)))), imp_df = map(imp_df, ~(.) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% select(-momEdu, -dadEdu) %&gt;% ungroup()), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name))))) midus_match_imp_long &lt;- midus_match_imp %&gt;% select(p_year = year, imp_df) %&gt;% unnest(imp_df) midus_SCA_imp &lt;- midus_match_imp %&gt;% select(p_year = year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% left_join(midus_SCA %&gt;% select(p_year, SID, colnames(midus_SCA)[!colnames(midus_SCA) %in% colnames(.)])) unique(specifications$name)[!unique(specifications$name) %in% colnames(midus_SCA_imp)] save(midus_match_imp_long, midus_SCA_imp, file = sprintf(&quot;%s/data/imputed/midus_imputed_small.RData&quot;, wd)) save(midus_match_imp, file = sprintf(&quot;%s/data/imputed/midus_imputed.RData&quot;, wd)) save(midus_alpha, midus_pers, midus_out, midus_match, midus_SCA, file = sprintf(&quot;%s/data/clean/midus_cleaned.RData&quot;, wd)) rm(list =ls()[grepl(&quot;midus&quot;, ls())]) rm(list =ls()[grepl(&quot;midus&quot;, ls())]) 2.9 NLSY The Children to Young Adults Study (CNLSY; Bureau of Labor Statistics, 2017) is an offshoot study of the National Longitudinal Study of Youth (NLSY79), which is an ongoing longitudinal, nationally representative study in the United States. These data are available on the National Bureau of Labour Statistics website dedicated to the NLSY studies by creating a free account (https://www.nlsinfo.org/investigator/pages/login). Participants included more than 12,500 individuals in the United States that began in 1979. The CNLSY includes the biological children of the NLSY79 participants and began in 1986. Children (10 years and older) completed separate inventories from children (or “young adults”) aged 15 and above. Mothers of children 10 and below also completed surveys on the children prior to age 10. All participants were interviewed in addition to surveys. Sample sizes vary by year, ranging from approximately 1,331 (1979) to 11,530 (2016). This provides 99/% power to detect a zero-order correlation effect size of ~.05. 2.9.1 Load Data (cnlsy_codebook &lt;- (codebook %&gt;% filter(study == &quot;CNLSY&quot;))$codebook[[1]]) ## # A tibble: 5,339 x 21 ## study dataset category name itemname year new_itemname orig_itemname QNAME description ## &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 nlsy NA match acti… Activit… 2002 nlsy__match… Y1263100 Q4-3… DOES R BEL… ## 2 nlsy NA match acti… Activit… 2004 nlsy__match… Y1496800 Q4-3… DOES R BEL… ## 3 nlsy NA match acti… Activit… 2006 nlsy__match… Y1746700 Q4-3… DOES R BEL… ## 4 nlsy NA match acti… Activit… 2008 nlsy__match… Y2027500 Q4-3… DOES R BEL… ## 5 nlsy NA match acti… Activit… 2010 nlsy__match… Y2352600 Q4-3… DOES R BEL… ## 6 nlsy NA match acti… Activit… 2012 nlsy__match… Y2682100 Q4-3… DOES R BEL… ## 7 nlsy NA match acti… Activit… 2014 nlsy__match… Y3037500 Q4-3… DOES R BEL… ## 8 nlsy NA match acti… Outside… 2002 nlsy__match… Y1263200 Q4-3… DOES R BEL… ## 9 nlsy NA match acti… Outside… 2004 nlsy__match… Y1496900 Q4-3… DOES R BEL… ## 10 nlsy NA match acti… Outside… 2006 nlsy__match… Y1746800 Q4-3… DOES R BEL… ## # … with 5,329 more rows, and 11 more variables: scale &lt;chr&gt;, reverse_code &lt;chr&gt;, ## # recode &lt;chr&gt;, mini &lt;dbl&gt;, maxi &lt;dbl&gt;, comp_rule &lt;chr&gt;, item_rule &lt;chr&gt;, Include &lt;lgl&gt;, ## # ...19 &lt;lgl&gt;, ...20 &lt;lgl&gt;, ...21 &lt;lgl&gt; (nlsy_codebook &lt;- (codebook %&gt;% filter(study == &quot;NLSY&quot;))$codebook[[1]]) ## # A tibble: 88 x 18 ## study dataset category name itemname year new_itemname orig_itemname QNAME description ## &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 nlsy NA match momO… momOcc 1982 &lt;NA&gt; R0828000 CPSO… OCCUPATION… ## 2 nlsy NA match momO… momOcc 1983 &lt;NA&gt; R0945300 CPSO… OCCUPATION… ## 3 nlsy NA match momO… momOcc 1984 &lt;NA&gt; R1255700 CPSO… OCCUPATION… ## 4 nlsy NA match momO… momOcc 1985 &lt;NA&gt; R1650500 CPSO… OCCUPATION… ## 5 nlsy NA match momO… momOcc 1986 &lt;NA&gt; R1923100 CPSO… OCCUPATION… ## 6 nlsy NA match momO… momOcc 1987 &lt;NA&gt; R2317900 CPSO… OCCUPATION… ## 7 nlsy NA match momO… momOcc 1988 &lt;NA&gt; R2525700 CPSO… OCCUPATION… ## 8 nlsy NA match momO… momOcc 1989 &lt;NA&gt; R2924700 CPSO… OCCUPATION… ## 9 nlsy NA match momO… momOcc 1990 &lt;NA&gt; R3127400 CPSO… OCCUPATION… ## 10 nlsy NA match momO… momOcc 1991 &lt;NA&gt; R3523100 CPSO… OCCUPATION… ## # … with 78 more rows, and 8 more variables: scale &lt;chr&gt;, reverse_code &lt;chr&gt;, recode &lt;chr&gt;, ## # mini &lt;lgl&gt;, maxi &lt;lgl&gt;, comp_rule &lt;chr&gt;, item_rule &lt;chr&gt;, Include &lt;lgl&gt; # CNLSY codebook cnlsy_codebook %&gt;% select(QNAME, year) %&gt;% write_delim(path = sprintf(&quot;%s/codebooks/meta.CHILDYA&quot;, wd), delim = &quot;,&quot;, col_names = F) # NLSY codebook nlsy_codebook %&gt;% select(orig_itemname) %&gt;% write_delim(path = sprintf(&quot;%s/codebooks/meta.NLSY79&quot;, wd), delim = &quot;,&quot;, col_names = F) cnlsy_codebook &lt;- cnlsy_codebook %&gt;% full_join(nlsy_codebook) nlsy &lt;- sprintf(&quot;%s/data/nlsy/cnlsy.csv&quot;, wd) %&gt;% read_csv mnlsy &lt;- sprintf(&quot;%s/data/nlsy/nlsy79.csv&quot;, wd) %&gt;% read_csv nlsy &lt;- nlsy %&gt;% left_join(mnlsy %&gt;% rename(C0000200 = R0000100)) rm(mnlsy) 2.9.2 Matching Variables rename_fun &lt;- function(cb, var){ old.names &lt;- unique((cnlsy_codebook %&gt;% filter(name == var))$orig_itemname) df &lt;- nlsy %&gt;% select(SID = C0000100, yearBrth = C0005700, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -yearBrth, -SID, na.rm=T) if(length(old.names) &gt; 1){ df %&gt;% left_join(cb %&gt;% select(itemname, year, orig_itemname, reverse_code:item_rule)) } else { df %&gt;% left_join(cb %&gt;% select(-(itemname:year), -new_itemname, -dataset) %&gt;% distinct()) %&gt;% mutate(year = &quot;0&quot;) } } # rename variables nlsy_match &lt;- cnlsy_codebook %&gt;% filter(category == &quot;match&quot; &amp; year != &quot;XRND&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() # single time point variables old.names &lt;- (cnlsy_codebook %&gt;% filter(category == &quot;match&quot; &amp; year == &quot;XRND&quot;))$orig_itemname nlsy_match_stp &lt;- nlsy %&gt;% select(SID = C0000100, yearBrth = C0005700, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID, -yearBrth, na.rm=T) %&gt;% left_join(cnlsy_codebook %&gt;% select(name:year, orig_itemname, recode, comp_rule, item_rule)) # recode recode_fun &lt;- function(rule, y, p_year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } nlsy_match &lt;- nlsy_match %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) nlsy_waves &lt;- p_waves %&gt;% filter(Study == &quot;NLSY&quot;) %&gt;% select(Used) %&gt;% distinct() nlsy_match_stp &lt;- nlsy_match_stp %&gt;% full_join(crossing(p_year = nlsy_waves$Used, year = &quot;XRND&quot;)) %&gt;% group_by(recode, p_year, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) # reverse code nlsy_match &lt;- nlsy_match %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) occ_recode_fun &lt;- function(year, df){ if(year == 2000){df %&gt;% mutate(value = mapvalues(value, npb$OCC00, npb$NPB))} else if(year == 1990){ df %&gt;% mutate(value = mapvalues(value, occ90to00$OCC90, occ90to00$OCC00), value = mapvalues(value, npb$OCC00, npb$NPB), value = ifelse(value &gt; 100, NA, value)) } else{ df %&gt;% mutate(value = mapvalues(value, occ70to90$OCC70, occ70to90$OCC90), value = mapvalues(value, occ90to00$OCC90, occ90to00$OCC00), value = mapvalues(value, npb$OCC00, npb$NPB), value = ifelse(value &gt; 100, NA, value)) } } nlsy_match_occ &lt;- nlsy_match %&gt;% filter(grepl(&quot;Occ&quot;, name)) %&gt;% filter(!is.na(value) &amp; year &gt;= 1984) %&gt;% mutate(group = ifelse(year &lt; 2000, 1970, ifelse(year &gt;= 2002, 2000, 1990))) %&gt;% group_by(group) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(group, data, occ_recode_fun)) %&gt;% unnest(data) %&gt;% mutate(name = paste(name, &quot;Prstg&quot;, sep = &quot;&quot;)) %&gt;% select(-group) fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T), multiply = prod(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% # group by person and item (collapse across age) group_by(SID, yearBrth, name, year) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } nlsy_match &lt;- nlsy_match %&gt;% filter(year &lt;= max(nlsy_waves$Used) &amp; !grepl(&quot;Occ&quot;, name)) %&gt;% full_join(nlsy_match_occ) %&gt;% group_by(comp_rule, item_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(item_rule = ifelse(is.na(item_rule), &quot;skip&quot;, item_rule), data = map2(data, item_rule, year_comp_fun)) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ nlsy_match %&gt;% filter(year &lt;= p_year &amp; comp_rule == rule) %&gt;% full_join( nlsy_match_stp %&gt;% select(SID, yearBrth, p_year, name, value, comp_rule) %&gt;% filter(comp_rule == rule &amp; p_year == p_year) ) %&gt;% group_by(SID, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } nlsy_match &lt;- crossing( p_year = nlsy_waves$Used, comp_rule = unique(nlsy_match$comp_rule) ) %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule), data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) %&gt;% select(-comp_rule) %&gt;% pivot_wider(names_from = name, values_from = value, values_fn = list(value = max)) ## # A tibble: 34,590 x 120 ## # Groups: SID [11,530] ## SID dadEdu momEdu yearBrth year A C DEP E IQ LOC N O SE ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 201 NA 1 1993 2000 NA NA NA NA 17.6 NA NA NA NA ## 2 201 NA 1 1993 2006 NA NA NA NA NA NA NA NA NA ## 3 201 NA 1 1993 2008 NA NA NA NA NA NA NA NA NA ## 4 202 NA 1 1994 2000 NA NA NA NA 16.3 NA NA NA NA ## 5 202 NA 1 1994 2006 NA NA NA NA NA NA NA NA NA ## 6 202 NA 1 1994 2008 NA NA NA NA NA NA NA NA NA ## 7 301 NA 1 1981 2008 2 3.5 0.571 2.5 NA 1.14 0.5 3.5 1.7 ## 8 301 NA 1 1981 2000 NA NA NA NA NA NA NA NA NA ## 9 301 NA 1 1981 2006 NA NA NA NA NA NA NA NA NA ## 10 302 NA 1 1983 2000 NA NA NA NA NA NA NA NA NA ## # … with 34,580 more rows, and 106 more variables: SS &lt;dbl&gt;, activity &lt;dbl&gt;, ## # AgeBegDate &lt;dbl&gt;, batheSelf &lt;dbl&gt;, childhoodSS &lt;dbl&gt;, chores &lt;dbl&gt;, compliance &lt;dbl&gt;, ## # difficulty &lt;dbl&gt;, discipline &lt;dbl&gt;, fearfulness &lt;dbl&gt;, foodChoice &lt;dbl&gt;, FreqSmk &lt;dbl&gt;, ## # genRoles &lt;dbl&gt;, grsWages &lt;dbl&gt;, hsGrades &lt;dbl&gt;, Impls &lt;dbl&gt;, insecureAttach &lt;dbl&gt;, ## # manageTIme &lt;dbl&gt;, nbhdQual &lt;dbl&gt;, parAffection &lt;dbl&gt;, parLimitations &lt;dbl&gt;, ## # parTalkTV &lt;dbl&gt;, peerPressure &lt;dbl&gt;, positiveAffect &lt;dbl&gt;, praisedByPar &lt;dbl&gt;, ## # reads &lt;dbl&gt;, relDad &lt;dbl&gt;, relMom &lt;dbl&gt;, RelProb &lt;dbl&gt;, relSat &lt;dbl&gt;, satJob &lt;dbl&gt;, ## # satSchl &lt;dbl&gt;, SensSeek &lt;dbl&gt;, SRhealth &lt;dbl&gt;, timeHW &lt;dbl&gt;, timeWOthrs &lt;dbl&gt;, ## # TVtime &lt;dbl&gt;, ADHD &lt;dbl&gt;, alcohol &lt;dbl&gt;, behProb &lt;dbl&gt;, BPI &lt;dbl&gt;, crprlPunish &lt;dbl&gt;, ## # dadAlive &lt;dbl&gt;, dropOutSchl &lt;dbl&gt;, drugs &lt;dbl&gt;, dyslexia &lt;dbl&gt;, edu &lt;dbl&gt;, ## # education &lt;dbl&gt;, employed &lt;dbl&gt;, familyProb &lt;dbl&gt;, height &lt;dbl&gt;, hlthcare &lt;dbl&gt;, ## # hlthProbs &lt;dbl&gt;, Jail &lt;dbl&gt;, learnDis &lt;dbl&gt;, learningDis &lt;dbl&gt;, married &lt;dbl&gt;, ## # momAge &lt;dbl&gt;, momAlcPreg &lt;dbl&gt;, momAlive &lt;dbl&gt;, momCocPreg &lt;dbl&gt;, momOccPrstg &lt;dbl&gt;, ## # momRedAlcPreg &lt;dbl&gt;, momRedCalPreg &lt;dbl&gt;, momRedSaltPreg &lt;dbl&gt;, momRedSmkPreg &lt;dbl&gt;, ## # momSmkPreg &lt;dbl&gt;, momVitPreg &lt;dbl&gt;, momWeedPreg &lt;dbl&gt;, musicInst &lt;dbl&gt;, ## # nightmares &lt;dbl&gt;, numKids &lt;dbl&gt;, numSiblng &lt;dbl&gt;, parDivorce &lt;dbl&gt;, physAct &lt;dbl&gt;, ## # probation &lt;dbl&gt;, race &lt;dbl&gt;, religion &lt;dbl&gt;, remedialClass &lt;dbl&gt;, seeDad &lt;dbl&gt;, ## # shynessProb &lt;dbl&gt;, sleepProb &lt;dbl&gt;, smokes &lt;dbl&gt;, unempEen &lt;dbl&gt;, weight &lt;dbl&gt;, ## # welfare &lt;dbl&gt;, dadOccPrstg &lt;dbl&gt;, HHsize &lt;dbl&gt;, liveDad &lt;dbl&gt;, ParEngmnt &lt;dbl&gt;, ## # privateSchl &lt;dbl&gt;, urban &lt;dbl&gt;, readingMat &lt;dbl&gt;, tantrums &lt;dbl&gt;, ageMarried &lt;dbl&gt;, ## # bornLate &lt;dbl&gt;, durBreastFed &lt;dbl&gt;, gender &lt;dbl&gt;, dscplnFreq &lt;dbl&gt;, eatingHabits &lt;dbl&gt;, ## # … 2.9.3 Personality Variables nlsy_pers &lt;- cnlsy_codebook %&gt;% filter(category == &quot;pers&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% left_join(p_waves %&gt;% filter(Study == &quot;NLSY&quot;) %&gt;% select(name = p_item, Used)) %&gt;% filter(year %in% Used) recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode nlsy_pers &lt;- nlsy_pers %&gt;% select(-orig_itemname) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code nlsy_pers &lt;- nlsy_pers %&gt;% mutate(value = ifelse(tolower(reverse_code) == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) # alpha&#39;s nlsy_alpha &lt;- nlsy_pers %&gt;% select(name, itemname, year, SID, value) %&gt;% group_by(name, year) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% pivot_wider(names_from = itemname, values_from = value)), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-SID)), NA_real_))) # create composites nlsy_pers &lt;- nlsy_pers %&gt;% filter(!is.na(value)) %&gt;% group_by(SID, yearBrth, name, year) %&gt;% summarize(value = mean(value, na.rm = T)) ## # A tibble: 77,697 x 5 ## # Groups: SID, yearBrth, name [63,435] ## SID yearBrth name year value ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 201 1993 IQ 2000 17.6 ## 2 202 1994 IQ 2000 16.3 ## 3 301 1981 A 2008 2 ## 4 301 1981 C 2008 3.5 ## 5 301 1981 DEP 2008 0.571 ## 6 301 1981 E 2008 2.5 ## 7 301 1981 LOC 2008 1.14 ## 8 301 1981 N 2008 0.5 ## 9 301 1981 O 2008 3.5 ## 10 301 1981 SE 2008 1.7 ## # … with 77,687 more rows 2.9.4 Outcome Variables nlsy_out &lt;- cnlsy_codebook %&gt;% filter(category == &quot;out&quot; &amp; year != &quot;XRND&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% full_join(crossing(p_year = nlsy_waves$Used, name = unique((.)$name))) old.names &lt;- (cnlsy_codebook %&gt;% filter(category == &quot;out&quot; &amp; year == &quot;XRND&quot;))$orig_itemname nlsy_out_stp &lt;- nlsy %&gt;% select(SID = C0000100, yearBrth = C0005700, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID, -yearBrth, na.rm=T) %&gt;% left_join(cnlsy_codebook %&gt;% filter(category == &quot;out&quot;) %&gt;% select(name:year, orig_itemname, recode, comp_rule, item_rule)) # recode recode_fun &lt;- function(rule, y, p_year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # coding unemployment jobs &lt;- nlsy_out %&gt;% filter(name == &quot;unemployed&quot; &amp; (grepl(&quot;start&quot;, itemname) | grepl(&quot;end&quot;, itemname))) %&gt;% select(name, SID, value, itemname, year, p_year) %&gt;% mutate(value = ifelse(is.na(value) | value &lt; 0, NA, value), timing = ifelse(grepl(&quot;start&quot;, itemname), &quot;start&quot;, &quot;end&quot;), itemname = str_remove(itemname, &quot;start&quot;), itemname = str_remove(itemname, &quot;end&quot;)) %&gt;% filter(!is.na(value)) %&gt;% separate(itemname, c(&quot;time&quot;, &quot;job&quot;), -1) %&gt;% spread(time, value) %&gt;% mutate(centMnth = (Year - 1950)*12 + Month) %&gt;% select(-Year, -Month) %&gt;% spread(timing, centMnth) %&gt;% group_by(SID, year, p_year) %&gt;% mutate(lead_end = lead(end), gap = start-lead_end) %&gt;% group_by(name, SID, year, p_year, job) %&gt;% summarize(value = ifelse(gap &gt; 1, 1, 0)) %&gt;% group_by(name, SID, year, p_year) %&gt;% summarize(value = max(value, na.rm = T)) nlsy_out &lt;- nlsy_out %&gt;% filter(!(name == &quot;unemployed&quot; &amp; (grepl(&quot;start&quot;, itemname) | grepl(&quot;end&quot;, itemname)))) %&gt;% select(-orig_itemname) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) %&gt;% distinct() nlsy_waves &lt;- p_waves %&gt;% filter(Study == &quot;NLSY&quot;) %&gt;% select(Used) %&gt;% distinct() nlsy_out_stp &lt;- nlsy_out_stp %&gt;% full_join(crossing(p_year = nlsy_waves$Used, year = &quot;XRND&quot;)) %&gt;% group_by(recode, p_year, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(recode = str_replace(recode, &quot;if\\\\(p_years&quot;, &quot;ifelse\\\\(p_year&quot;), data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) %&gt;% select(p_year, SID, name, value) nlsy_out_stp &lt;- nlsy_out_stp %&gt;% filter(name == &quot;education&quot;) %&gt;% mutate(name = &quot;edu&quot;) %&gt;% group_by(name, p_year, SID) %&gt;% summarize(value = max(value, na.rm = T))%&gt;% ungroup() %&gt;% full_join(nlsy_out_stp %&gt;% filter(name != &quot;education&quot;)) # composite within years nlsy_out &lt;- nlsy_out %&gt;% select(name:year) %&gt;% # filter(year &lt;= max(gsoep_waves$Used)) %&gt;% group_by(SID, name, year, yearBrth) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.nan(value)|is.infinite(value), NA, value)) # composite across years comp_fun &lt;- function(P_year){ nlsy_out %&gt;% left_join(jobs %&gt;% filter(p_year == P_year) %&gt;% select(-p_year)) %&gt;% mutate(group = ifelse(year &gt; P_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, name, group) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) } nlsy_out &lt;- tibble(p_year = nlsy_waves$Used) %&gt;% mutate(data = map(p_year, comp_fun)) %&gt;% unnest(data) %&gt;% full_join(nlsy_out_stp) ## # A tibble: 553,440 x 6 ## p_year SID name future past value ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2006 201 chldbrth NA NA NA ## 2 2006 201 chldmvout NA NA NA ## 3 2006 201 crim 0 NA 0 ## 4 2006 201 divorced NA NA NA ## 5 2006 201 frstjob NA NA NA ## 6 2006 201 mntlhlthevnt NA NA NA ## 7 2006 201 mortality 0 0 0 ## 8 2006 201 physhlthevnt NA NA NA ## 9 2006 201 separated NA NA NA ## 10 2006 201 unemployed NA NA NA ## # … with 553,430 more rows 2.9.5 Covariates nlsy_match &lt;- nlsy_pers %&gt;% ungroup() %&gt;% mutate(year = as.numeric(year)) %&gt;% spread(name, value) %&gt;% full_join(nlsy_match %&gt;% rename(year = p_year)) %&gt;% # physical health event left_join(nlsy_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(year = p_year, SID, physhlthevnt = past) %&gt;% distinct() %&gt;% group_by(SID, year) %&gt;% summarize(physhlthevnt = max(physhlthevnt)) %&gt;% ungroup()) %&gt;% distinct() # age nlsy_match &lt;- nlsy_match %&gt;% mutate(age = year - yearBrth, BMI = weight/ (height/100)^2) nlsy_match &lt;- nlsy_match %&gt;% group_by(year) %&gt;% mutate_at(vars(education, numKids, married, smokes, alcohol), ~ifelse(is.na(.) &amp; age &lt; 19, 0, .)) nlsy_match &lt;- nlsy_match %&gt;% ungroup() %&gt;% select(SID, dadEdu, momEdu) %&gt;% distinct() %&gt;% gather(item,value, na.rm = T, -SID) %&gt;% group_by(SID, item) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% spread(item,value) %&gt;% full_join(nlsy_match %&gt;% select(-momEdu, -dadEdu)) nlsy_out &lt;- nlsy_out %&gt;% select(-past, -future) %&gt;% distinct() nlsy_SCA &lt;- nlsy_match %&gt;% rename(PhysFunc = physAct) %&gt;% select(SID, p_year = year, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T), parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% mutate_at(vars(parEdu, parOccPrstg), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu, -momOccPrstg, -dadOccPrstg) unique(specifications$name)[!unique(specifications$name) %in% colnames(nlsy_match)] ## # A tibble: 34,590 x 20 ## SID p_year age education gender grsWages race physhlthevnt SRhealth smokes alcohol ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 201 2000 7 0 1 32964. NA NA 1 0 0 ## 2 201 2006 13 0 1 34682. NA NA 1 0 0 ## 3 201 2008 15 0 1 32837. NA NA 1 0 0 ## 4 202 2000 6 0 1 32964. NA NA 1 0 0 ## 5 202 2006 12 0 1 34682. NA NA 1 0 0 ## 6 202 2008 14 0 1 32837. NA NA 1 0 0 ## 7 301 2008 27 0 1 29323. 2 NA 2 0 NA ## 8 301 2000 19 0 1 28167. 2 NA 1 0 NA ## 9 301 2006 25 0 1 27278. 2 NA 1.67 0 NA ## 10 302 2000 17 0 1 27311. 2 NA 2 1 1 ## # … with 34,580 more rows, and 9 more variables: exercise &lt;dbl&gt;, BMI &lt;dbl&gt;, married &lt;dbl&gt;, ## # numKids &lt;dbl&gt;, parDivorce &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, religion &lt;dbl&gt;, parEdu &lt;dbl&gt;, ## # parOccPrstg &lt;dbl&gt; 2.9.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2 &amp; length(unique(x)) &lt;= 4} else{F}} not_all_na &lt;- function(x) any(!is.na(x)) not_all_id &lt;- function(x) if(is.numeric(x)) sd(x, na.rm = T) != 0 mice_fun &lt;- function(df){ mice(df, m = 5, maxit=5, printFlag=TRUE, method = &quot;cart&quot;) } nlsy_match_imp2 &lt;- nlsy_match %&gt;% group_by(SID, year) %&gt;% mutate(parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% select(-momOccPrstg, -dadOccPrstg) %&gt;% ungroup() %&gt;% mutate_all(~ifelse(is.infinite(.), NA, .)) %&gt;% filter(!is.na(year) &amp; !is.na(SID)) %&gt;% group_by(year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na) %&gt;% select_if(not_all_id)), data = map(data, ~(.) %&gt;% mutate_if(factor_fun, as.factor)), imp = map(data, mice_fun)) beepr::beep(sound = 8) nlsy_match_imp &lt;- nlsy_match_imp %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% rename(PhysFunc = physAct)), imp_df = map(imp_df, ~(.) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% select(-momEdu, -dadEdu) %&gt;% ungroup()), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name)), hlthProbs) %&gt;% group_by(SID) %&gt;% mutate(physhlthevnt = max(cbind(physhlthevnt, hlthProbs))-1) %&gt;% ungroup() %&gt;% select(-hlthProbs))) nlsy_match_imp_long &lt;- nlsy_match_imp %&gt;% mutate(imp_df = map(imp_df, ~(.) %&gt;% mutate_if(is.factor, ~as.numeric(as.character(.))))) %&gt;% select(p_year = year, imp_df) %&gt;% mutate(imp_df = map(imp_df, ~if(any(colnames(.) == &quot;relSat&quot;)){(.) %&gt;% mutate(relSat = as.numeric(as.character(relSat)))})) %&gt;% unnest(imp_df) nlsy_SCA_imp &lt;- nlsy_match_imp %&gt;% select(p_year = year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% left_join(nlsy_SCA %&gt;% select(p_year, SID, colnames(nlsy_SCA)[!colnames(nlsy_SCA) %in% colnames(.)])) %&gt;% left_join(nlsy_match %&gt;% select(SID, p_year = year)) %&gt;% mutate(physhlthevnt = factor(physhlthevnt)) unique(specifications$name)[!unique(specifications$name) %in% colnames(nlsy_SCA_imp)] save(nlsy_match_imp_long, nlsy_SCA_imp, file = sprintf(&quot;%s/data/imputed/nlsy_imputed_small.RData&quot;, wd)) save(nlsy_match_imp, file = sprintf(&quot;%s/data/imputed/nlsy_imputed.RData&quot;, wd)) save(nlsy_alpha, nlsy_pers, nlsy_out, nlsy_match, nlsy_SCA, file = sprintf(&quot;%s/data/clean/nlsy_cleaned.RData&quot;, wd)) save(nlsy, file = sprintf(&quot;%s/data/clean/nlsy_raw.RData&quot;, wd)) rm(list =ls()[grepl(&quot;nlsy&quot;, ls())]) rm(list =ls()[grepl(&quot;nlsy&quot;, ls())]) 2.10 SHP The Swiss Household Panel Study (SHP; Voorpostel et al., 2016) “Living in Switzerland” is an ongoing longitudinal study of households in Switzerland. These data are available online, through application from https://forsbase.unil.ch/project/study-public-overview/15632/0/. Participants were recruited from more than 10,000 individuals from the households whose members represent the non-institutional resident population of Switzerland. Data have been collected annually since 1999. The latest data release includes data up to 2018. On average, about 5,000 individuals are sampled at each wave. More documentation can be found at LINK, but, in short, the SHP is a nationally representative sample of Swiss citizens. Sample sizes vary by year, ranging from 5,220 (2003) to 13,295 (2013). This provides 99/% power to detect a zero-order correlation effect size of ~.06, two tailed at alpha .05. 2.10.1 Load Data shp_read_fun &lt;- function(x){ if(grepl(&quot;SHP0_BV&quot;, x)){old.names &lt;- str_to_lower(old.names)} y &lt;- sprintf(&quot;%s/data/shp/%s&quot;, wd, x) %&gt;% haven::read_sav(.) %&gt;% haven::zap_labels(.) %&gt;% select(one_of(old.names)) if(grepl(&quot;SHP0_BV&quot;, x)){colnames(y) &lt;- str_to_upper(colnames(y))} return(y) } shp_codebook &lt;- (codebook %&gt;% filter(study == &quot;SHP&quot;))$codebook[[1]] %&gt;% filter(year &lt;= 2017 | is.na(year) | year == 0) shp_codebook ## # A tibble: 1,493 x 18 ## study dataset category name itemname wave year new_itemname orig_itemname stem ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 shp P match dadA… dadalive 15 2013 shp__match_… P13N82 N82 ## 2 shp P match dadA… dadalive 18 2016 shp__match_… P16N82 N82 ## 3 shp P match dadE… dadhigh… 0 0 shp__match_… P$$O17 O17 ## 4 shp P match degP… hlthimp… 1 1999 shp__match_… P99C08 C08 ## 5 shp P match degP… hlthimp… 2 2000 shp__match_… P00C08 C08 ## 6 shp P match degP… hlthimp… 3 2001 shp__match_… P01C08 C08 ## 7 shp P match degP… hlthimp… 4 2002 shp__match_… P02C08 C08 ## 8 shp P match degP… hlthimp… 5 2003 shp__match_… P03C08 C08 ## 9 shp P match degP… hlthimp… 6 2004 shp__match_… P04C08 C08 ## 10 shp P match degP… hlthimp… 7 2005 shp__match_… P05C08 C08 ## # … with 1,483 more rows, and 8 more variables: description &lt;chr&gt;, scale &lt;chr&gt;, ## # reverse_code &lt;chr&gt;, recode &lt;chr&gt;, mini &lt;dbl&gt;, maxi &lt;dbl&gt;, comp_rule &lt;chr&gt;, ...18 &lt;lgl&gt; old.names &lt;- unique(shp_codebook$orig_itemname) %&gt;% str_to_upper datasets &lt;- sprintf(&quot;%s/data/shp&quot;, wd) %&gt;% list.files() shp &lt;- tibble(datasets = datasets) %&gt;% mutate(data = map(datasets, shp_read_fun), ncol = map(data, ncol)) %&gt;% unnest(ncol) %&gt;% filter(ncol &gt; 1) shp_grid &lt;- shp %&gt;% filter(datasets == &quot;SHP_MH.sav&quot;) shp &lt;- shp %&gt;% filter(datasets != &quot;SHP_MH.sav&quot;) shp &lt;- reduce(shp$data, full_join) %&gt;% haven::zap_labels(.) save(shp, file = sprintf(&quot;%s/data/clean/shp_raw.RData&quot;, wd)) 2.10.2 Matching Variables rename_fun &lt;- function(cb, var){ print(var) old.names &lt;- unique((shp_codebook %&gt;% filter(name == var))$orig_itemname) df &lt;- shp %&gt;% select(SID = IDPERS, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID, na.rm=T) if(length(old.names) &gt; 1){ df %&gt;% left_join(cb %&gt;% select(itemname, year, orig_itemname, reverse_code:comp_rule)) } else { df %&gt;% left_join(cb %&gt;% select(-(itemname:year), -new_itemname, -dataset) %&gt;% distinct()) %&gt;% mutate(year = &quot;0&quot;) } } # rename variables shp_match &lt;- shp_codebook %&gt;% filter(category == &quot;match&quot; &amp; year != 0) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% # filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() # single time point variables old.names &lt;- (shp_codebook %&gt;% filter(category == &quot;match&quot; &amp; year == &quot;0&quot;))$orig_itemname shp_match_stp &lt;- shp %&gt;% select(SID = IDPERS, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID) %&gt;% left_join(shp_codebook %&gt;% select(name:year, orig_itemname, recode, comp_rule)) # recoding recode_fun &lt;- function(rule, y, p_year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } yrBrth &lt;- shp_match_stp %&gt;% filter(name == &quot;yearBrth&quot;) %&gt;% mutate(yearBrth = ifelse(value &lt; 0, NA, value)) %&gt;% select(SID, yearBrth) shp_match &lt;- shp_match %&gt;% left_join(yrBrth) %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(recode = mapvalues(recode, &quot;ifelse(is.na(x) | x &lt; 0), NA, ifelse(x &gt; 0, 1, 0))&quot;, &quot;ifelse(is.na(x) | x &lt; 0, NA, ifelse(x &gt; 0, 1, 0))&quot;), recode = mapvalues(recode, &quot;ifelse(is.na(x) | x &lt; 0, ifelse(x %in% 7:14, 0, 1))&quot;, &quot;ifelse(is.na(x) | x &lt; 0, NA, ifelse(x %in% 7:14, 0, 1))&quot;), data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) shp_waves &lt;- p_waves %&gt;% filter(Study == &quot;SHP&quot;) %&gt;% select(Used) %&gt;% distinct() shp_match_stp &lt;- shp_match_stp %&gt;% full_join(crossing(p_year = shp_waves$Used, year = 0)) %&gt;% left_join(yrBrth) %&gt;% group_by(recode, p_year, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) # reverse code shp_match &lt;- shp_match %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T), multiply = prod(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% # group by person and item (collapse across age) group_by(SID, yearBrth, name, year) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } shp_match &lt;- shp_match %&gt;% filter(year &lt;= max(shp_waves$Used)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule), data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ shp_match %&gt;% filter(year &lt;= p_year &amp; comp_rule == rule) %&gt;% left_join( shp_match_stp %&gt;% select(SID, yearBrth, p_year, name, value, comp_rule) %&gt;% filter(comp_rule == rule &amp; p_year == p_year) ) %&gt;% group_by(SID, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } shp_match &lt;- crossing( p_year = shp_waves$Used, comp_rule = unique(shp_match$comp_rule) ) %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule), data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) %&gt;% select(-comp_rule) %&gt;% full_join(shp_match_stp %&gt;% select(SID, yearBrth, name, value, p_year)) %&gt;% filter(!is.na(value)) %&gt;% distinct() %&gt;% spread(name,value) ## # A tibble: 139,867 x 56 ## year SID A C DEP E LOC N `NA` O OP PA SE SS SWL ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2000 4101 NA NA 0 NA NA NA NA NA 9 NA NA 9 10 ## 2 2000 4102 NA NA 5 NA NA NA NA NA 7 NA NA 10 10 ## 3 2000 5101 NA NA 1 NA NA NA NA NA 10 NA NA 6.5 8 ## 4 2000 6101 NA NA 8 NA NA NA NA NA 0 NA NA 4.75 5 ## 5 2000 13102 NA NA 3 NA NA NA NA NA 7 NA NA 8.7 9 ## 6 2000 14101 NA NA 0 NA NA NA NA NA 8 NA NA 5.88 8 ## 7 2000 26101 NA NA 2 NA NA NA NA NA 0 NA NA 8.12 5 ## 8 2000 26102 NA NA 0 NA NA NA NA NA 9 NA NA 7.5 10 ## 9 2000 27101 NA NA 0 NA NA NA NA NA 9 NA NA 7.5 8 ## 10 2000 27102 NA NA 1 NA NA NA NA NA 0 NA NA 7 8 ## # … with 139,857 more rows, and 41 more variables: ageMarried &lt;dbl&gt;, dadEdu &lt;dbl&gt;, ## # dadOccPrstg &lt;dbl&gt;, degPhysFunc &lt;dbl&gt;, disability &lt;dbl&gt;, drVisits &lt;dbl&gt;, education &lt;dbl&gt;, ## # employed &lt;dbl&gt;, exercise &lt;dbl&gt;, gender &lt;dbl&gt;, grsWages &lt;dbl&gt;, height &lt;dbl&gt;, HHID &lt;dbl&gt;, ## # HHsize &lt;dbl&gt;, hlthcare &lt;dbl&gt;, imprvHealth &lt;dbl&gt;, loneliness &lt;dbl&gt;, married &lt;dbl&gt;, ## # meaning &lt;dbl&gt;, momEdu &lt;dbl&gt;, momOccPrstg &lt;dbl&gt;, numKids &lt;dbl&gt;, parDivorce &lt;dbl&gt;, ## # physAct &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, race &lt;dbl&gt;, religion &lt;dbl&gt;, religiosity &lt;dbl&gt;, ## # satFinances &lt;dbl&gt;, satFncChng &lt;dbl&gt;, satHealth &lt;dbl&gt;, satHH &lt;dbl&gt;, satSchl &lt;dbl&gt;, ## # SRhealth &lt;dbl&gt;, unemployBen &lt;dbl&gt;, weight &lt;dbl&gt;, welfare &lt;dbl&gt;, yearBrth &lt;dbl&gt;, ## # physhlthevnt &lt;dbl&gt;, age &lt;dbl&gt;, BMI &lt;dbl&gt; 2.10.3 Personality Variables shp_pers &lt;- shp_codebook %&gt;% filter(category == &quot;pers&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% left_join(p_waves %&gt;% filter(Study == &quot;SHP&quot;) %&gt;% select(name = p_item, Used)) %&gt;% filter(year %in% Used) recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode shp_pers &lt;- shp_pers %&gt;% select(-orig_itemname) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code shp_pers &lt;- shp_pers %&gt;% mutate(value = ifelse(tolower(reverse_code) == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) # alpha&#39;s shp_alpha &lt;- shp_pers %&gt;% select(name, itemname, year, SID, value, comp_rule) %&gt;% group_by(name, year, SID, comp_rule, itemname) %&gt;% summarize(value = mean(value, na.rm = T)) %&gt;% group_by(name, year, comp_rule) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% pivot_wider(names_from = itemname, values_from = value, values_fn = list(value = mean))), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-SID)), NA_real_))) # create composites comp_fun &lt;- function(df, rule){ df %&gt;% group_by(SID) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } # create composites shp_pers &lt;- shp_pers %&gt;% group_by(name, comp_rule, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;average&quot;, comp_rule), data = map2(data, comp_rule, comp_fun)) %&gt;% unnest() ## # A tibble: 187,730 x 5 ## name year comp_rule SID value ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 2009 average 4101 7 ## 2 A 2009 average 4102 5 ## 3 A 2009 average 4103 1.5 ## 4 A 2009 average 4104 5 ## 5 A 2009 average 5101 5.5 ## 6 A 2009 average 5104 5 ## 7 A 2009 average 21101 7.5 ## 8 A 2009 average 26101 10 ## 9 A 2009 average 27101 6 ## 10 A 2009 average 27102 5.5 ## # … with 187,720 more rows 2.10.4 Outcome Variables shp_out &lt;- shp_codebook %&gt;% filter(category == &quot;out&quot; &amp; year != &quot;0&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% full_join(crossing(p_year = shp_waves$Used, name = unique((.)$name))) old.names &lt;- (shp_codebook %&gt;% filter(category == &quot;out&quot; &amp; year == &quot;0&quot;))$orig_itemname shp_out_stp &lt;- shp %&gt;% select(SID = IDPERS, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID) %&gt;% left_join(shp_codebook %&gt;% select(name:year, orig_itemname, recode, comp_rule)) # recode recode_fun &lt;- function(rule, y, p_year, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } shp_out &lt;- shp_out %&gt;% left_join(yrBrth) %&gt;% select(-orig_itemname) %&gt;% group_by(recode, year, p_year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(year = as.numeric(year), data = pmap(list(recode, data, p_year, year), recode_fun)) %&gt;% unnest(data) %&gt;% distinct() shp_waves &lt;- p_waves %&gt;% filter(Study == &quot;SHP&quot;) %&gt;% select(Used) %&gt;% distinct() shp_out_stp &lt;- shp_out_stp %&gt;% full_join(crossing(p_year = shp_waves$Used, year = 0)) %&gt;% group_by(recode, p_year, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) %&gt;% left_join(yrBrth) # composite within years shp_out &lt;- shp_out %&gt;% select(year, p_year:itemname, yearBrth) %&gt;% distinct() %&gt;% # filter(year &lt;= max(gsoep_waves$Used)) %&gt;% group_by(SID, name, year, yearBrth, p_year) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.nan(value)|is.infinite(value), NA, value)) shp_out &lt;- shp_out %&gt;% filter(name == &quot;chldmvout&quot;) %&gt;% group_by(SID, p_year) %&gt;% mutate(max = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(value &lt; max, 1, 0)) %&gt;% select(-max) %&gt;% full_join(shp_out %&gt;% filter(name != &quot;chldmvout&quot;)) # composite across years comp_fun &lt;- function(P_year){ shp_out %&gt;% mutate(group = ifelse(year &gt; P_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, name, group) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) } shp_out &lt;- tibble(p_year = shp_waves$Used) %&gt;% mutate(data = map(p_year, comp_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% full_join(shp_out_stp %&gt;% select(p_year, name, SID, value)) %&gt;% distinct() %&gt;% left_join(yrBrth) ## # A tibble: 1,323,120 x 7 ## p_year SID name future past value yearBrth ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2009 4101 chldbrth 1 1 NA 1965 ## 2 2009 4101 chldmvout 1 1 NA 1965 ## 3 2009 4101 divorced 0 0 0 1965 ## 4 2009 4101 edu 1 0 1 1965 ## 5 2009 4101 frstjob 0 0 0 1965 ## 6 2009 4101 married 0 0 0 1965 ## 7 2009 4101 mortality 0 0 0 1965 ## 8 2009 4101 mvInPrtnr 1 1 NA 1965 ## 9 2009 4101 physhlthevnt 0 0 0 1965 ## 10 2009 4101 vlntred 0 1 NA 1965 ## # … with 1,323,110 more rows 2.10.5 Covariates shp_match &lt;- shp_pers %&gt;% select(-comp_rule) %&gt;% spread(name, value) %&gt;% full_join(shp_match %&gt;% rename(year = p_year)) %&gt;% # physical health event left_join(shp_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(year = p_year, SID, physhlthevnt = past) %&gt;% distinct() %&gt;% group_by(SID, year) %&gt;% summarize(physhlthevnt = max(physhlthevnt)) %&gt;% ungroup()) %&gt;% distinct() # age shp_match &lt;- shp_match %&gt;% mutate(age = year - yearBrth, BMI = weight / (height/100)^2, parDivorce = ifelse(is.na(parDivorce), 0, parDivorce)) shp_out &lt;- shp_out %&gt;% select(-past, -future) %&gt;% distinct() shp_SCA &lt;- shp_match %&gt;% select(SID, p_year = year, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T), parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% mutate_at(vars(parEdu, parOccPrstg), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu, -momOccPrstg, -dadOccPrstg) unique(specifications$name)[!unique(specifications$name) %in% colnames(shp_match2)] ## # A tibble: 139,867 x 18 ## SID p_year age education gender grsWages race physhlthevnt SRhealth exercise BMI ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4101 2000 35 0 0 57750 0 0 1 1 NA ## 2 4102 2000 32 0 1 57750 0 1 3 2 NA ## 3 5101 2000 39 1 0 86700 0 1 2 2 NA ## 4 6101 2000 36 0 1 49400 0 0 3.5 0 NA ## 5 13102 2000 27 0 1 34270 0 0 2 2 NA ## 6 14101 2000 66 0 0 72130 0 0 2 2 NA ## 7 26101 2000 78 0 1 57400 0 0 3 4 NA ## 8 26102 2000 75 0 0 57400 0 0 2 7 NA ## 9 27101 2000 32 0 1 37050 0 0 3 7 NA ## 10 27102 2000 32 0 0 37050 0 1 1 3 NA ## # … with 139,857 more rows, and 7 more variables: married &lt;dbl&gt;, numKids &lt;dbl&gt;, ## # parDivorce &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, religion &lt;dbl&gt;, parEdu &lt;dbl&gt;, parOccPrstg &lt;dbl&gt; 2.10.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2 &amp; length(unique(x)) &lt;= 4} else{F}} not_all_id &lt;- function(x) if(is.numeric(x)) sd(x, na.rm = T) != 0 mice_fun &lt;- function(df){ mice(df, m = 5, maxit=5, method = &quot;cart&quot;, printFlag=TRUE) } shp_match_imp &lt;- shp_match %&gt;% rename(NegAff = `NA`) %&gt;% group_by(SID, year) %&gt;% mutate(parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% select(-momOccPrstg, -dadOccPrstg) %&gt;% ungroup() %&gt;% mutate_all(~ifelse(is.infinite(.), NA, .)) %&gt;% filter(!is.na(year) &amp; !is.na(SID)) %&gt;% group_by(year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na) %&gt;% select_if(not_all_id)), data = map(data, ~(.) %&gt;% mutate_if(factor_fun, as.factor)), imp = map(data, mice_fun)) beepr::beep(sound = 8) shp_match_imp &lt;- shp_match_imp %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% select(-momEdu, -dadEdu) %&gt;% ungroup()), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name))))) shp_match_imp_long &lt;- shp_match_imp %&gt;% mutate(imp_df = map(imp_df, ~(.) %&gt;% mutate_if(is.factor, ~as.numeric(as.factor(.))))) %&gt;% select(p_year = year, imp_df) %&gt;% mutate(imp_df = map(imp_df, ~if(any(colnames(.) == &quot;relSat&quot;)){(.) %&gt;% mutate(relSat = as.numeric(as.character(relSat))); (.)}else{(.)})) %&gt;% unnest(imp_df) shp_SCA_imp &lt;- shp_match_imp %&gt;% select(p_year = year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% left_join(shp_SCA %&gt;% select(p_year=year, SID, colnames(shp_SCA)[!colnames(shp_SCA) %in% colnames(.)])) shp_SCA_imp &lt;- shp_SCA_imp %&gt;% select(-BMI) %&gt;% left_join(shp_SCA_imp %&gt;% select(SID, BMI) %&gt;% distinct() %&gt;% gather(item, value, -SID, na.rm = T) %&gt;% group_by(SID,item) %&gt;% summarize(value = mean(value, na.rm = T)) %&gt;% spread(item,value)) unique(specifications$name)[!unique(specifications$name) %in% colnames(shp_SCA_imp)] save(shp_match_imp_long, shp_SCA_imp, file = sprintf(&quot;%s/data/imputed/shp_imputed_small.RData&quot;, wd)) save(shp_match_imp, file = sprintf(&quot;%s/data/imputed/shp_imputed.RData&quot;, wd)) save(shp_alpha, shp_pers, shp_out, shp_match, shp_SCA, file = sprintf(&quot;%s/data/clean/shp_cleaned.RData&quot;, wd)) rm(list =ls()[grepl(&quot;shp&quot;, ls())]) rm(list =ls()[grepl(&quot;shp&quot;, ls())]) 2.11 WLS The Wisconsin Longitudinal Study (WLS) is an ongoing longitudinal study of individuals who graduated from Wisconsin high schools in 1957 and were born between 1937 and 1940 as well as their siblings. Graduates were randomly recruited from Wisconsin high schools in 1957 and born between 1937 and 1940. In 1977, at least one sibling of the original graduates from 2,100 families were also invited to participate in the study. As such, the study is representative of older, white Americans who have at least a high school education. Graduate data have been collected in in 1957, 1964, 1975, 1992, 2004, and 2011, and sibling data have been collected in 1977, 1994, 2005, and 2011. Personality data were initially collected in 1992 for graduates and 1994 for siblings. More documentation can be found at https://www.ssc.wisc.edu/wlsresearch/. Sample sizes vary by wave, from 9,681 (2011) to 10,317 (1957). This provides 99/% power to detect zero-order correlation effect sizes of ~.06, two-tailed at alpha .05. 2.11.1 Load Data wls_codebook &lt;- (codebook %&gt;% filter(study == &quot;WLSS&quot;))$codebook[[1]] %&gt;% mutate(orig_itemname = str_to_lower(orig_itemname), sib = ifelse(grepl(&quot;rad&quot;, dataset), &quot;grad&quot;, ifelse(grepl(&quot;ibl&quot;, dataset), &quot;sib&quot;, NA))) wls_codebook ## # A tibble: 834 x 19 ## study dataset category name itemname year new_itemname orig_itemname description scale ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 wlss 1992 -… match ageF… ageFrst… 1992 wlss__match… ru020re What age w… &quot;.\\t… ## 2 wlss 1993 -… match ageF… ageFrst… 1993 wlss__match… su020re What age w… &quot;.\\t… ## 3 wlss 1992 -… match alco… alcohol 1992 wlss__match… ru026re During the… &lt;NA&gt; ## 4 wlss 1993 -… match alco… alcohol 1993 wlss__match… su026re During the… &lt;NA&gt; ## 5 wlss 1992 -… match anem… anemia 1992 wlss__match… mx083rer Has a medi… &quot;.\\t… ## 6 wlss 1993 -… match anem… anemia 1992 wlss__match… nx103rer Has a medi… &quot;\\&quot;.… ## 7 wlss 1992 -… match appr… apprncR… 1992 wlss__match… mx004rer Compared w… &quot;.\\t… ## 8 wlss 1993 -… match appr… apprncR… 1993 wlss__match… nx004rer Compared w… &quot;.\\t… ## 9 wlss 1992-1… match auth… afraidV… 1992 wlss__match… mn007rer “I am not … &quot;1 a… ## 10 wlss 1992-1… match auth… afraidV… 1992 wlss__match… np007rer “I am not … &quot;1 a… ## # … with 824 more rows, and 9 more variables: reverse_code &lt;chr&gt;, recode &lt;chr&gt;, mini &lt;dbl&gt;, ## # maxi &lt;dbl&gt;, comp_rule &lt;chr&gt;, ...16 &lt;chr&gt;, ...17 &lt;chr&gt;, ...18 &lt;chr&gt;, sib &lt;chr&gt; old.names &lt;- wls_codebook$orig_itemname wls &lt;- sprintf(&quot;%s/data/wls/wls_b_13_07.sav&quot;, wd) %&gt;% haven::read_sav(.) %&gt;% haven::zap_labels(.) %&gt;% select(one_of(old.names)) save(wls, file = sprintf(&quot;%s/data/clean/wls_raw.RData&quot;, wd)) 2.11.2 Matching Variables rename_fun &lt;- function(cb, var){ old.names &lt;- unique((wls_codebook %&gt;% filter(name == var))$orig_itemname) df &lt;- wls %&gt;% select(SID = idpub, HHID = familypub, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID, -HHID, na.rm=T) if(length(old.names) &gt; 1){ df %&gt;% left_join(cb %&gt;% select(itemname, year, orig_itemname, reverse_code:comp_rule, sib)) } else { df %&gt;% left_join(cb %&gt;% select(-(itemname:year), -new_itemname, -dataset) %&gt;% distinct()) %&gt;% mutate(year = &quot;0&quot;) } } # rename variables wls_match &lt;- wls_codebook %&gt;% filter(category == &quot;match&quot; &amp; year != 0) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% # filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() # single time point variables old.names &lt;- (wls_codebook %&gt;% filter(category == &quot;match&quot; &amp; year == &quot;0&quot;))$orig_itemname wls_match_stp &lt;- wls %&gt;% select(SID = idpub, HHID = familypub, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID, -HHID, na.rm=T) %&gt;% left_join(wls_codebook %&gt;% select(name:year, orig_itemname, recode, comp_rule, sib)) %&gt;% unite(SID, SID, sib, sep = &quot;&quot;) # recoding recode_fun &lt;- function(rule, y, p_year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } yrBrth &lt;- wls_match_stp %&gt;% filter(name == &quot;yearBrth&quot;) %&gt;% mutate(yearBrth = ifelse(value &lt; 0, NA, value +1900)) %&gt;% select(SID, HHID, yearBrth) wls_match &lt;- wls_match %&gt;% unite(SID, SID, sib, sep = &quot;&quot;) %&gt;% left_join(yrBrth) %&gt;% group_by(recode, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, year), recode_fun)) %&gt;% unnest(data) wls_match_par &lt;- wls_match %&gt;% filter(grepl(&quot;mom&quot;, name) | grepl(&quot;dad&quot;, name) | name == &quot;parGrsWages&quot;) %&gt;% group_by(year, HHID, name, comp_rule) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value), comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule)) %&gt;% filter(!is.na(value)) %&gt;% group_by(HHID, name) %&gt;% summarize(value = fun_call(value, comp_rule[1])) %&gt;% ungroup() %&gt;% spread(name, value) %&gt;% mutate(parGrsWages = parGrsWages*100) wls_waves &lt;- p_waves %&gt;% filter(Study == &quot;WLS&quot;) %&gt;% select(Used) %&gt;% distinct() wls_match_stp &lt;- wls_match_stp %&gt;% full_join(crossing(p_year = wls_waves$Used, year = &quot;0&quot;)) %&gt;% left_join(yrBrth) %&gt;% group_by(recode, p_year, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) %&gt;% filter(!is.na(value)) %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule)) %&gt;% group_by(p_year, SID, HHID, name, yearBrth) %&gt;% summarize(value = fun_call(value, comp_rule[1])) %&gt;% ungroup() %&gt;% mutate(value = ifelse(value &lt; 0, NA, value)) %&gt;% spread(name, value) # reverse code wls_match &lt;- wls_match %&gt;% mutate(value = ifelse(reverse_code == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) fun_call &lt;- function(x, rule){ switch(rule, average = mean(x, na.rm = T), mode = Mode(x)[1], sum = sum(x, na.rm = T), skip = unique(x)[1], max = max(x, na.rm = T), min = min(x, na.rm = T), multiply = prod(x, na.rm = T)) } # compositing within years year_comp_fun &lt;- function(df, rule){ df %&gt;% # group by person and item (collapse across age) group_by(SID, HHID, yearBrth, name, year) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) } wls_match &lt;- wls_match %&gt;% filter(!(grepl(&quot;mom&quot;, name) | grepl(&quot;dad&quot;, name) | name == &quot;parGrsWages&quot;)) %&gt;% filter(year &lt;= max(wls_waves$Used)) %&gt;% group_by(comp_rule) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule), data = map2(data, comp_rule, year_comp_fun)) %&gt;% unnest(data) comp_fun &lt;- function(rule, p_year){ wls_match %&gt;% filter(year &lt;= p_year &amp; comp_rule == rule) %&gt;% group_by(SID, HHID, yearBrth, name) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } wls_match &lt;- crossing( p_year = wls_waves$Used, comp_rule = unique(wls_match$comp_rule) ) %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;skip&quot;, comp_rule), data = map2(comp_rule, p_year, comp_fun)) %&gt;% unnest(data) %&gt;% mutate(value = ifelse(is.infinite(value) | is.nan(value), NA, value)) %&gt;% select(-comp_rule) %&gt;% pivot_wider(names_from = name, values_from = value, values_fn = list(value = max)) %&gt;% full_join(wls_match_par) %&gt;% full_join(wls_match_stp) ## # A tibble: 44,342 x 69 ## year SID A C DEP E IQ LOC N `NA` O OP PA SE ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1992 9000… 4.2 5 1 4.20 NA 5.33 4.36 1.33 4.6 NA NA 4.67 ## 2 1992 9000… 6.4 6.4 0.55 6.8 NA 5.67 1.72 0 5.2 NA NA 5.44 ## 3 1992 9000… 6.2 4.8 0.7 3.8 NA 6 2.2 0.375 2.4 NA 6.75 3.86 ## 4 1992 9000… NA NA NA NA NA NaN NA NA NA NA NA NaN ## 5 1992 9000… 4.4 5.8 0.25 4.6 NA 5.67 1.96 0 3.2 NA NA 6.09 ## 6 1992 9000… NA NA NA NA 9 NA NA NA NA NA NA 5.5 ## 7 1992 9000… NA NA NA NA NA 1 NA NA NA NA NA 4.55 ## 8 1992 9000… 5.4 6 1.05 4 4 3.5 2.92 0 4.4 NA 7 4.33 ## 9 1992 9000… 5.40 6.4 0.6 5.2 NA 5 3.16 0 5.2 NA NA 5.78 ## 10 1992 9000… 5.2 6.8 0.6 5.4 NA 6.33 3.4 0.333 5.8 NA NA 6.22 ## # … with 44,332 more rows, and 55 more variables: HHID &lt;dbl&gt;, yearBrth &lt;dbl&gt;, ## # authonomy &lt;dbl&gt;, EnvMastery &lt;dbl&gt;, exercise &lt;dbl&gt;, grsWages &lt;dbl&gt;, hospitalized &lt;dbl&gt;, ## # PersGrowth &lt;dbl&gt;, Purpose &lt;dbl&gt;, hlthcare &lt;dbl&gt;, PhysFunc &lt;dbl&gt;, welfare &lt;dbl&gt;, ## # ageMarried &lt;dbl&gt;, disability &lt;dbl&gt;, urban &lt;dbl&gt;, ageFrstDep &lt;dbl&gt;, alcohol &lt;dbl&gt;, ## # anemia &lt;dbl&gt;, apprncRel10yrs &lt;dbl&gt;, backPain &lt;dbl&gt;, BMI &lt;dbl&gt;, depIntUnit &lt;dbl&gt;, ## # depLngthUnit &lt;dbl&gt;, dizziness &lt;dbl&gt;, education &lt;dbl&gt;, employed &lt;dbl&gt;, everSmoked &lt;dbl&gt;, ## # fatigue &lt;dbl&gt;, headaches &lt;dbl&gt;, height &lt;dbl&gt;, HHsize &lt;dbl&gt;, hlthRel10yrs &lt;dbl&gt;, ## # hlthRelOthrs &lt;dbl&gt;, married &lt;dbl&gt;, numKids &lt;dbl&gt;, parDivorce &lt;dbl&gt;, religion &lt;dbl&gt;, ## # satFam &lt;dbl&gt;, satJob &lt;dbl&gt;, sleepProb &lt;dbl&gt;, smokePacks &lt;dbl&gt;, smokes &lt;dbl&gt;, ## # smokeYears &lt;dbl&gt;, SRhealth &lt;dbl&gt;, weight &lt;dbl&gt;, dadAlive &lt;dbl&gt;, dadEdu &lt;dbl&gt;, ## # dadJob &lt;dbl&gt;, dadOccPrstg &lt;dbl&gt;, momAlive &lt;dbl&gt;, momEdu &lt;dbl&gt;, momOccPrstg &lt;dbl&gt;, ## # parGrsWages &lt;dbl&gt;, gender &lt;dbl&gt;, physhlthevnt &lt;dbl&gt; 2.11.3 Personality Variables wls_pers &lt;- wls_codebook %&gt;% filter(category == &quot;pers&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% filter(name != &quot;yearBrth&quot;) %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% mutate(year = ifelse(sib == &quot;sib&quot;, as.numeric(year) - 1, year)) %&gt;% left_join(p_waves %&gt;% filter(Study == &quot;WLS&quot;) %&gt;% select(name = p_item, Used)) %&gt;% filter(year %in% Used) %&gt;% unite(SID, SID, sib, sep = &quot;&quot;) recode_fun &lt;- function(rule, y){ x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } # recode wls_pers &lt;- wls_pers %&gt;% select(-orig_itemname) %&gt;% group_by(recode) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(recode, data, recode_fun)) %&gt;% unnest(data) # reverse code wls_pers &lt;- wls_pers %&gt;% mutate(value = ifelse(tolower(reverse_code) == &quot;no&quot; | is.na(reverse_code), value, reverse.code(-1, value, mini = mini, maxi = maxi))) # alpha&#39;s wls_alpha &lt;- wls_pers %&gt;% select(name, itemname, year, SID, value, comp_rule) %&gt;% group_by(name, year, SID, comp_rule, itemname) %&gt;% summarize(value = mean(value, na.rm = T)) %&gt;% group_by(name, year, comp_rule) %&gt;% nest() %&gt;% mutate(data = map(data, ~(.) %&gt;% pivot_wider(names_from = itemname, values_from = value, values_fn = list(value = mean))), alpha = map(data, possibly(~psych::alpha((.) %&gt;% select(-SID)), NA_real_))) # create composites comp_fun &lt;- function(df, rule){ df %&gt;% group_by(SID) %&gt;% summarize(value = fun_call(value, rule)) %&gt;% ungroup() } # create composites wls_pers &lt;- wls_pers %&gt;% group_by(name, comp_rule, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(comp_rule = ifelse(is.na(comp_rule), &quot;average&quot;, comp_rule), data = map2(data, comp_rule, comp_fun)) %&gt;% unnest() ## # A tibble: 243,434 x 5 ## name year comp_rule SID value ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 A 1992 average 900021grad 4.2 ## 2 A 1992 average 900026grad 6.4 ## 3 A 1992 average 900026sib 6.2 ## 4 A 1992 average 900042grad 4.4 ## 5 A 1992 average 900043sib 5.4 ## 6 A 1992 average 900054grad 5.40 ## 7 A 1992 average 900069grad 5.2 ## 8 A 1992 average 900074sib 6.8 ## 9 A 1992 average 900075grad 5.4 ## 10 A 1992 average 900078grad 6.6 ## # … with 243,424 more rows 2.11.4 Outcome Variables wls_out &lt;- wls_codebook %&gt;% filter(category == &quot;out&quot; &amp; year != &quot;0&quot;) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map2(data, name, rename_fun)) %&gt;% unnest(data) %&gt;% distinct() %&gt;% full_join(crossing(p_year = wls_waves$Used, name = unique((.)$name))) %&gt;% unite(SID, SID, sib, sep = &quot;&quot;) old.names &lt;- (wls_codebook %&gt;% filter(category == &quot;out&quot; &amp; year == &quot;0&quot;))$orig_itemname wls_out_stp &lt;- wls %&gt;% select(SID = idpub, HHID = familypub, one_of(old.names)) %&gt;% gather(key = orig_itemname, value = value, -SID, -HHID, na.rm=T) %&gt;% left_join(wls_codebook %&gt;% select(name:year, orig_itemname, recode, comp_rule, sib)) %&gt;% unite(SID, SID, sib, sep = &quot;&quot;) # recode recode_fun &lt;- function(rule, y, p_year, year){ yearBrth &lt;- y$yearBrth x &lt;- y$value if(!is.na(rule)){y$value &lt;- eval(parse(text = rule))} return(y) } wls_out &lt;- wls_out %&gt;% left_join(yrBrth) %&gt;% select(-orig_itemname) %&gt;% group_by(recode, year, p_year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(recode = str_replace_all(recode, &quot;ifesle&quot;, &quot;ifelse&quot;), year = as.numeric(year), data = pmap(list(recode, data, p_year, year), recode_fun)) %&gt;% unnest(data) %&gt;% distinct() wls_waves &lt;- p_waves %&gt;% filter(Study == &quot;WLS&quot;) %&gt;% select(Used) %&gt;% distinct() wls_out_stp &lt;- wls_out_stp %&gt;% full_join(crossing(p_year = wls_waves$Used, year = &quot;0&quot;)) %&gt;% group_by(recode, p_year, year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = pmap(list(recode, data, p_year), recode_fun)) %&gt;% unnest(data) %&gt;% left_join(yrBrth) # composite within years wls_out &lt;- wls_out %&gt;% select(year, p_year:itemname, yearBrth) %&gt;% distinct() %&gt;% # filter(year &lt;= max(gsoep_waves$Used)) %&gt;% group_by(SID, name, HHID, year, yearBrth) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.nan(value)|is.infinite(value), NA, value)) # composite across years comp_fun &lt;- function(P_year){ wls_out %&gt;% mutate(group = ifelse(year &gt; P_year, &quot;future&quot;, &quot;past&quot;)) %&gt;% group_by(SID, HHID, name, group) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(value = ifelse(is.infinite(value), NA, value)) %&gt;% pivot_wider(names_from = group, values_from = value) %&gt;% group_by(SID, name) %&gt;% mutate(value = ifelse(is.na(past) | (past == 0 &amp; !is.na(future)), future, ifelse(past == 0 &amp; is.na(future), past, ifelse(past == 1, NA, NA)))) } wls_out &lt;- tibble(p_year = wls_waves$Used) %&gt;% mutate(data = map(p_year, comp_fun)) %&gt;% unnest(data) %&gt;% full_join(wls_out_stp %&gt;% select(p_year,name, SID, HHID, value, yearBrth)) %&gt;% filter(name != &quot;chldbrth&quot;) ## # A tibble: 347,140 x 8 ## p_year SID HHID name past future value yearBrth ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1992 900018grad 1201627 divorced 0 NA 0 NA ## 2 1992 900018grad 1201627 married NA NA NA NA ## 3 1992 900018grad 1201627 unemployed NA NA NA NA ## 4 1992 900018grad 1201627 vlntred NA NA NA NA ## 5 1992 900018sib 1201627 divorced 0 NA 0 NA ## 6 1992 900018sib 1201627 married NA NA NA NA ## 7 1992 900018sib 1201627 unemployed NA NA NA NA ## 8 1992 900018sib 1201627 vlntred NA NA NA NA ## 9 1992 900021grad 1205260 crim NA 0 0 NA ## 10 1992 900021grad 1205260 divorced 0 1 1 NA ## # … with 347,130 more rows 2.11.5 Covariates wls_match &lt;- wls_pers %&gt;% select(-comp_rule) %&gt;% mutate(year = as.numeric(year)) %&gt;% spread(name, value) %&gt;% full_join(wls_match %&gt;% rename(year = p_year)) %&gt;% # physical health event full_join(wls_out %&gt;% filter(name == &quot;physhlthevnt&quot;) %&gt;% select(year = p_year, SID, physhlthevnt = past) %&gt;% distinct() %&gt;% group_by(SID, year) %&gt;% summarize(physhlthevnt = max(physhlthevnt)) %&gt;% ungroup()) %&gt;% distinct() # age wls_match &lt;- wls_match %&gt;% mutate(age = year - yearBrth) wls_out &lt;- wls_out %&gt;% select(-past, -future, -yearBrth) %&gt;% distinct() wls_SCA &lt;- wls_match %&gt;% select(SID, p_year = year, one_of(c(unique(specifications$name), &quot;momOccPrstg&quot;, &quot;dadOccPrstg&quot;, &quot;momEdu&quot;, &quot;dadEdu&quot;))) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T), parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% mutate_at(vars(parEdu, parOccPrstg), ~ifelse(is.infinite(.), NA, .)) %&gt;% ungroup() %&gt;% select(-momEdu, -dadEdu, -momOccPrstg, -dadOccPrstg) unique(specifications$name)[!unique(specifications$name) %in% colnames(wls_match2)] ## # A tibble: 44,342 x 19 ## SID p_year age education gender grsWages physhlthevnt SRhealth smokes alcohol exercise ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 9000… 1992 54 2 0 66000 1 4 NA 1 1.5 ## 2 9000… 1992 53 2 0 38500 0 5 NA 1 3.5 ## 3 9000… 1992 59 NA 0 NA NA NA NA &lt;NA&gt; 2.5 ## 4 9000… 1992 54 NA 0 12500 NA NA NA &lt;NA&gt; NA ## 5 9000… 1992 53 NA 0 48800 0 5 0 0 2.5 ## 6 9000… 1992 48 NA 0 NA NA NA NA &lt;NA&gt; NA ## 7 9000… 1992 54 NA 0 19451. NA NA NA 1 NA ## 8 9000… 1992 51 NA 0 NA NA NA NA &lt;NA&gt; 4 ## 9 9000… 1992 53 NA 0 65350 0 5 0 1 3 ## 10 9000… 1992 53 2 0 44250 0 5 0 1 3 ## # … with 44,332 more rows, and 8 more variables: BMI &lt;dbl&gt;, married &lt;dbl&gt;, numKids &lt;dbl&gt;, ## # parDivorce &lt;dbl&gt;, PhysFunc &lt;fct&gt;, religion &lt;dbl&gt;, parEdu &lt;dbl&gt;, parOccPrstg &lt;dbl&gt; 2.11.6 Imputation # short helper functions to (1) identify and create factors, save col names of factors, remove columns with all missing values, and setup amelia factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2 &amp; length(unique(x)) &lt;= 4} else{F}} not_all_id &lt;- function(x) if(is.numeric(x)) sd(x, na.rm = T) != 0 mice_fun &lt;- function(df){ mice(df, m = 5, maxit=5, printFlag=TRUE) } wls_match_imp &lt;- wls_match %&gt;% rename(NegAff = `NA`) %&gt;% group_by(SID, year) %&gt;% mutate(parOccPrstg = max(cbind(momOccPrstg, dadOccPrstg), na.rm = T)) %&gt;% select(-momOccPrstg, -dadOccPrstg, -HHID) %&gt;% ungroup() %&gt;% mutate_all(~ifelse(is.infinite(.) | is.nan(.), NA, .)) %&gt;% filter(!is.na(year) &amp; !is.na(SID)) %&gt;% group_by(year) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% select_if(not_all_na)), data = map(data, ~(.) %&gt;% mutate_if(factor_fun, as.factor)), imp = map(data, mice_fun)) beepr::beep(sound = 8) wls_match_imp &lt;- wls_match_imp %&gt;% mutate(imp_df = map(imp, ~mice::complete(., &quot;long&quot;)), imp_df = map(imp_df, ~(.) %&gt;% group_by(SID) %&gt;% mutate(parEdu = max(cbind(momEdu, dadEdu), na.rm = T)) %&gt;% select(-momEdu, -dadEdu) %&gt;% ungroup()), imp_sca = map(imp_df, ~(.) %&gt;% filter(.imp == 1) %&gt;% select(SID, one_of(unique(specifications$name))))) wls_match_imp_long &lt;- wls_match_imp %&gt;% select(p_year = year, imp_df) %&gt;% mutate(imp_df = map(imp_df, ~(.) %&gt;% mutate_if(is.factor, ~as.numeric(as.character(.)))), imp_df = map(imp_df, function(x){if(any(colnames(x) == &quot;relSat&quot;)){(x) %&gt;% mutate(relSat = as.numeric(as.character(relSat)))} else{x}})) %&gt;% unnest(imp_df) wls_SCA_imp &lt;- wls_match_imp %&gt;% select(p_year = year, imp_sca) %&gt;% unnest(imp_sca) %&gt;% left_join(wls_SCA %&gt;% select(p_year=year, SID, colnames(wls_SCA)[!colnames(wls_SCA) %in% colnames(.)])) %&gt;% mutate(race = factor(0)) %&gt;% mutate_at(vars(alcohol, PhysFunc), ~factor(ifelse(. &gt; 0, 1, .))) save(wls_match_imp_long, wls_SCA_imp, file = sprintf(&quot;%s/data/imputed/wls_imputed_small.RData&quot;, wd)) save(wls_match_imp, file = sprintf(&quot;%s/data/imputed/wls_imputed.RData&quot;, wd)) save(wls_alpha, wls_pers, wls_out, wls_match, wls_SCA, file = sprintf(&quot;%s/data/clean/wls_cleaned.RData&quot;, wd)) rm(list =ls()[grepl(&quot;wls&quot;, ls())]) rm(list =ls()[grepl(&quot;wls&quot;, ls())]) "],
["propensity-score-matching-psm.html", "Chapter 3 Propensity Score Matching {PSM} 3.1 Part 1: Data 3.2 Part 2: Run Matching 3.3 Part 3: Balance 3.4 Part 4: Descriptives", " Chapter 3 Propensity Score Matching {PSM} Study 1 tests whether personality still predicts outcomes following propensity score matching to control for selection bias. The analyses will proceed in several parts: 1. Data cleaning and combining 2. Running the matching procedure 3. Creating Balance Plots and Tables 4. Getting descriptive statistics of the matched and unmatched samples 5. Combining matched and unmatched data across studies into 14 personality characteristics x 14 outcomes x 9 models (one unmoderator + 8 moderated) x 5 imputations 6. Running matched and unmatched models in brms using the High Performance Computing Cluster 7. Recompiling and combining imputations and pulling model terms, random effects, predictions 8. Creating a series of tables and figures describing the results of all the models 3.1 Part 1: Data First, the data for the matching procedure need to be set up, so we’ll load in the matching, outcome, and personality data, and combine data from the same study in the year into one for each personality-outcome-moderator combination. ### Matching First, let’s load in the matching data. #loads an RData file, and returns it loadRData &lt;- function(fileName, type){ path &lt;- sprintf(&quot;%s/data/imputed/%s_imputed_small.RData&quot;, wd, fileName) load(path) get(ls()[grepl(type, ls())]) } # load in matching data from each study and combine psm_match &lt;- tibble(study = studies) %&gt;% mutate(data = map(study, ~loadRData(., &quot;match_imp_long&quot;)), data = map(data, ~(.) %&gt;% mutate( p_year = as.numeric(p_year), SID = as.character(SID))%&gt;% mutate_if(is.factor, ~as.numeric(as.character(.))) %&gt;% filter(age &lt; 100)), study = mapvalues(study, studies, studies_long), data = map(data, ~(.) %&gt;% group_by(.imp, p_year) %&gt;% nest())) %&gt;% unnest(data) %&gt;% rename(match_dat = data) 3.1.1 Outcomes and Personality Next, let’s load in th personality and outcome data. Both are needed even though we won’t be matching on personality because we want to constrain the sample we match on to those individuals who have personality data that we can actually use to run personality-outcome associations. loadRData &lt;- function(fileName, type){ #loads an RData file, and returns it path &lt;- sprintf(&quot;%s/data/clean/%s_cleaned.RData&quot;, wd, fileName) load(path) get(ls()[grepl(type, ls())]) } # short function to join together personality and outcome data join_fun &lt;- function(pdat, odat){ odat %&gt;% select(p_year, SID, Outcome = name, o_value = value) %&gt;% full_join(pdat %&gt;% select(p_year, SID, Trait = name, p_value = value)) %&gt;% filter(complete.cases(.)) %&gt;% filter(!grepl(&quot;sep&quot;, Outcome)) %&gt;% group_by(Trait, Outcome, p_year) %&gt;% nest() %&gt;% ungroup() } # load and combine personality and outcome data psm_dat &lt;- tibble(study = studies) %&gt;% # filter(study == &quot;wls&quot;) %&gt;% mutate(p_data = map(study, ~loadRData(., &quot;pers&quot;)), o_data = map(study, ~loadRData(., &quot;out&quot;)), o_data = map(o_data, ~(.) %&gt;% mutate(p_year = as.numeric(p_year), SID = as.character(SID))), p_data = map(p_data, ~(.) %&gt;% ungroup() %&gt;% rename(p_year = year) %&gt;% mutate(p_year = as.numeric(p_year), SID = as.character(SID))), study = mapvalues(study, studies, studies_long), data = map2(p_data, o_data, join_fun)) %&gt;% select(-p_data, -o_data) %&gt;% unnest(data) %&gt;% rename(op_dat = data) 3.1.2 Combine Matching and Outcome Variables Once we have the matching and outcome data, we need to combine these for each study-year-outcome-personality-imputation combination for the matching procedure. # short function to find columnns with all missing data not_all_na &lt;- function(x) any(!is.na(x)) # short function to find factor variables factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2} else{F}} # function to join together matching, personality, and outcome data join_fun &lt;- function(opdat, mdat, study, p_year, outcome, trait, .imp){ x &lt;- opdat %&gt;% full_join(mdat) %&gt;% select_if(not_all_na) %&gt;% select(-p_value) %&gt;% filter(complete.cases(.)) %&gt;% mutate_if(factor_fun, as.factor) save(x, file = sprintf(&quot;%s/data/psm_raw/%s_%s_%s_%s_%s.RData&quot;, wd, study, p_year, outcome, trait, .imp)) } psm_nested &lt;- psm_dat %&gt;% full_join(psm_match) %&gt;% mutate(data = pmap(list(op_dat, match_dat, study, p_year, Outcome, Trait, .imp), join_fun)) 3.2 Part 2: Run Matching Now that we have data, we can run the matching. But first, we need a series of functions to do so. ### Functions # takes the data and generates combinationsn for the moderators mod_fun &lt;- function(outcome, imp, Study, year, trait){ tibble(moderator = c(&quot;none&quot;, &quot;age&quot;, &quot;gender&quot;, &quot;race&quot;, &quot;parEdu&quot;, &quot;grsWages&quot;, &quot;parOccPrstg&quot;)) %&gt;% #, list(c(&quot;parEdu&quot;, &quot;grsWages&quot;, &quot;parOccPrstg&quot;)) mutate(psm = pmap(list(outcome, imp, Study, year, moderator, trait), psm_fun)) } # function to run the propensity score matching procedure psm_fun &lt;- function(outcome, imp, Study, year, mod, trait){ m &lt;- ifelse(length(mod) &gt; 1, &quot;SES&quot;, mod) # indexing the moderator # file path file &lt;- sprintf(&quot;%s_%s_%s_%s_%s_%s.RData&quot;, Study, trait, outcome, year, imp, m) # check the year to make sure personality was measured in this year pw &lt;- (p_waves %&gt;% filter(p_item == trait &amp; study == Study))$Used if(!file %in% done &amp; pw == year){ Ratio &lt;- 4 # set the ratio # load the data load(sprintf(&quot;%s/data/psm_raw/%s_%s_%s_%s_%s.RData&quot;, wd, Study, year, outcome, trait, imp)) # short function to find all missing columns not_all_na &lt;- function(x) any(!is.na(x)) # remove columns with all missing data x &lt;- x %&gt;% filter(!is.na(o_value)) %&gt;% select_if(not_all_na) %&gt;% select(-one_of(c(&quot;study&quot;, &quot;p_year&quot;, &quot;.id&quot;)), -one_of(c(unique(p_waves$p_item), &quot;NegAff&quot;))) # find columns with too high percentage missing data # typically happens due to reshaping sum_na &lt;- function(x) sum(is.na(x))/length(x)*100 min &lt;- ifelse(Study %in% c(&quot;GSOEP&quot;, &quot;HILDA&quot;, &quot;BHPS&quot;), 97, ifelse(Study == &quot;HRS&quot;, 100, 55)) pos &lt;- which(apply(x, 2, sum_na) &lt; min) x &lt;- x %&gt;% select(one_of(names(pos))) # keep only complete cases for psm x &lt;- x[complete.cases(x),] # make sure all data has variance has_var &lt;- function(x) if(class(x) %in% c(&quot;factor&quot;, &quot;character&quot;)) !all(duplicated(x)[-1L]) else sd(x, na.rm = T) != 0 x &lt;- x %&gt;% select_if(has_var) x &lt;- data.frame(unclass(x)) # unclass because tibbles # vector of variables not to match on no.match &lt;- c(&quot;yearBrth&quot;, &quot;o_value&quot;, &quot;weight&quot;, &quot;height&quot;, &quot;SID&quot;, unique(p_waves$p_item), mod) # vector of variables to match on to.match &lt;- colnames(x)[-which(colnames(x) %in% no.match)] # matching formula match.formula &lt;- as.formula(paste(&quot;o_value ~ &quot;, paste(to.match, collapse=&quot; + &quot;), sep = &quot; &quot;)) # call the matching procedure y &lt;- matchit(match.formula, data = x, method = &quot;nearest&quot;, ratio = Ratio, caliper = .25) # get the psm df d &lt;- psm_df(y) # get the balance plots u &lt;- unbalanced_fun(y) # save the matching data save(d, file = sprintf(&quot;%s/data/psm_matched/%s_%s_%s_%s_%s_%s.RData&quot;, wd, Study, trait, outcome, year, imp, m)) # save the balance plots save(u, file = sprintf(&quot;%s/results/psm/bal_tabs/%s_%s_%s_%s_%s_%s.RData&quot;, wd, Study, trait, outcome, year, imp, m)) # clean up the environment rm(list = c(&quot;y&quot;, &quot;d&quot;, &quot;u&quot;, &quot;x&quot;)) gc()} return(NULL) } # creates the matched data frames psm_df &lt;- function(psm){ data.frame(match.data(psm)) %&gt;% tbl_df %&gt;% select(SID, o_value, distance) } # this function creates the balance table of the psm weights and filters # the results into variables the matching procedure did not fix and # those that it did unbalanced_fun &lt;- function(x){ #x &lt;- bal.table(psm) y &lt;- summary(x, standardize = T) raw &lt;- y$sum.all %&gt;% mutate(var = rownames(.)) %&gt;% select(var, `Means Treated`, `Means Control`, `Std. Mean Diff.`) smalldiff.var &lt;- raw %&gt;% filter(abs(`Std. Mean Diff.`) &lt;= .05) matched &lt;- y$sum.matched %&gt;% mutate(var = rownames(.)) %&gt;% select(var, `Means Treated`, `Means Control`, `Std. Mean Diff.`) unbalanced.var &lt;- matched %&gt;% filter(abs(`Std. Mean Diff.`) &gt;= .2) return(list(raw = raw, matched = matched, unbalanced = unbalanced.var,smalldiff = smalldiff.var)) } 3.2.1 Run Models The code below will activate and the matching procedure described in the functions above. p_waves &lt;- p_waves %&gt;% rename(study = Study) plan(multiprocess(workers = 5L)) psm_nested &lt;- tibble(file = list.files(sprintf(&quot;%s/data/psm_raw&quot;, wd))) %&gt;% separate(file, c(&quot;study&quot;, &quot;p_year&quot;, &quot;Outcome&quot;, &quot;Trait&quot;, &quot;imp&quot;), sep = &quot;_&quot;) %&gt;% full_join(p_waves %&gt;% select(Trait = p_item, study, Used)) %&gt;% filter(Used == p_year) %&gt;% mutate(imp = str_remove_all(imp, &quot;[A-Z a-z .]&quot;), # psm = pmap(list(Outcome, imp, study, p_year, Trait) # , mod_fun)) psm = future_pmap(list(Outcome, imp, study, p_year, Trait) , possibly(mod_fun, NA_real_) , .options = future_options(globals = c( &quot;psm_fun&quot;, &quot;psm_df&quot;, &quot;mod_fun&quot;, &quot;unbalanced_fun&quot;, &quot;done&quot;, &quot;p_waves&quot;, &quot;wd&quot;), packages = c(&quot;MatchIt&quot;, &quot;tidyverse&quot;, &quot;plyr&quot;, &quot;forcats&quot;)) , .progress = T)) closeAllConnections() p_waves &lt;- p_waves %&gt;% rename(Study = study) The number of, a sample list of, and a sample file of the data and balance files the above functions create is below: # propensity score matched data sets cat(length(list.files(sprintf(&quot;%s/data/psm_matched&quot;, wd))), &quot; total propensity score matched data sets.&quot;, sep = &quot;&quot;) ## 51523 total propensity score matched data sets. # number of files list.files(sprintf(&quot;%s/data/psm_matched&quot;, wd))[1:15] ## [1] &quot;Add Health_A_chldbrth_1995_1_age.RData&quot; ## [2] &quot;Add Health_A_chldbrth_1995_1_gender.RData&quot; ## [3] &quot;Add Health_A_chldbrth_1995_1_grsWages.RData&quot; ## [4] &quot;Add Health_A_chldbrth_1995_1_none.RData&quot; ## [5] &quot;Add Health_A_chldbrth_1995_1_parEdu.RData&quot; ## [6] &quot;Add Health_A_chldbrth_1995_1_parOccPrstg.RData&quot; ## [7] &quot;Add Health_A_chldbrth_1995_1_race.RData&quot; ## [8] &quot;Add Health_A_chldbrth_1995_1_SES.RData&quot; ## [9] &quot;Add Health_A_chldbrth_1995_2_age.RData&quot; ## [10] &quot;Add Health_A_chldbrth_1995_2_gender.RData&quot; ## [11] &quot;Add Health_A_chldbrth_1995_2_grsWages.RData&quot; ## [12] &quot;Add Health_A_chldbrth_1995_2_none.RData&quot; ## [13] &quot;Add Health_A_chldbrth_1995_2_parEdu.RData&quot; ## [14] &quot;Add Health_A_chldbrth_1995_2_parOccPrstg.RData&quot; ## [15] &quot;Add Health_A_chldbrth_1995_2_race.RData&quot; # sample file load(sprintf(&quot;%s/data/psm_matched/GSOEP_C_physhlthevnt_2005_5_none.RData&quot;, wd)) d ## # A tibble: 7,869 x 3 ## SID o_value distance ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 1602 1 0.713 ## 2 1603 0 0.625 ## 3 1705 0 0.609 ## 4 2304 0 0.728 ## 5 8303 0 0.713 ## 6 8604 1 0.741 ## 7 8606 1 0.643 ## 8 9103 1 0.692 ## 9 9206 0 0.656 ## 10 9403 1 0.630 ## # … with 7,859 more rows rm(d) # propensity score matched balance tables cat(length(list.files(sprintf(&quot;%s/results/psm/bal_tabs&quot;, wd))), &quot; total propensity score matched balance tables.&quot;, sep = &quot;&quot;) ## 51670 total propensity score matched balance tables. # number of files list.files(sprintf(&quot;%s/results/psm/bal_tabs&quot;, wd))[1:15] ## [1] &quot;Add Health_A_chldbrth_1995_1_age.RData&quot; ## [2] &quot;Add Health_A_chldbrth_1995_1_gender.RData&quot; ## [3] &quot;Add Health_A_chldbrth_1995_1_grsWages.RData&quot; ## [4] &quot;Add Health_A_chldbrth_1995_1_none.RData&quot; ## [5] &quot;Add Health_A_chldbrth_1995_1_parEdu.RData&quot; ## [6] &quot;Add Health_A_chldbrth_1995_1_parOccPrstg.RData&quot; ## [7] &quot;Add Health_A_chldbrth_1995_1_race.RData&quot; ## [8] &quot;Add Health_A_chldbrth_1995_1_SES.RData&quot; ## [9] &quot;Add Health_A_chldbrth_1995_2_age.RData&quot; ## [10] &quot;Add Health_A_chldbrth_1995_2_gender.RData&quot; ## [11] &quot;Add Health_A_chldbrth_1995_2_grsWages.RData&quot; ## [12] &quot;Add Health_A_chldbrth_1995_2_none.RData&quot; ## [13] &quot;Add Health_A_chldbrth_1995_2_parEdu.RData&quot; ## [14] &quot;Add Health_A_chldbrth_1995_2_parOccPrstg.RData&quot; ## [15] &quot;Add Health_A_chldbrth_1995_2_race.RData&quot; # sample file load(sprintf(&quot;%s/results/psm/bal_tabs/GSOEP_C_physhlthevnt_2005_5_none.RData&quot;, wd)) map(u, head) ## $raw ## var Means Treated Means Control Std. Mean Diff. ## 1 distance 7.229429e-01 6.974633e-01 0.37021081 ## 2 age 3.828463e+01 3.576200e+01 0.13025100 ## 3 drVisits 9.123587e+00 9.438600e+00 -0.03188327 ## 4 exercise 2.457522e+00 2.406367e+00 0.04532784 ## 5 grsWages 3.464262e+04 3.731640e+04 -0.07724024 ## 6 satHealth 7.167131e+00 7.031542e+00 0.08087773 ## ## $matched ## var Means Treated Means Control Std. Mean Diff. ## 1 distance 0.715749 6.978787e-01 0.25964913 ## 2 age 37.184545 3.575470e+01 0.07382703 ## 3 drVisits 9.334570 9.438977e+00 -0.01056727 ## 4 exercise 2.453304 2.406168e+00 0.04176619 ## 5 grsWages 35534.978656 3.608431e+04 -0.01586910 ## 6 satHealth 7.150223 7.030899e+00 0.07117581 ## ## $unbalanced ## var Means Treated Means Control Std. Mean Diff. ## 1 distance 0.715749 0.6978787 0.2596491 ## ## $smalldiff ## var Means Treated Means Control Std. Mean Diff. ## 1 drVisits 9.1235867 9.4386003 -0.031883271 ## 2 exercise 2.4575219 2.4063669 0.045327843 ## 3 satHH 3.6968789 3.6912472 0.015429692 ## 4 SRhealth 3.6124892 3.5791317 0.045109309 ## 5 religiosity 1.1911660 1.1958667 -0.005129461 ## 6 disability0 0.8890122 0.8808738 0.025907658 rm(u) 3.3 Part 3: Balance Once we’ve run the propensity score matching procedure, we’re ready to check the balance of the procedure using balance plots and tables. ### Functions The functions below will load create balance plots and tables for each study-personality-outcome-moderator-imputation combination in the matched and unmatched data sets. #### Data These functions will load in the matched and unmatched data. # unmatched data um_read_fun &lt;- function(file){ load(sprintf(&quot;%s/data/psm_raw/%s&quot;, wd, file)) x %&gt;% tbl_df %&gt;% mutate(o_value = as.numeric(as.character(o_value))) %&gt;% select(-.id, -one_of(traits$short_name)) %&gt;% select_if(not_factor) %&gt;% filter(complete.cases(.)) } # matched data m_read_fun &lt;- function(file){ load(sprintf(&quot;%s/data/psm_matched/%s&quot;, wd, file)) d %&gt;% tbl_df } 3.3.0.1 Balance Tables bal_tab_fun &lt;- function(file, trait, outcome, study, mod, imp, year){ load(sprintf(&quot;%s/results/psm/bal_tabs/%s&quot;, wd, file)) cap = sprintf(&quot;Balance Table from Propensity Score Matching for %s in %s, %s and %s Set, Imputation %s&quot;, outcome, study, trait, mod, imp) u$raw %&gt;% select(var, raw_d = `Std. Mean Diff.`) %&gt;% full_join(u$matched %&gt;% select(var, matched_d = `Std. Mean Diff.`)) %&gt;% filter(var != &quot;distance&quot;) %&gt;% kable(. , &quot;html&quot; , col.names = c(&quot;Variable&quot;, &quot;Raw&quot;, &quot;Matched&quot;) , digits = 2 , caption = cap , escape = F) %&gt;% kable_styling(full_width = F) %&gt;% add_header_above(c(&quot; &quot; = 1, &quot;Cohen&#39;s d&quot; = 2)) %&gt;% save_kable(., file = sprintf(&quot;%s/results/psm/bal_tabs_html/%s_%s_%s_%s_%s_%s.html&quot;, wd, study, year, outcome, trait, mod, imp)) rm(list = c(&quot;u&quot;, &quot;d&quot;, &quot;study&quot;, &quot;trait&quot;, &quot;outcome&quot;, &quot;mod&quot;, &quot;imp&quot;, &quot;year&quot;)) gc() } 3.3.0.2 Balance Plots These functions will calculate Cohen’s d across groups in the matched and unmatched data and run the balance plots. # identify variables that aren&#39;t factors not_factor &lt;- function(x) !is.factor(x) # calculate cohen&#39;s d cohens_d &lt;- function(x, y) { x &lt;- x$value; y &lt;- y$value lx &lt;- length(x)- 1; ly &lt;- length(y)- 1 md &lt;- mean(x, na.rm = T) - mean(y, na.rm = T) ## mean difference (numerator) csd &lt;- lx * var(x, na.rm = T) + ly * var(y, na.rm = T) csd &lt;- csd/(lx + ly); csd &lt;- sqrt(csd) ## common sd computation cd &lt;- md/csd ## cohen&#39;s d return(cd) } # create the plots plot_fun &lt;- function(d, outcome, trait, mod){ ## setup variables for titles, prettified ## # setup nicer names for plotting o &lt;- mapvalues(outcome, outcomes$short_name, outcomes$long_name, warn_missing = F) md &lt;- mapvalues(mod, c(&quot;none&quot;, moderators$short_name), c(&quot;No&quot;, moderators$long_name), warn_missing = F) trt &lt;- mapvalues(trait, traits$short_name, traits$long_name, warn_missing = F) ttl &lt;- sprintf(&quot;Outcome = %s, %s Set, %s Moderation&quot;, o, trt, md) ## load matched and unmatched data ## d1 &lt;- d %&gt;% mutate(m = map(m_file, m_read_fun), um = map(um_file, um_read_fun)) %&gt;% select(-m_file, -year, -um_file) ## clean matched data ## m &lt;- d1 %&gt;% mutate(m = map2(m, um, ~(.x) %&gt;% left_join(.y %&gt;% select(-o_value)))) %&gt;% select(-um) %&gt;% mutate(type = &quot;Matched&quot;, m = map(m, ~(.) %&gt;% gather(variable, value, -SID, -o_value, -distance) %&gt;% select(-SID, -distance) %&gt;% group_by(o_value, variable) %&gt;% nest() %&gt;% ungroup() %&gt;% spread(o_value, data))) %&gt;% unnest(m) %&gt;% ## calculate cohen&#39;s d ## mutate(d = map2_dbl(`0`, `1`, cohens_d)) %&gt;% select(-`0`, -`1`) ## clean unmatched data ## um &lt;- d1 %&gt;% select(study, imp, um) %&gt;% mutate(type = &quot;Unmatched&quot;, um = map(um, ~(.) %&gt;% gather(variable, value, -SID, -o_value) %&gt;% select(-SID) %&gt;% group_by(o_value, variable) %&gt;% nest() %&gt;% ungroup() %&gt;% spread(o_value, data))) %&gt;% unnest(um) %&gt;% ## calculate cohen&#39;s d ## mutate(d = map2_dbl(`0`, `1`, cohens_d)) %&gt;% select(-`0`, -`1`) ## join together d&#39;s and plot them for all studies ## std &lt;- ceiling(length(unique(um$study))/2) p &lt;- um %&gt;% full_join(m) %&gt;% group_by(study, variable, type) %&gt;% summarize(d = mean(d, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(study = mapvalues(study, studies, studies_long, warn_missing = F)) %&gt;% filter(!variable %in% c(mod, &quot;yearBrth&quot;)) %&gt;% ggplot(aes(x = variable, y = d)) + scale_shape_manual(values = c(19,1)) + scale_y_continuous(limits = c(-1.5, 1.5), breaks = seq(-1, 1, 1)) + geom_hline(aes(yintercept = 0), linetype = &quot;dashed&quot;, size = .25) + geom_point(aes(shape = type), size = 1.5) + labs(y = &quot;Cohen&#39;s d&quot;, x = NULL, shape = NULL, title = ttl) + facet_wrap(study~., ncol = 2, scales = &quot;free&quot;) + theme_classic() + theme(legend.position = &quot;bottom&quot; , axis.text.x = element_text(face = &quot;bold&quot;, size = rel(.7), angle = 45, hjust = 1) , axis.text.y = element_text(face = &quot;bold&quot;, size = rel(1.2)) , axis.title = element_text(face = &quot;bold&quot;, size = rel(1.2)), strip.text = element_text(face = &quot;bold&quot;) , plot.title = element_text(face = &quot;bold&quot;, size = rel(1.2), hjust = .5) , legend.text = element_text(face = &quot;bold&quot;) , legend.title = element_text(face = &quot;bold&quot;, size = rel(1.2))) ggsave(p, filename = sprintf(&quot;%s/results/psm/bal_plots/%s/%s_%s.pdf&quot;, wd, mod, outcome, trait), width = 10, height = 2.5*std) save(p, file = sprintf(&quot;%s/results/psm/bal_plots/rdata/%s_%s_%s.RData&quot;, wd, outcome, mod, trait)) return(T) } 3.3.1 Run Run the above functions to create the balance tables and plots. # unmatched data psm_unmatched &lt;- tibble(um_file = list.files(sprintf(&quot;%s/data/psm_raw&quot;, wd))) %&gt;% separate(um_file , c(&quot;study&quot;, &quot;year&quot;, &quot;Outcome&quot;, &quot;Trait&quot;, &quot;imp&quot;) , sep = &quot;_&quot; , remove = F) %&gt;% mutate(imp = str_remove_all(imp, &quot;[A-Z a-z .]&quot;)) psm_unmatched ## # A tibble: 7,660 x 6 ## um_file study year Outcome Trait imp ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Add Health_1995_chldbrth_A_1.RData Add Health 1995 chldbrth A 1 ## 2 Add Health_1995_chldbrth_A_2.RData Add Health 1995 chldbrth A 2 ## 3 Add Health_1995_chldbrth_A_3.RData Add Health 1995 chldbrth A 3 ## 4 Add Health_1995_chldbrth_A_4.RData Add Health 1995 chldbrth A 4 ## 5 Add Health_1995_chldbrth_A_5.RData Add Health 1995 chldbrth A 5 ## 6 Add Health_1995_chldbrth_C_1.RData Add Health 1995 chldbrth C 1 ## 7 Add Health_1995_chldbrth_C_2.RData Add Health 1995 chldbrth C 2 ## 8 Add Health_1995_chldbrth_C_3.RData Add Health 1995 chldbrth C 3 ## 9 Add Health_1995_chldbrth_C_4.RData Add Health 1995 chldbrth C 4 ## 10 Add Health_1995_chldbrth_C_5.RData Add Health 1995 chldbrth C 5 ## # … with 7,650 more rows # matched data psm_matched &lt;- tibble(m_file = list.files(sprintf(&quot;%s/data/psm_matched&quot;, wd))) %&gt;% separate(m_file , c(&quot;study&quot;,&quot;Trait&quot;, &quot;Outcome&quot;, &quot;year&quot;, &quot;imp&quot;, &quot;Moderator&quot;) , sep = &quot;_&quot; , remove = F) %&gt;% mutate(Moderator = str_remove_all(Moderator, &quot;.RData&quot;)) psm_matched ## # A tibble: 51,523 x 7 ## m_file study Trait Outcome year imp Moderator ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Add Health_A_chldbrth_1995_1_age.RData Add Health A chldbrth 1995 1 age ## 2 Add Health_A_chldbrth_1995_1_gender.RData Add Health A chldbrth 1995 1 gender ## 3 Add Health_A_chldbrth_1995_1_grsWages.RD… Add Health A chldbrth 1995 1 grsWages ## 4 Add Health_A_chldbrth_1995_1_none.RData Add Health A chldbrth 1995 1 none ## 5 Add Health_A_chldbrth_1995_1_parEdu.RData Add Health A chldbrth 1995 1 parEdu ## 6 Add Health_A_chldbrth_1995_1_parOccPrstg… Add Health A chldbrth 1995 1 parOccPrs… ## 7 Add Health_A_chldbrth_1995_1_race.RData Add Health A chldbrth 1995 1 race ## 8 Add Health_A_chldbrth_1995_1_SES.RData Add Health A chldbrth 1995 1 SES ## 9 Add Health_A_chldbrth_1995_2_age.RData Add Health A chldbrth 1995 2 age ## 10 Add Health_A_chldbrth_1995_2_gender.RData Add Health A chldbrth 1995 2 gender ## # … with 51,513 more rows 3.3.1.1 Balance Tables # load the balance plots and render them as html tibble(file = list.files(sprintf(&quot;%s/results/psm/bal_tabs/&quot;, wd))) %&gt;% separate(file , c(&quot;study&quot;, &quot;Trait&quot;, &quot;Outcome&quot;, &quot;Year&quot;, &quot;imp&quot;, &quot;Moderator&quot;) , remove = F , sep = &quot;_&quot;) %&gt;% filter(complete.cases(.)) %&gt;% mutate(Moderator = str_remove(Moderator, &quot;.RData&quot;), pmap(list(file, Trait, Outcome, study, Moderator, imp, Year) , bal_tab_fun)) xfun::embed_file(sprintf(&quot;%s/results/psm/bal_tabs_html/GSOEP_2005_physhlthevnt_C_none_1.html&quot;, wd)) Download GSOEP_2005_physhlthevnt_C_none_1.html 3.3.1.2 Balance Plots Run the code to create the balance plots. psm_comb &lt;- psm_matched %&gt;% left_join(psm_unmatched) %&gt;% group_by(Trait, Outcome, Moderator) %&gt;% nest() %&gt;% ungroup() plan(multisession(workers = 5L)) res &lt;- psm_comb %&gt;% mutate(future_pmap(list(data, Outcome, Trait, Moderator) , plot_fun , .progress = T , .options = future_options( globals = c(&quot;cohens_d&quot;, &quot;m_read_fun&quot;, &quot;um_read_fun&quot;, &quot;traits&quot;, &quot;outcomes&quot;, &quot;moderators&quot;, &quot;studies&quot;, &quot;studies_long&quot;, &quot;wd&quot;, &quot;not_factor&quot;) , packages = c(&quot;plyr&quot;, &quot;tidyverse&quot;)) )) closeAllConnections() 3.4 Part 4: Descriptives Next, let’s get the descriptives of the matched and unmatched samples, including sample sizes, average age and gender breakdown. Because there are so many different sets, I’ll create separate tables for each outcome that includes info for each study and trait. But for the manuscript, I’ll also create a table that has ranges for each outcome across traits for simplicity. # slightly different function for unnmatched data reading # in order to incorporate age and gender. um_read_fun &lt;- function(file){ load(sprintf(&quot;%s/data/psm_raw/%s&quot;, wd, file)) x %&gt;% tbl_df %&gt;% mutate(o_value = as.numeric(as.character(o_value)), age = as.numeric(as.character(age))) %&gt;% select(SID, o_value, age, gender) } desc_fun &lt;- function(d, outcome){ o &lt;- mapvalues(outcome, outcomes$short_name, outcomes$long_name, warn_missing = F) # read in the matched and unmatched data d1 &lt;- d %&gt;% mutate(m = map(m_file, m_read_fun), um = map(um_file, um_read_fun)) %&gt;% select(-m_file, -year, -um_file) ## clean matched data ## m &lt;- d1 %&gt;% mutate(m = map2(m, um, ~(.x) %&gt;% left_join(.y %&gt;% select(-o_value)))) %&gt;% select(-um) %&gt;% unnest(m) %&gt;% mutate(type = &quot;Matched&quot;) ## clean unmatched data ## um &lt;- d1 %&gt;% select(-m) %&gt;% unnest(um) %&gt;% mutate(type = &quot;Unmatched&quot;) rm(d1) d1 &lt;- m %&gt;% full_join(um %&gt;% mutate(o_value = factor(o_value))) # sample sizes of matched and unmatched samples d1 %&gt;% group_by(study, Trait, o_value, type) %&gt;% tally() %&gt;% ungroup() %&gt;% spread(o_value, n) %&gt;% mutate(freq = sprintf(&quot;%i (%i)&quot;, `0`, `1`)) %&gt;% select(study, Trait, type, freq) %&gt;% # percentages of gender full_join( d1 %&gt;% filter(!is.na(gender)) %&gt;% group_by(study, Trait, type, gender) %&gt;% summarize(Gender = n()) %&gt;% group_by(study, Trait, type) %&gt;% summarize(Gender = (Gender[gender == 1]/(sum(Gender))*100)) # mean and sd of age ) %&gt;% full_join( d1 %&gt;% group_by(study, Trait, type) %&gt;% summarize_at(vars(age), lst(m = mean, sd = sd), na.rm = T) %&gt;% ungroup() ) %&gt;% # spread out for the table pivot_wider(values_from = c(&quot;freq&quot;, &quot;Gender&quot;, &quot;m&quot;, &quot;sd&quot;) , names_from = &quot;type&quot; , names_sep = &quot;_&quot;) %&gt;% # reorder the columns select(study, Trait, contains(&quot;freq&quot;), contains(&quot;m_&quot;), contains(&quot;sd&quot;), contains(&quot;gender&quot;)) %&gt;% # reformat the Trait names mutate(Trait = factor(Trait, levels = traits$short_name, labels = traits$long_name)) %&gt;% arrange(study, Trait) %&gt;% # reorder the rows # create this wild table kable(. , &quot;html&quot; , digits = 1 , col.names = c(&quot;Study&quot;, &quot;Trait&quot;, rep(c(&quot;Matched&quot;, &quot;Raw&quot;), times = 4)) , align = c(&quot;r&quot;, &quot;r&quot;, rep(&quot;c&quot;, 8)) , caption = sprintf(&quot;Descriptive Statistics of Matched and Raw Samples for Those Who Experienced %s&quot;, o)) %&gt;% kable_styling(full_width = F) %&gt;% collapse_rows(1, valign = &quot;top&quot;) %&gt;% add_header_above(c(&quot; &quot; = 2, &quot;Frequency&quot; = 2, &quot;M&quot; = 2, &quot;SD&quot; = 2, &quot;% Women&quot; = 2)) %&gt;% add_header_above(c(&quot; &quot; = 4, &quot;Age at Baseline&quot; = 4, &quot; &quot; = 2)) %&gt;% footnote(&quot;Frequency = Experienced (Did not Experience); M = Mean age at baseline; SD = Standard deviation of age at baseline&quot; , escape = F) %&gt;% save_kable(., file = sprintf(&quot;%s/results/psm/descriptives/%s.html&quot;, wd, outcome)) # return the range of sample sizes for each study and outcome. d2 &lt;- d1 %&gt;% group_by(study, Trait, o_value, type) %&gt;% tally() %&gt;% ungroup() %&gt;% group_by(study, o_value, type) %&gt;% summarize_at(vars(n), lst(min, max), na.rm = T) %&gt;% mutate(range = sprintf(&quot;%i-%i&quot;, min, max)) %&gt;% ungroup() %&gt;% select(-min, -max) %&gt;% spread(o_value, range) %&gt;% mutate(freq = sprintf(&quot;%s (%s)&quot;, `0`, `1`)) %&gt;% select(study, type, freq) %&gt;% full_join( d1 %&gt;% filter(!is.na(gender)) %&gt;% group_by(study, Trait, type, gender) %&gt;% summarize(Gender = n()) %&gt;% group_by(study, Trait, type) %&gt;% summarize(Gender = (Gender[gender == 1]/(sum(Gender))*100)) %&gt;% group_by(study, type) %&gt;% summarize_at(vars(Gender), lst(min, max), na.rm = T) %&gt;% mutate(Gender = sprintf(&quot;%.1f-%.1f&quot;, min, max)) %&gt;% ungroup() %&gt;% select(-min, -max) ) %&gt;% full_join( d1 %&gt;% group_by(study, Trait, type) %&gt;% summarize_at(vars(age), lst(m = mean, sd = sd), na.rm = T) %&gt;% ungroup() %&gt;% group_by(study, type) %&gt;% summarize_at(vars(m, sd), lst(min, max), na.rm = T) %&gt;% mutate(m = sprintf(&quot;%.1f-%.1f&quot;, m_min, m_max), sd = sprintf(&quot;%.1f-%.1f&quot;, sd_min, sd_max)) %&gt;% ungroup() %&gt;% select(-m_min, -m_max, -sd_max, -sd_min) ) %&gt;% pivot_wider(values_from = c(&quot;freq&quot;, &quot;Gender&quot;, &quot;m&quot;, &quot;sd&quot;) , names_from = &quot;type&quot; , names_sep = &quot;_&quot;) %&gt;% select(study, contains(&quot;freq&quot;), contains(&quot;m_&quot;), contains(&quot;sd&quot;), contains(&quot;Gender&quot;)) rm(d1) gc() return(d2) } # run the descriptives table functions plan(multisession(workers = 5L)) psm_comb &lt;- psm_matched %&gt;% filter(Moderator == &quot;none&quot; &amp; imp == 1) %&gt;% left_join(psm_unmatched) %&gt;% group_by(Outcome, Moderator) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = future_map2(data, Outcome , possibly(desc_fun, NA_real_) , .options = future_options( globals = c(&quot;m_read_fun&quot;, &quot;um_read_fun&quot;, &quot;traits&quot;, &quot;outcomes&quot;, &quot;studies&quot;, &quot;studies_long&quot;, &quot;wd&quot;, &quot;not_factor&quot;) , packages = c(&quot;plyr&quot;, &quot;tidyverse&quot;, &quot;kableExtra&quot;, &quot;knitr&quot;)) )) closeAllConnections() save(psm_comb, file = sprintf(&quot;%s/results/psm/descriptives/psm_comb.RData&quot;, wd)) load(sprintf(&quot;%s/results/psm/descriptives/psm_comb.RData&quot;, wd)) psm_comb %&gt;% select(-Moderator) %&gt;% mutate(Outcome = factor(Outcome, levels = outcomes$short_name, labels = outcomes$long_name)) %&gt;% # arrange(Outcome) unnest(data) %&gt;% arrange(Outcome, study) %&gt;% select(-Outcome) %&gt;% kable(. , &quot;html&quot; , digits = 1 , col.names = c(&quot;Study&quot;, rep(c(&quot;Matched&quot;, &quot;Raw&quot;), times = 4)) , align = c(&quot;r&quot;, rep(&quot;c&quot;, 8)) , caption = sprintf(&quot;Descriptive Statistics of Matched and Raw Samples for Those Who Experienced Outcomes&quot;)) %&gt;% kable_styling(full_width = F) %&gt;% add_header_above(c(&quot; &quot; = 1, &quot;Frequency&quot; = 2, &quot;M&quot; = 2, &quot;SD&quot; = 2, &quot;% Women&quot; = 2)) %&gt;% add_header_above(c(&quot; &quot; = 3, &quot;Age at Baseline&quot; = 4, &quot; &quot; = 2)) %&gt;% kableExtra::group_rows(&quot;Mortality&quot;, 1, 8, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Major Health Event&quot;, 9, 18, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Mental Health Event&quot;, 19, 28, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Child Birth&quot;, 29, 36, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Move in with a partner&quot;, 37, 44, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Marriage&quot;, 45, 53, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Divorce&quot;, 54, 63, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Child Moves Out&quot;, 64, 67, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Higher Education&quot;, 68, 76, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;First Job&quot;, 77, 81, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Unemployment&quot;, 82, 91, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Retirement&quot;, 92, 99, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Volunteering&quot;, 100, 107, label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Criminality&quot;, 108, 110, label_row_css = NULL) %&gt;% footnote(&quot;All results presented as a range. Frequency = Experienced (Did not Experience); M = Mean age at baseline; SD = Standard deviation of age at baseline&quot; , escape = F) %&gt;% save_kable(., file = sprintf(&quot;%s/results/psm/descriptives/ranges.html&quot;, wd)) "],
["psm-models-psm-mods.html", "Chapter 4 PSM Models {PSM Mods} 4.1 Part 5: Data Setup 4.2 Part 6: Models 4.3 Part 7: Compile Cluster Jobs 4.4 Part 8: Tables and Plots", " Chapter 4 PSM Models {PSM Mods} Now that the propensity score matching procedure and balance has run, we can set up the final data sets, run the models, recompile across imputations, and create the tables and figures. 4.1 Part 5: Data Setup 4.1.1 Personality loadRData &lt;- function(fileName, type){ #loads an RData file, and returns it path &lt;- sprintf(&quot;%s/data/clean/%s_cleaned.RData&quot;, wd, fileName) load(path) get(ls()[grepl(type, ls())]) } psm_pers &lt;- tibble(study = studies) %&gt;% mutate(data = map(study, ~loadRData(., &quot;pers&quot;)), data = map(data, ~(.) %&gt;% ungroup() %&gt;% mutate(year = as.numeric(year), SID = as.character(SID))), study = mapvalues(study, studies, studies_long)) %&gt;% unnest(data) %&gt;% filter(!is.na(name) &amp; !is.na(value)) %&gt;% full_join(p_waves %&gt;% select(study = Study, name = p_item, Used)) %&gt;% filter(year == Used) %&gt;% select(study:value) %&gt;% rename(Trait = name, p_value = value) psm_pers 4.1.2 Moderators mod_data &lt;- tibble(study = studies) %&gt;% mutate(data = map(study, ~loadRData(., &quot;alpha&quot;)), data = map(data, ~(.) %&gt;% ungroup() %&gt;% mutate(year = as.numeric(year))), study = mapvalues(study, studies, studies_long)) %&gt;% unnest(data) %&gt;% mutate(alpha = map(alpha, possibly(~(.)$total[[1]], NA_real_))) %&gt;% filter(!is.na(name)) %&gt;% select(study, p_item = name, year, alpha) %&gt;% unnest(alpha) %&gt;% full_join(p_waves %&gt;% select(p_item, study = Study, Used, predInt)) %&gt;% filter(year == Used) %&gt;% select(-Used) %&gt;% rename(Trait = p_item, reliability = alpha) mod_data &lt;- tibble(study = studies) %&gt;% mutate(data = map(study, ~loadRData(., &quot;SCA&quot;)), data = map(data, ~(.) %&gt;% ungroup() %&gt;% mutate(p_year = as.numeric(p_year), SID=as.character(SID)) %&gt;% select(SID, year = p_year, age, gender, one_of(c(&quot;parEdu&quot;, &quot;grsWages&quot;, &quot;parOccPrstg&quot;, &quot;race&quot;)))), study = mapvalues(study, studies, studies_long)) %&gt;% unnest(data) %&gt;% full_join(mod_data) mod_data 4.1.3 Outcomes 4.1.3.1 Matched factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2} else{F}} read_fun &lt;- function(file){ load(sprintf(&quot;%s/data/psm_matched/%s&quot;, wd, file)) d %&gt;% select(SID, o_value) %&gt;% as_tibble() %&gt;% mutate(o_value = as.numeric(as.character(o_value)), o_value = ifelse(o_value &gt; 1, 1, o_value)) } merge_fun &lt;- function(df3, Study, df){ df %&gt;% filter(study == Study) %&gt;% select(-year) %&gt;% full_join(df3) %&gt;% select(-study) %&gt;% filter(!is.na(o_value) &amp; !is.na(p_value)) } combine_fun &lt;- function(df2, outcome, mod, trait, df){ # plan(multisession) df_l &lt;- df2 %&gt;% mutate(data = map(file, read_fun), data = pmap(list(df3 = data, Study = study, df = list(df)), merge_fun)) %&gt;% select(-file, -year) %&gt;% group_by(imp) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% unnest(data)), data = map(data, clean_fun)) df_l &lt;- df_l$data save(df_l, file = sprintf(&quot;%s/data/psm_combined/%s_%s_%s.RData&quot;, wd, outcome, trait, mod)) rm(list = c(&quot;df2&quot;, &quot;df_l&quot;)) gc() } clean_fun &lt;- function(df4){ df4 &lt;- df4 %&gt;% mutate_if(factor_fun, as.factor) %&gt;% mutate(o_value = as.numeric(as.character(o_value))) %&gt;% group_by(study) %&gt;% mutate_at(vars(p_value, parOccPrstg, grsWages), ~((. - min(., na.rm = T))/(max(., na.rm = T) - min(., na.rm = T))*10)) %&gt;% mutate(age = scale(age, center = T, scale = F)) %&gt;% ungroup() %&gt;% mutate_if(is.numeric, ~ifelse(is.infinite(.), NA, .)) std &lt;- df4 %&gt;% group_by(study, o_value) %&gt;% tally() %&gt;% full_join(crossing(study = unique(.$study), o_value = c(0,1))) std &lt;- unique(std$study[std$n &lt; 8 | is.na(std$n)]) df4 &lt;- df4 %&gt;% filter(!study %in% std) } out_data_fun &lt;- function(trait, df){ print(trait) plan(multisession(workers = 6L)) df1 &lt;- df %&gt;% select(study, p_year = year) %&gt;% distinct() %&gt;% mutate(file = map(study, ~list.files(sprintf(&quot;%s/data/psm_matched&quot;, wd), pattern = .))) %&gt;% select(-study) %&gt;% unnest(file) %&gt;% separate(file, c(&quot;study&quot;,&quot;Trait&quot;, &quot;Outcome&quot;, &quot;year&quot;, &quot;imp&quot;, &quot;Moderator&quot;), sep = &quot;_&quot;, remove = F) %&gt;% group_by(study, Trait, Outcome, year, Moderator) %&gt;% filter(n() == 5) %&gt;% ungroup() %&gt;% filter(!is.na(Moderator)) %&gt;% filter(Outcome == &quot;retired&quot;) %&gt;% filter(p_year == year &amp; Trait == trait) %&gt;% select(-p_year) %&gt;% mutate(Moderator = str_remove_all(Moderator, &quot;.RData&quot;)) %&gt;% group_by(Moderator, Outcome, Trait) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = future_pmap( list(df2 = data, outcome = Outcome, mod = Moderator, trait = Trait, df = list(df)) , combine_fun , .options = future_options( globals = c(&quot;clean_fun&quot;, &quot;combine_fun&quot;, &quot;factor_fun&quot;, &quot;loadRData&quot;, &quot;merge_fun&quot;, &quot;read_fun&quot;,&quot;wd&quot;) , packages = c(&quot;plyr&quot;, &quot;tidyverse&quot;)))) closeAllConnections() return(T) } # plan(multisession(workers = 5L)) psm_data &lt;- psm_pers %&gt;% full_join(mod_data) %&gt;% filter(!is.na(p_value) &amp; !is.na(Trait)) %&gt;% group_by(Trait) %&gt;% nest() %&gt;% ungroup() %&gt;% filter(Trait == &quot;LOC&quot;) %&gt;% mutate(data = map2(Trait, data, out_data_fun)) closeAllConnections() 4.2 Part 6: Models 4.2.1 Matched Model Function brms_matched_fun &lt;- function(outcome, trait, mod){ # load data m &lt;- if(mod == &quot;SES&quot;) c(&quot;parEdu&quot;, &quot;grsWages&quot;, &quot;parOccPrstg&quot;) else mod d &lt;- if(mod %in% c(&quot;reliability&quot;, &quot;predInt&quot;)){&quot;none&quot;} else mod load(sprintf(&quot;%s/data/psm_combined/%s_%s_%s.RData&quot;, wd, outcome, trait, d)) df_l &lt;- map(df_l, ~(.) %&gt;% select(study, SID, p_value, o_value, one_of(d)) %&gt;% filter(complete.cases(.))) # set priors Prior &lt;- c(set_prior(&quot;cauchy(0,1)&quot;, class = &quot;sd&quot;)) # formula if(mod == &quot;none&quot;){f &lt;- formula(o_value ~ p_value + (p_value | study))} else if(mod %in% c(&quot;reliability&quot;, &quot;predInt&quot;)){f &lt;- formula(paste(&quot;o_value ~ p_value + &quot;, paste(&quot;p_value*&quot;, m, collapse = &quot; + &quot;), &quot; + (p_value | study)&quot;, sep = &quot;&quot;))} else {f &lt;- formula(paste(&quot;o_value ~ p_value + &quot;, paste(&quot;p_value*&quot;, m, collapse = &quot; + &quot;), &quot;+ (&quot;, paste(&quot;p_value*&quot;, m, collapse = &quot; + &quot;), &quot; | study)&quot;, sep = &quot;&quot;))} # run the model Iter &lt;- 2000; Warmup &lt;- 1000; treedepth &lt;- 20 start.tmp &lt;- Sys.time() fit2 &lt;- brm_multiple(formula = f , data = df_l , prior = Prior , iter = Iter , warmup = Warmup , family = binomial(link = &quot;logit&quot;) , control = list(adapt_delta = 0.99, max_treedepth = treedepth) , cores = 4) print(end.tmp &lt;- Sys.time() - start.tmp) # extract key parameters # fixed effects fx &lt;- fixef(fit, probs = c(0.055, 0.945)) %&gt;% data.frame %&gt;% rownames_to_column(&quot;names&quot;) %&gt;% mutate_at(vars(-names), lst(OR = inv_logit_scaled)) %&gt;% as_tibble # random effects rx &lt;- ranef(fit, probs = c(0.055, 0.945))[[1]] %&gt;% array_tree(3) %&gt;% tibble(names = names(.), data = .) %&gt;% mutate(data = map(data, ~(.) %&gt;% data.frame %&gt;% rownames_to_column(&quot;study&quot;))) %&gt;% unnest(data) %&gt;% mutate_at(vars(-names, -study), lst(OR = inv_logit_scaled)) %&gt;% as_tibble # samples fx.draws &lt;- fit %&gt;% tidy_draws() %&gt;% select(.chain:.draw, matches(&quot;^b_&quot;), matches(&quot;p_value]$&quot;)) %&gt;% mutate_at(vars(matches(&quot;p_value]$&quot;)), ~(.) + b_p_value) %&gt;% gather(key = item, value = s_value, -(.chain:.draw)) tau.draws &lt;- fit %&gt;% tidy_draws() %&gt;% select(.chain:.draw, matches(&quot;^sd&quot;), matches(&quot;^cor&quot;)) if(mod != &quot;none&quot;){ pred.fx &lt;- fx_pred_fun(fit, m) pred.rx &lt;- rx_pred_fun(fit, m) save(pred.fx, pred.rx, file = sprintf(&quot;/scratch/edbeck/psm/predicted/pred_%s_%s_%s&quot;, trait, outcome, mod)) } save(fit, file = sprintf(&quot;/scratch/edbeck/psm/models/matched_%s_%s_%s&quot;, trait, outcome, mod)) save(fx, rx, file = sprintf(&quot;/scratch/edbeck/psm/summary/matched_%s_%s_%s&quot;, trait, outcome, mod)) save(fx.draws, tau.draws, file = sprintf(&quot;/scratch/edbeck/psm/draws/matched_%s_%s_%s&quot;, trait, outcome, mod)) rm(list(&quot;fit&quot;, &quot;fx&quot;, &quot;rx&quot;, &quot;fx.draws&quot;, &quot;rx.draws&quot;, &quot;df&quot;)) gc() } 4.2.2 Setup Cluster Jobs jobs_nested &lt;- crossing( Trait = unique(p_waves$p_item), Outcome = (codebook$codebook[[2]] %&gt;% filter(category == &quot;out&quot;))$name, Moderator = c(&quot;none&quot;, &quot;gender&quot;,&quot;race&quot;, &quot;age&quot;, &quot;reliability&quot;, &quot;predInt&quot;, &quot;parEdu&quot;, &quot;grsWages&quot;, &quot;parOccPrstg&quot;), chain = c(1:5) ) done &lt;- tibble(file = list.files(sprintf(&quot;%s/results/psm/matched/models&quot;, wd))) %&gt;% separate(file, c(&quot;scrap&quot;, &quot;Trait&quot;, &quot;Outcome&quot;, &quot;Moderator&quot;, &quot;chain&quot;), sep = &quot;_&quot;) %&gt;% select(-scrap) %&gt;% mutate(done = &quot;done&quot;, chain = as.numeric(str_remove(chain, &quot;.RData&quot;))) jobs_nested &lt;- jobs_nested %&gt;% full_join(done) %&gt;% filter(is.na(done)) %&gt;% select(-done) 4.2.2.1 The Cluster 4.3 Part 7: Compile Cluster Jobs 4.3.1 Moderator Predicted Values Below are functions to get predicted values of moderated personality-outcome associations for both fixed effects and random effects. # fixed effect prediction function fx_pred_fun &lt;- function(fits, m){ x &lt;- lapply(m, function(x) { cl &lt;- class(fits$data[, x]) if(cl %in% c(&quot;numeric&quot;, &quot;integer&quot;, &quot;matrix&quot;)){ msd &lt;- fits$data %&gt;% select(one_of(x)) %&gt;% as_tibble() %&gt;% summarize_all(lst(mean, sd)) pred.fx &lt;- crossing( p_value = seq(0,10,.25) , mod_value = with(msd, c(mean-sd, mean,mean+sd)) ) %&gt;% setNames(c(&quot;p_value&quot;, x)) } else { pred.fx &lt;- crossing( p_value = seq(0,10,.25) , mod_value = factor(levels(fits$data[, x])) ) %&gt;% setNames(c(&quot;p_value&quot;, x)) } }) pred.fx &lt;- if(length(x) &gt; 1){x %&gt;% reduce(full_join)} else {x[[1]]} pred.fx &lt;- bind_cols( pred.fx, fitted(fits , newdata = pred.fx , probs = c(0.055, 0.945) , re_formula = NA , scale = &quot;linear&quot;) %&gt;% data.frame ) %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), lst(OR = exp)) } # short function to get crossings of continuous personality and moderator levels crossing_fun &lt;- function(df, mod){ pred.rx &lt;- crossing( p_value = seq(0,10,.25), mod_value = with(df, c(mean-sd, mean,mean+sd)) ) %&gt;% setNames(c(&quot;p_value&quot;, mod)) return(pred.rx) } # function to get predicted values across random effects (studies) rx_pred_fun &lt;- function(fits, m){ studies &lt;- unique(fits$data$study) x &lt;- lapply(m, function(x) { cl &lt;- class(fits$data[, x]) if(cl %in% c(&quot;numeric&quot;, &quot;integer&quot;, &quot;matrix&quot;)){ pred.rx &lt;- fits$data %&gt;% select(study, one_of(x)) %&gt;% as_tibble() %&gt;% group_by(study) %&gt;% summarize_all(lst(mean, sd)) %&gt;% group_by(study) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(pred = map2(data, x, crossing_fun)) %&gt;% unnest(pred) %&gt;% select(-data) } else { pred.rx &lt;- crossing( study = studies , p_value = seq(0,10,.25) , mod_value = factor(levels(fits$data[, x])) ) %&gt;% setNames(c(&quot;study&quot;, &quot;p_value&quot;, x)) } }) pred.rx &lt;- if(length(x) &gt; 1){x %&gt;% reduce(full_join)} else {x[[1]]} pred.rx &lt;- bind_cols( pred.rx, fitted(fits , newdata = pred.rx , probs = c(0.055, 0.945) , scale = &quot;linear&quot; ) %&gt;% data.frame ) %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), lst(OR = exp)) return(pred.rx) } 4.3.2 Compilation and Summary Function Now that we have functions to get predicted values, the function below will load in each of the 5 imputations for a given trait-outcome-moderator combination, get fixed and random effects, Level 2 variances, predicted values (moderator models only), and fixed and random posterior draws. combine_fun &lt;- function(trait, outcome, mod){ # get short moderator names m &lt;- if(mod == &quot;SES&quot;) c(&quot;parEdu&quot;, &quot;grsWages&quot;, &quot;parOccPrstg&quot;) else mod d &lt;- if(mod %in% c(&quot;reliability&quot;, &quot;predInt&quot;)){&quot;none&quot;} else mod # load in each of the models and change their class to both brmsfit and brmsfit_multiple fits &lt;- map(1:5, function(x){ load(sprintf(&quot;%s/results/psm/matched/models/matched_%s_%s_%s_%s.RData&quot;, wd, trait, outcome, mod, x)) class(fit) &lt;- c(&quot;brmsfit_multiple&quot;, class(fit)) return(fit)}) # combine models # # get the rhat values rhats &lt;- map_df(fits, function(x)data.frame(as.list(rhat(x)))) # combined the models fits &lt;- combine_models(mlist = fits, check_data = FALSE) # change the data name fits$data.name &lt;- &quot;df_l&quot; # add in pooled rhats fits$rhats &lt;- rhats # change the class class(fits) &lt;- c(&quot;brmsfit_multiple&quot;, class(fits)) # extract key parameters # fixed effects fx &lt;- fixef(fits, probs = c(0.055, 0.945)) %&gt;% data.frame %&gt;% rownames_to_column(&quot;names&quot;) %&gt;% mutate_at(vars(-names), lst(OR = exp)) %&gt;% as_tibble() # random effects rx &lt;- coef(fits, probs = c(0.055, 0.945))[[1]] %&gt;% array_tree(3) %&gt;% tibble(names = names(.), data = .) %&gt;% mutate(data = map(data, ~(.) %&gt;% data.frame %&gt;% rownames_to_column(&quot;study&quot;))) %&gt;% unnest(data) %&gt;% mutate_at(vars(-names, -study), lst(OR = exp)) %&gt;% as_tibble() # variance covariance matrix vc &lt;- VarCorr(fits, probs = c(0.055, 0.945))$study # samples # fixed fx.draws &lt;- fits %&gt;% tidy_draws() %&gt;% select(.chain:.draw, matches(&quot;^b_&quot;), matches(&quot;p_value]$&quot;)) %&gt;% mutate_at(vars(matches(&quot;p_value]$&quot;)), ~(.) + b_p_value) %&gt;% gather(key = item, value = s_value, -(.chain:.draw)) # random tau.draws &lt;- fits %&gt;% tidy_draws() %&gt;% select(.chain:.draw, matches(&quot;^sd&quot;), matches(&quot;^cor&quot;)) # if it&#39;s a moderator model, get and save predicted values if(mod != &quot;none&quot;){ pred.fx &lt;- fx_pred_fun(fits, m) pred.rx &lt;- rx_pred_fun(fits, m) save(pred.fx, pred.rx, file = sprintf(&quot;%s/results/psm/matched/predicted/matched_pred_%s_%s_%s.RData&quot;, wd, trait, outcome, mod)) rm(list = c(&quot;pred.fx&quot;, &quot;pred.rx&quot;)) } # save variance covariance matrix, fixed and random summaries, # and posterior draws to folders save(vc, file = sprintf(&quot;%s/results/psm/matched/vc/matched_%s_%s_%s.RData&quot;, wd, trait, outcome, mod)) save(fx, rx, file = sprintf(&quot;%s/results/psm/matched/summary/matched_%s_%s_%s.RData&quot;, wd, trait, outcome, mod)) save(fx.draws, tau.draws, file = sprintf(&quot;%s/results/psm/matched/draws/matched_%s_%s_%s.RData&quot;, wd, trait, outcome, mod)) # remove objects from local enviornment and clean up the garbage rm(list = c(&quot;fits&quot;, &quot;fx&quot;, &quot;rx&quot;, &quot;fx.draws&quot;, &quot;tau.draws&quot;)) gc() } 4.3.3 Run Compilation # get a list of models files &lt;- list.files(sprintf(&quot;%s/results/psm/matched/models&quot;, wd)) done &lt;- tibble(file = list.files(sprintf(&quot;%s/results/psm/matched/summary&quot;, wd))) %&gt;% separate(file, c(&quot;scrap&quot;, &quot;Trait&quot;, &quot;Outcome&quot;, &quot;Moderator&quot;), sep = &quot;_&quot;) %&gt;% mutate(Moderator = str_remove(Moderator, &quot;.RData&quot;), Done = &quot;done&quot;) plan(multiprocess(workers = 5L)) res &lt;- tibble(file = files) %&gt;% separate(file, c(&quot;scrap&quot;, &quot;Trait&quot;, &quot;Outcome&quot;, &quot;Moderator&quot;, &quot;chain&quot;), sep = &quot;_&quot;) %&gt;% group_by(Trait, Outcome, Moderator) %&gt;% filter(n() == 5) %&gt;% ungroup() %&gt;% select(-scrap, -chain) %&gt;% distinct() %&gt;% full_join(done) %&gt;% filter(is.na(Done)) %&gt;% mutate(c = future_pmap(list(Trait, Outcome, Moderator) , safely(combine_fun) , .progress = T)) closeAllConnections() 4.4 Part 8: Tables and Plots 4.4.1 Summaries # short function for reading in model results load_fun &lt;- function(file, ob){ load(sprintf(&quot;%s/results/psm/matched/summary/%s&quot;, wd, file)) get(ls()[ls() == ob]) } # load in fixed and random summaries fx_res &lt;- tibble(file = list.files(sprintf(&quot;%s/results/psm/matched/summary&quot;, wd))) %&gt;% separate(file, c(&quot;scrap&quot;, &quot;Trait&quot;, &quot;Outcome&quot;, &quot;Moderator&quot;), sep = &quot;_&quot;, remove = F) %&gt;% mutate(Moderator = str_remove(Moderator, &quot;.RData&quot;), fx = map(file, ~load_fun(., &quot;fx&quot;)), rx = map(file, ~load_fun(., &quot;rx&quot;))) %&gt;% select(-scrap, -file) # random effects summaries rx_res &lt;- fx_res %&gt;% select(-fx) %&gt;% unnest(rx) # fixed effect summaries fx_res &lt;- fx_res %&gt;% select(-rx) %&gt;% unnest(fx) # %s significant cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value&quot; &amp; Moderator == &quot;none&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the tested unmoderated, matched personality-outcome associations were significant.&quot;, sep =&quot;&quot;) ## 32.65% of the tested unmoderated, matched personality-outcome associations were significant. cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:age&quot; &amp; Moderator == &quot;age&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by age.&quot;, sep =&quot;&quot;) ## 10.2% of the matched personality-outcome associations were significantly moderated by age. cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:gender1&quot; &amp; Moderator == &quot;gender&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by gender&quot;, sep =&quot;&quot;) ## 9.18% of the matched personality-outcome associations were significantly moderated by gender cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:race1&quot; &amp; Moderator == &quot;race&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by race (black v white)&quot;, sep =&quot;&quot;) ## 3.06% of the matched personality-outcome associations were significantly moderated by race (black v white) cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:race2&quot; &amp; Moderator == &quot;race&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by race (other v white)&quot;, sep =&quot;&quot;) ## 0.51% of the matched personality-outcome associations were significantly moderated by race (other v white) cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:parEdu1&quot; &amp; Moderator == &quot;parEdu&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by parental education (SES; college v HS or lower)&quot;, sep =&quot;&quot;) ## 8.16% of the matched personality-outcome associations were significantly moderated by parental education (SES; college v HS or lower) cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:parEdu2&quot; &amp; Moderator == &quot;parEdu&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by parental education (SES; beyond college v HS or lower)&quot;, sep =&quot;&quot;) ## 4.08% of the matched personality-outcome associations were significantly moderated by parental education (SES; beyond college v HS or lower) cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:parOccPrstg&quot; &amp; Moderator == &quot;parOccPrstg&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by parental occupational prestige (SES)&quot;, sep =&quot;&quot;) ## 5.61% of the matched personality-outcome associations were significantly moderated by parental occupational prestige (SES) cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:grsWages&quot; &amp; Moderator == &quot;grsWages&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by gross wages (SES)&quot;, sep =&quot;&quot;) ## 5.1% of the matched personality-outcome associations were significantly moderated by gross wages (SES) cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:reliability&quot; &amp; Moderator == &quot;reliability&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by personality scale reliability&quot;, sep =&quot;&quot;) ## 1.02% of the matched personality-outcome associations were significantly moderated by personality scale reliability cat(round(nrow(fx_res %&gt;% filter(names == &quot;p_value:predInt&quot; &amp; Moderator == &quot;predInt&quot;) %&gt;% filter(sign(Q5.5) == sign(Q94.5)))/196*100,2), &quot;% of the matched personality-outcome associations were significantly moderated by the interval between personality and outcome measures&quot;, sep =&quot;&quot;) ## 7.65% of the matched personality-outcome associations were significantly moderated by the interval between personality and outcome measures ## traits sig_mod &lt;- fx_res %&gt;% filter(Moderator != &quot;none&quot; &amp; grepl(&quot;p_value:&quot;, names) &amp; (sign(Q5.5) == sign(Q94.5))) %&gt;% select(Trait, Outcome, Moderator) %&gt;% distinct() cat(round(nrow(sig_mod)/(14*14*8)*100,2), &quot;% of personality-outcome associations had reliable moderators effects.&quot;, sep = &quot;&quot;) ## 6.7% of personality-outcome associations had reliable moderators effects. cat(mapvalues((sig_mod %&gt;% group_by(Trait) %&gt;% tally() %&gt;% arrange(desc(n)))$Trait[1], traits$short_name, traits$long_name, warn_missing =F), &quot; was the most frequently moderated personality characteristic (&quot;, round((sig_mod %&gt;% group_by(Trait) %&gt;% tally() %&gt;% arrange(desc(n)))$n[1]/(14*8)*100,2) ,&quot;%), while &quot;, mapvalues((sig_mod %&gt;% group_by(Trait) %&gt;% tally() %&gt;% arrange(n))$Trait[1], traits$short_name, traits$long_name, warn_missing =F), &quot; was the least frequently moderated trait (&quot;, round((sig_mod %&gt;% group_by(Trait) %&gt;% tally() %&gt;% arrange(n))$n[1]/(14*8)*100,2) ,&quot;%).&quot;, sep = &quot;&quot;) ## Social Support was the most frequently moderated personality characteristic (12.5%), while Optimism was the least frequently moderated trait (2.68%). cat(mapvalues((sig_mod %&gt;% group_by(Outcome) %&gt;% tally() %&gt;% arrange(desc(n)))$Outcome[1], outcomes$short_name, outcomes$long_name, warn_missing =F), &quot; was the most frequently moderated outcome (&quot;, round((sig_mod %&gt;% group_by(Outcome) %&gt;% tally() %&gt;% arrange(desc(n)))$n[1]/(14*8)*100,2) ,&quot;%), while &quot;, mapvalues((sig_mod %&gt;% group_by(Outcome) %&gt;% tally() %&gt;% arrange(n))$Outcome[1], outcomes$short_name, outcomes$long_name, warn_missing =F), &quot; was the least frequently moderated outcome (&quot;, round((sig_mod %&gt;% group_by(Outcome) %&gt;% tally() %&gt;% arrange(n))$n[1]/(14*8)*100,2) ,&quot;%).&quot;, sep = &quot;&quot;) ## Unemployment was the most frequently moderated outcome (13.39%), while Higher Ed was the least frequently moderated outcome (3.57%). 4.4.1.1 Plots 4.4.1.1.1 Study-Specific Forest Plots The function below creates a plot for each outcome-moderator combination of mega-analytic and study-specific associations across traits and saves them to a folder. plot_fun &lt;- function(df, outcome, mod){ print(paste(outcome, mod)) o &lt;- mapvalues(outcome, outcomes$short_name, outcomes$long_name, warn_missing = F) m &lt;- mapvalues(mod, moderators$mod, moderators$mod_name, warn_missing = F) d &lt;- round(max(abs(1-min(df$Estimate_OR)), abs(1-max(df$Estimate_OR))), 2) lim &lt;- if(mod == &quot;none&quot;){c(.68, 1.32)} else{c(1-d-(d/2.5), 1+d+(d/2.5))} brk &lt;- if(mod == &quot;none&quot;){seq(.75, 1.25, .25)} else{round(c(1-d-(d/5), 1, 1+d+(d/5)),2)} lab &lt;- if(mod == &quot;none&quot;){c(&quot;.75&quot;, &quot;1&quot;, &quot;1.25&quot;)} else{str_remove(round(c(1-d-(d/5), 1, 1+d+(d/5)),2), &quot;^0&quot;)} shapes &lt;- c(15, 16, 17, 18)[1:length(unique(df$names))] lt &lt;- rep(&quot;solid&quot;, length(unique(df$names))) titl &lt;- if(mod == &quot;none&quot;){o} else {sprintf(&quot;%s: Personality x %s&quot;, o, m)} leg &lt;- if(length(unique(df$names)) &gt; 1){&quot;bottom&quot;} else {&quot;none&quot;} p &lt;- df %&gt;% mutate(Q5.5_OR = ifelse(Q5.5_OR &lt; lim[1], lim[1], Q5.5_OR), Q94.5_OR = ifelse(Q94.5_OR &gt; lim[2], lim[2], Q94.5_OR), study = factor(study, levels = c(&quot;Overall&quot;, studies_long)), Trait = factor(Trait, levels = traits$short_name, labels = traits$long_name)) %&gt;% ggplot(aes(x = study, y = Estimate_OR)) + scale_y_continuous(limits = lim, breaks = brk, labels = lab) + scale_size_manual(values = c(2.5, 1.5)) + scale_shape_manual(values = shapes) + scale_color_manual(values = c(&quot;blue&quot;, &quot;black&quot;)) + scale_linetype_manual(values = lt) + geom_hline(aes(yintercept = 1), linetype = &quot;dashed&quot;) + geom_errorbar(aes(ymin = Q5.5_OR, ymax = Q94.5_OR, linetype = names) , width = 0 , position = position_dodge(width = .9)) + geom_point(aes(color = type, size = type, shape = names) , position = position_dodge(width = .9)) + labs(x = NULL, y = &quot;Odds Ratio&quot;, title = titl) + facet_wrap(~Trait, scales = &quot;free_y&quot;, nrow = 3) + coord_flip() + theme_classic() + theme(legend.position = leg, plot.title = element_text(face = &quot;bold&quot;, size = rel(1.2), hjust = .5), strip.background = element_rect(fill = &quot;black&quot;), strip.text = element_text(face = &quot;bold&quot;, color = &quot;white&quot;), axis.text = element_text(color = &quot;black&quot;)) ggsave(p, file = sprintf(&quot;%s/results/psm/matched/plots/study specific forest/%s/matched_%s.pdf&quot;, wd, mod, outcome), width = 12, height = 6) save(p, file = sprintf(&quot;%s/results/psm/matched/plots/study specific forest/rdata/matched_%s_%s.RData&quot;, wd, outcome, mod)) rm(p) gc() return(T) } # keep only personality-outcome associations in the unmoderated # models or the moderator association in the moderated models cmb_res &lt;- fx_res %&gt;% filter((Moderator == &quot;none&quot; &amp; names == &quot;p_value&quot;)| (Moderator != &quot;none&quot; &amp; grepl(&quot;p_value:&quot;, names)) &amp; (!Moderator %in% c(&quot;reliability&quot;, &quot;predInt&quot;))) %&gt;% mutate(study = &quot;Overall&quot;, type = &quot;fixed&quot;) %&gt;% full_join( rx_res %&gt;% filter((Moderator == &quot;none&quot; &amp; names == &quot;p_value&quot;)| (Moderator != &quot;none&quot; &amp; grepl(&quot;p_value:&quot;, names)) &amp; (!Moderator %in% c(&quot;reliability&quot;, &quot;predInt&quot;))) %&gt;% mutate(type = &quot;random&quot;) ) # run the plot function cmb_res %&gt;% group_by(Outcome, Moderator) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(pmap(list(data, Outcome, Moderator), plot_fun)) 4.4.1.1.2 Fixed-Effect Forest Plots Now that we have plots of both mega-analytic and study-specific effects, we’ll plot just the mega-analytic effecs for each moderator for parsimony (i.e. each of the 196 personality-outcome associations or moderators of them in a single graph). fx_plot_fun &lt;- function(df, mod){ m &lt;- mapvalues(mod, moderators$short_name, moderators$long_name, warn_missing = F) d &lt;- round(max(abs(1-min(df$Estimate_OR)), abs(1-max(df$Estimate_OR))), 2) lim &lt;- if(mod == &quot;none&quot;){c(.8, 1.2)} else{c(1-d-(d/2.5), 1+d+(d/2.5))} brk &lt;- if(mod == &quot;none&quot;){seq(.85, 1.15, .15)} else{round(c(1-d-(d/5), 1, 1+d+(d/5)),2)} lab &lt;- if(mod == &quot;none&quot;){c(&quot;.85&quot;, &quot;1&quot;, &quot;1.15&quot;)} else{str_remove(round(c(1-d-(d/5), 1, 1+d+(d/5)),2), &quot;^0&quot;)} shapes &lt;- c(15, 16, 17, 18)[1:length(unique(df$names))] lt &lt;- rep(&quot;solid&quot;, length(unique(df$names))) titl &lt;- if(mod == &quot;none&quot;){NULL} else {sprintf(&quot;%s Moderation of Personality-Outcome Associations&quot;, m)} leg &lt;- if(length(unique(df$names)) &gt; 1){&quot;bottom&quot;} else {&quot;none&quot;} p &lt;- df %&gt;% mutate(Q5.5_OR = ifelse(Q5.5_OR &lt; lim[1], lim[1], Q5.5_OR), Q94.5_OR = ifelse(Q94.5_OR &gt; lim[2], lim[2], Q94.5_OR)) %&gt;% ggplot(aes(x = Outcome, y = Estimate_OR)) + scale_y_continuous(limits = lim, breaks = brk, labels = lab) + scale_size_manual(values = c(1.2, .85)) + scale_shape_manual(values = shapes) + scale_color_manual(values = c(&quot;blue&quot;, &quot;black&quot;)) + scale_linetype_manual(values = lt) + geom_hline(aes(yintercept = 1), size = .25, color = &quot;gray50&quot;) + geom_errorbar(aes(ymin = Q5.5_OR, ymax = Q94.5_OR, linetype = names) , width = 0 , position = position_dodge(width = .9)) + geom_point(aes(color = sig, size = sig, shape = names) , position = position_dodge(width = .9)) + labs(x = NULL, y = &quot;Odds Ratio&quot;, title = titl) + facet_grid(~Trait, scales = &quot;free_y&quot;, space = &quot;free&quot;) + coord_flip() + theme_classic() + theme(legend.position = leg, plot.title = element_text(face = &quot;bold&quot;, size = rel(1.2), hjust = .5), panel.background = element_rect(color = &quot;black&quot;, fill = &quot;white&quot;), strip.background = element_blank(), strip.text = element_text(face = &quot;bold&quot;, color = &quot;black&quot;, size = rel(1.4)), axis.text = element_text(color = &quot;black&quot;), axis.text.y = element_text(size = rel(1))) ggsave(file = sprintf(&quot;%s/results/psm/matched/plots/overall forest/%s_fixed.png&quot;, wd, mod), width = 10, height = 5) save(p, file = sprintf(&quot;%s/results/psm/matched/plots/overall forest/rdata/%s_fixed.RData&quot;, wd, mod)) rm(p) gc() return(T) } fx_res %&gt;% filter((Moderator == &quot;none&quot; &amp; names == &quot;p_value&quot;)| (Moderator != &quot;none&quot; &amp; grepl(&quot;p_value:&quot;, names))) %&gt;% mutate(sig = ifelse(sign(Q5.5) == sign(Q94.5), &quot;sig&quot;, &quot;ns&quot;), sig = factor(sig, levels = c(&quot;sig&quot;,&quot;ns&quot;)), Trait = factor(Trait, levels = traits$short_name), Outcome = factor(Outcome, levels = outcomes$short_name, labels = str_wrap(outcomes$long_name, 15)), Outcome = forcats::fct_rev(Outcome)) %&gt;% group_by(Moderator) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(map2(data, Moderator, fx_plot_fun)) 4.4.1.2 Tables 4.4.1.2.1 Study-Specific First, I’ll create tables of personality-outcome associations for each moderator (including unmoderated results) and create a table with both the mega-analytic and study-specific associations across traits and outcomes. psm_tab_fun &lt;- function(d, mod){ t_cols &lt;- rep(1, 14); names(t_cols) &lt;- traits$long_name m &lt;- mapvalues(mod, moderators$short_name, moderators$long_name, warn_missing = F) # restructure data for tabling tab &lt;- d %&gt;% # format values rounded to 2 decimal places and bolded if significant mutate_at(vars(Estimate_OR:Q94.5_OR), ~sprintf(&quot;%.2f&quot;, .)) %&gt;% mutate(est = sprintf(&quot;%s&lt;br&gt;[%s, %s]&quot;, Estimate_OR, Q5.5_OR, Q94.5_OR), est = ifelse(sig == &quot;sig&quot;, sprintf(&quot;&lt;strong&gt;%s&lt;/strong&gt;&quot;, est), est)) %&gt;% select(Trait, Outcome, study, names, est) %&gt;% # spread it wide and order Outcomes, columns, and studies pivot_wider(names_from = &quot;Trait&quot; , values_from = &quot;est&quot;, names_sep = &quot;_&quot;) %&gt;% left_join(crossing(Outcome = outcomes$short_name, Trait = traits$short_name, study = &quot;Overall&quot;, value = NA_character_, names = unique(d$names)) %&gt;% spread(Trait, value)) %&gt;% mutate(Outcome = factor(Outcome, levels = outcomes$short_name, outcomes$long_name), study = factor(study, levels = c(&quot;Overall&quot;, studies_long))) %&gt;% arrange(Outcome, study) # a little bit of housekeeping so moderators play nicely together mod_old &lt;- unique(d$names) mod_num &lt;- length(mod_old) if(mod_num == 1){ keep &lt;- c(&quot;study&quot;, traits$short_name) cols &lt;- c(&quot;Study&quot;, rep(&quot;OR [CI]&quot;, times = 14)) t_cols &lt;- c(&quot; &quot; = 1, t_cols) algn &lt;- c(&quot;r&quot;, rep(&quot;c&quot;, 14)) } else { keep &lt;- c(&quot;study&quot;, &quot;names&quot;, traits$short_name) cols &lt;- c(&quot;Study&quot;, &quot;Moderator&quot;, rep(&quot;OR [CI]&quot;, times = 14)) mod_new &lt;- str_replace(str_remove(mod_old, &quot;p_value:&quot;), mod, paste(m, &quot; &quot;, sep =&quot;&quot;)) tab &lt;- tab %&gt;% mutate(names = mapvalues(names, mod_old, mod_new)) t_cols &lt;- c(&quot; &quot; = 2, t_cols) algn &lt;- c(&quot;r&quot;, &quot;r&quot;, rep(&quot;c&quot;, 14)) } cap &lt;- if(mod == &quot;none&quot;) &quot;Mega-Analytic and Study-Specific Personality-Outcome Associations in Matched Samples&quot; else sprintf(&quot;Mega-Analytic and Study-Specific %s Moderation of Personality-Outcome Associations in Matched Samples&quot;, m) rs &lt;- tab %&gt;% group_by(Outcome) %&gt;% tally() %&gt;% mutate(end = cumsum(n), start = lag(end) + 1, start = ifelse(is.na(start), 1, start)) tab %&gt;% select(one_of(keep)) %&gt;% kable(. , &quot;html&quot; , escape = F , col.names = cols , align = algn , caption = cap) %&gt;% kable_styling(full_width = F) %&gt;% add_header_above(t_cols) %&gt;% collapse_rows(1, valign = &quot;top&quot;) %&gt;% kableExtra::group_rows(&quot;Mortality&quot;, rs$start[1], rs$end[1], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Major Health Event&quot;, rs$start[2], rs$end[2], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Mental Health Event&quot;, rs$start[3], rs$end[3], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Child Birth&quot;,rs$start[4], rs$end[4], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Move in with a partner&quot;, rs$start[5], rs$end[5], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Marriage&quot;, rs$start[6], rs$end[6], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Divorce&quot;, rs$start[7], rs$end[7], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Child Moves Out&quot;, rs$start[8], rs$end[8], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Higher Education&quot;, rs$start[9], rs$end[9], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;First Job&quot;, rs$start[10], rs$end[10], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Unemployment&quot;, rs$start[11], rs$end[11], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Retirement&quot;, rs$start[12], rs$end[12], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Volunteering&quot;, rs$start[13], rs$end[13], label_row_css = NULL) %&gt;% kableExtra::group_rows(&quot;Criminality&quot;, rs$start[14], rs$end[14], label_row_css = NULL) %&gt;% footnote(&quot;&lt;em&gt;OR&lt;/em&gt; = Odds Ratio; &lt;em&gt;UI&lt;/em&gt; = 89% Bayesian Uncertainty Interval. Bold indicates model terms whose 89% UI of log odds did not overlap with 0.&quot;, escape = F) %&gt;% save_kable(., file = sprintf(&quot;%s/results/psm/matched/tables/study specific/%s.html&quot;, wd, mod)) } cmb_res %&gt;% mutate(sig = ifelse(sign(Q5.5) == sign(Q94.5), &quot;sig&quot;, &quot;ns&quot;)) %&gt;% select(-(Estimate:Q94.5)) %&gt;% group_by(Moderator) %&gt;% nest() %&gt;% ungroup() %&gt;% # filter(Moderator == &quot;none&quot;) %&gt;% mutate(map2(data, Moderator, possibly(psm_tab_fun, NA_real_))) 4.4.1.2.2 Fixed Effects Next, I’ll create more parsimonious tables for each moderator. psm_fxd_tab_fun &lt;- function(d, mod){ m &lt;- mapvalues(mod, moderators$short_name, moderators$long_name, warn_missing = F) t_cols &lt;- c(2, rep(1, 14)); names(t_cols) &lt;- c(&quot; &quot;, traits$long_name) cap &lt;- if(mod == &quot;none&quot;) &quot;Mega-Analytic Personality-Outcome Associations in Matched Samples&quot; else sprintf(&quot;Mega-Analytic %s Moderation of Personality-Outcome Associations in Matched Samples&quot;, m) d %&gt;% mutate_at(vars(Estimate_OR:Q94.5_OR), ~sprintf(&quot;%.2f&quot;, .)) %&gt;% mutate(est = sprintf(&quot;%s&lt;br&gt;[%s, %s]&quot;, Estimate_OR, Q5.5_OR, Q94.5_OR), est = ifelse(sig == &quot;sig&quot;, sprintf(&quot;&lt;strong&gt;%s&lt;/strong&gt;&quot;, est), est)) %&gt;% select(Trait, Outcome, Term = names, est) %&gt;% # spread it wide and order Outcomes, columns, and studies pivot_wider(names_from = &quot;Trait&quot; , values_from = &quot;est&quot;, names_sep = &quot;_&quot;) %&gt;% left_join(crossing(Outcome = outcomes$short_name, Trait = traits$short_name, value = NA_character_, Term = unique(d$names)) %&gt;% spread(Trait, value)) %&gt;% select(Outcome, Term, one_of(traits$short_name)) %&gt;% mutate(Term = str_to_title(str_replace(str_remove(Term, &quot;p_value:&quot;), mod, paste(m, &quot; &quot;, sep =&quot;&quot;))), Outcome = factor(Outcome, levels = outcomes$short_name, labels = outcomes$long_name)) %&gt;% arrange(Outcome) %&gt;% kable(. , &quot;html&quot; , escape = F , col.names = c(&quot;Outcome&quot;, &quot;Term&quot;, rep(&quot;OR [CI]&quot;, times = 14)) , align = c(&quot;r&quot;, &quot;r&quot;, rep(&quot;c&quot;, 14)) , caption = cap) %&gt;% kable_styling(full_width = F) %&gt;% add_header_above(t_cols) %&gt;% footnote(&quot;&lt;em&gt;OR&lt;/em&gt; = Odds Ratio; &lt;em&gt;UI&lt;/em&gt; = 89% Bayesian Uncertainty Interval. Bold indicates model terms whose 89% UI of log odds did not overlap with 0.&quot;, escape = F) %&gt;% save_kable(., file = sprintf(&quot;%s/results/psm/matched/tables/fixed/%s.html&quot;, wd, mod)) } fx_res %&gt;% filter((Moderator == &quot;none&quot; &amp; names == &quot;p_value&quot;)| (Moderator != &quot;none&quot; &amp; grepl(&quot;p_value:&quot;, names))) %&gt;% mutate(sig = ifelse(sign(Q5.5) == sign(Q94.5), &quot;sig&quot;, &quot;ns&quot;)) %&gt;% select(-(Estimate:Q94.5)) %&gt;% group_by(Moderator) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(tab = map2(data, Moderator, psm_fxd_tab_fun)) t_cols &lt;- c(2, rep(1, 14)); names(t_cols) &lt;- c(&quot; &quot;, traits$short_name) rs &lt;- tibble(start = seq(from = 1, by = 10, length.out = 14), end = seq(from = 10, by = 10, length.out = 14)) fx_res %&gt;% filter((Moderator != &quot;none&quot; &amp; grepl(&quot;p_value:&quot;, names))) %&gt;% mutate(sig = ifelse(sign(Q5.5) == sign(Q94.5), &quot;sig&quot;, &quot;ns&quot;)) %&gt;% select(-(Estimate:Q94.5)) %&gt;%mutate_at(vars(Estimate_OR:Q94.5_OR), ~sprintf(&quot;%.2f&quot;, .)) %&gt;% mutate(est = sprintf(&quot;%s&lt;br&gt;[%s, %s]&quot;, Estimate_OR, Q5.5_OR, Q94.5_OR), est = ifelse(sig == &quot;sig&quot;, sprintf(&quot;&lt;strong&gt;%s&lt;/strong&gt;&quot;, est), est)) %&gt;% select(Trait, Outcome, Term = names, est) %&gt;% # spread it wide and order Outcomes, columns, and studies pivot_wider(names_from = &quot;Trait&quot; , values_from = &quot;est&quot;, names_sep = &quot;_&quot;) %&gt;% mutate(Term = str_remove(Term, &quot;p_value:&quot;), Term = factor(Term, levels = moderators$short_name, labels = moderators$breaks), Outcome = factor(Outcome, levels = outcomes$short_name, labels = outcomes$long_name)) %&gt;% filter(!is.na(Term)) %&gt;% arrange(Outcome, Term) %&gt;% select(Outcome, Term, one_of(traits$short_name)) %&gt;% kable(. , &quot;html&quot; , escape = F , col.names = c(&quot;Outcome&quot;, &quot;Term&quot;, rep(&quot;OR [CI]&quot;, times = 14)) , align = c( &quot;r&quot;, &quot;r&quot;, rep(&quot;c&quot;, 14)) , caption = &quot;Mega-Analytic Moderators of Personality-Outcome Associations in Matched Samples&quot; ) %&gt;% kable_styling(full_width = F) %&gt;% # kableExtra::group_rows(&quot;Mortality&quot;, rs$start[1], rs$end[1], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Major Health Event&quot;, rs$start[2], rs$end[2], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Mental Health Event&quot;, rs$start[3], rs$end[3], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Child Birth&quot;,rs$start[4], rs$end[4], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Move in with a partner&quot;, rs$start[5], rs$end[5], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Marriage&quot;, rs$start[6], rs$end[6], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Divorce&quot;, rs$start[7], rs$end[7], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Child Moves Out&quot;, rs$start[8], rs$end[8], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Higher Education&quot;, rs$start[9], rs$end[9], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;First Job&quot;, rs$start[10], rs$end[10], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Unemployment&quot;, rs$start[11], rs$end[11], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Retirement&quot;, rs$start[12], rs$end[12], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Volunteering&quot;, rs$start[13], rs$end[13], label_row_css = NULL) %&gt;% # kableExtra::group_rows(&quot;Criminality&quot;, rs$start[14], rs$end[14], label_row_css = NULL) %&gt;% # collapse_rows(1, valign = &quot;top&quot;) %&gt;% add_header_above(t_cols) %&gt;% footnote(&quot;&lt;em&gt;OR&lt;/em&gt; = Odds Ratio; &lt;em&gt;UI&lt;/em&gt; = 89% Bayesian Uncertainty Interval. Bold indicates model terms whose 89% UI of log odds did not overlap with 0. Binary variables were dummy coded such that the label to the right of the &#39;v&#39; indicates the reference group.&quot;, escape = F) %&gt;% save_kable(., file = sprintf(&quot;%s/results/psm/matched/tables/fixed/all_moderators.html&quot;, wd)) 4.4.1.2.3 Significant Fixed Effects fx_me &lt;- fx_res %&gt;% filter(Moderator == &quot;none&quot; &amp; names == &quot;p_value&quot; &amp; sign(Q5.5) == sign(Q94.5)) fx_me ## # A tibble: 64 x 12 ## Trait Outcome Moderator names Estimate Est.Error Q5.5 Q94.5 Estimate_OR ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A crim none p_va… -0.0467 0.0230 -0.0837 -0.0104 0.954 ## 2 A divorc… none p_va… 0.0504 0.0210 0.0189 0.0838 1.05 ## 3 A married none p_va… 0.0364 0.0123 0.0177 0.0557 1.04 ## 4 A physhl… none p_va… 0.0247 0.0127 0.00458 0.0440 1.03 ## 5 A vlntred none p_va… 0.0351 0.0139 0.0130 0.0566 1.04 ## 6 C chldbr… none p_va… 0.0327 0.0199 0.00345 0.0655 1.03 ## 7 C divorc… none p_va… 0.0362 0.0161 0.0114 0.0622 1.04 ## 8 C edu none p_va… -0.0297 0.0163 -0.0551 -0.00380 0.971 ## 9 C married none p_va… 0.0347 0.0164 0.00955 0.0606 1.04 ## 10 C mntlhl… none p_va… -0.0354 0.0168 -0.0611 -0.00819 0.965 ## # … with 54 more rows, and 3 more variables: Est.Error_OR &lt;dbl&gt;, Q5.5_OR &lt;dbl&gt;, ## # Q94.5_OR &lt;dbl&gt; fx_mod &lt;- fx_res %&gt;% filter(grepl(&quot;p_value:&quot;, names) &amp; sign(Q5.5) == sign(Q94.5)) fx_mod ## # A tibble: 107 x 12 ## Trait Outcome Moderator names Estimate Est.Error Q5.5 Q94.5 Estimate_OR ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A chldbr… age p_va… -0.00226 0.00116 -3.95e-3 -5.35e-4 0.998 ## 2 A chldbr… predInt p_va… -0.0130 0.00421 -1.96e-2 -6.26e-3 0.987 ## 3 A married age p_va… -0.00301 0.00171 -5.87e-3 -7.57e-4 0.997 ## 4 A mntlhl… parOccPr… p_va… 0.00788 0.00442 9.43e-4 1.49e-2 1.01 ## 5 A mntlhl… predInt p_va… -0.00831 0.00521 -1.64e-2 -1.79e-4 0.992 ## 6 A mortal… gender p_va… -0.0470 0.0220 -8.20e-2 -1.26e-2 0.954 ## 7 A retired parEdu p_va… 0.0981 0.0555 1.27e-2 1.88e-1 1.10 ## 8 C chldbr… gender p_va… -0.0301 0.0185 -5.89e-2 -1.07e-3 0.970 ## 9 C chldbr… parEdu p_va… 0.0656 0.0254 2.69e-2 1.06e-1 1.07 ## 10 C chldbr… predInt p_va… -0.0133 0.00729 -2.43e-2 -1.88e-3 0.987 ## # … with 97 more rows, and 3 more variables: Est.Error_OR &lt;dbl&gt;, Q5.5_OR &lt;dbl&gt;, ## # Q94.5_OR &lt;dbl&gt; 4.4.2 Variance-Covariance Matrices load_fun &lt;- function(file, ob){ load(sprintf(&quot;%s/results/psm/matched/vc/%s&quot;, wd, file)) get(ls()[ls() == ob]) } vc_fun &lt;- function(vc){ vc$sd %&gt;% data.frame() %&gt;% rownames_to_column(&quot;names&quot;) %&gt;% as_tibble() } vc_res &lt;- tibble(file = list.files(sprintf(&quot;%s/results/psm/matched/vc&quot;, wd))) %&gt;% separate(file, c(&quot;scrap&quot;, &quot;Trait&quot;, &quot;Outcome&quot;, &quot;Moderator&quot;), sep = &quot;_&quot;, remove = F) %&gt;% mutate(Moderator = str_remove(Moderator, &quot;.RData&quot;), vc = map(file, ~load_fun(., &quot;vc&quot;)), sd = map(vc, vc_fun)) %&gt;% select(-scrap, -file) vc_res ## # A tibble: 1,747 x 5 ## Trait Outcome Moderator vc sd ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;list&gt; &lt;list&gt; ## 1 A chldbrth age &lt;named list [3]&gt; &lt;tibble [4 × 5]&gt; ## 2 A chldbrth gender &lt;named list [3]&gt; &lt;tibble [4 × 5]&gt; ## 3 A chldbrth grsWages &lt;named list [3]&gt; &lt;tibble [4 × 5]&gt; ## 4 A chldbrth none &lt;named list [3]&gt; &lt;tibble [2 × 5]&gt; ## 5 A chldbrth parEdu &lt;named list [3]&gt; &lt;tibble [6 × 5]&gt; ## 6 A chldbrth parOccPrstg &lt;named list [3]&gt; &lt;tibble [4 × 5]&gt; ## 7 A chldbrth predInt &lt;named list [3]&gt; &lt;tibble [2 × 5]&gt; ## 8 A chldbrth race &lt;named list [3]&gt; &lt;tibble [6 × 5]&gt; ## 9 A chldbrth reliability &lt;named list [3]&gt; &lt;tibble [2 × 5]&gt; ## 10 A chldmvout age &lt;named list [3]&gt; &lt;tibble [4 × 5]&gt; ## # … with 1,737 more rows 4.4.2.1 Tables vc_var &lt;- vc_res %&gt;% select(-vc) %&gt;% filter(!Moderator %in% c(&quot;reliability&quot;, &quot;predInt&quot;))%&gt;% unnest(sd) %&gt;% filter((Moderator == &quot;none&quot; &amp; names == &quot;p_value&quot;) | (Moderator != &quot;none&quot; &amp; grepl(&quot;p_value:&quot;, names))) %&gt;% filter(complete.cases(.)) # mutate(sig = ifelse(sign(Q5.5) == sign(Q94.5), &quot;sig&quot;, &quot;ns&quot;)) %&gt;% # mutate_at(vars(Estimate, Q5.5, Q94.5), ~(.)^2) hcols &lt;- rep(1,15) names(hcols) &lt;- c(&quot; &quot;, traits$short_name) vc_var %&gt;% filter(Moderator == &quot;none&quot;) %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), ~ifelse(abs(.) &lt; .01, sprintf(&quot;%.3f&quot;, .), sprintf(&quot;%.2f&quot;, .))) %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), ~str_remove(., &quot;^0&quot;)) %&gt;% mutate(est = sprintf(&quot;%s&lt;br&gt;[%s,%s]&quot;, Estimate, Q5.5, Q94.5), Outcome = factor(Outcome, levels = outcomes$short_name, labels = outcomes$long_name)) %&gt;% select(Trait, Outcome, est) %&gt;% filter(complete.cases(.)) %&gt;% pivot_wider(names_from = &quot;Trait&quot; , values_from = &quot;est&quot;) %&gt;% select(Outcome, all_of(traits$short_name)) %&gt;% arrange(Outcome) %&gt;% kable(. , &quot;html&quot; , escape = F , align = c(&quot;r&quot;, rep(&quot;c&quot;, 14)) , col.names = c(&quot;Outcome&quot;, rep(&quot;b [CI]&quot;, 14))) %&gt;% kable_styling(full_width = F) %&gt;% add_header_above(hcols) %&gt;% save_kable(., file = sprintf(&quot;%s/results/psm/matched/tables/level 2/p_value_none.html&quot;, wd)) hcols &lt;- rep(1,15) names(hcols) &lt;- c(&quot; &quot;, traits$short_name) vc_var %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), ~sprintf(&quot;%.3f&quot;, .)) %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), ~str_remove(., &quot;^0&quot;)) %&gt;% mutate(est = sprintf(&quot;%s&lt;br&gt;[%s, %s]&quot;, Estimate, Q5.5, Q94.5), names = str_remove(names, &quot;p_value:&quot;), names = factor(names, c(&quot;p_value&quot;, moderators$short_name), c(&quot;None&quot;, moderators$long_name)), Outcome = factor(Outcome, levels = outcomes$short_name, labels = outcomes$long_name)) %&gt;% select(Trait, Outcome, Moderator = names, est) %&gt;% filter(complete.cases(.)) %&gt;% pivot_wider(names_from = &quot;Trait&quot; , values_from = &quot;est&quot;) %&gt;% select(Outcome, Moderator, all_of(traits$short_name)) %&gt;% arrange(Outcome, Moderator) %&gt;% select(-Outcome) %&gt;% kable(. , &quot;html&quot; , escape = F , align = c(&quot;r&quot;, rep(&quot;c&quot;, 14)) , col.names = c(&quot;Moderator&quot;, rep(&quot;b [CI]&quot;, 14))) %&gt;% kable_styling(full_width = F) %&gt;% add_header_above(hcols) %&gt;% save_kable(., file = sprintf(&quot;%s/results/psm/matched/tables/level 2/all_mods.html&quot;, wd)) vc_tab_fun &lt;- function(d, mod){ hcols &lt;- c(2, rep(1,14)) names(hcols) &lt;- c(&quot; &quot;, traits$short_name) d %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), ~sprintf(&quot;%.3f&quot;, .)) %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), ~str_remove(., &quot;^0&quot;)) %&gt;% mutate(est = sprintf(&quot;%s&lt;br&gt;[%s, %s]&quot;, Estimate, Q5.5, Q94.5), names = str_remove(names, &quot;p_value:&quot;), names = factor(names, c(&quot;p_value&quot;, moderators$short_name), c(&quot;None&quot;, moderators$long_name)), Outcome = factor(Outcome, levels = outcomes$short_name, labels = outcomes$long_name)) %&gt;% select(Trait, Outcome, Moderator = names, est) %&gt;% filter(complete.cases(.)) %&gt;% pivot_wider(names_from = &quot;Trait&quot; , values_from = &quot;est&quot;) %&gt;% select(Outcome, Moderator, all_of(traits$short_name)) %&gt;% arrange(Outcome, Moderator) %&gt;% # select(-Outcome) %&gt;% kable(. , &quot;html&quot; , escape = F , align = c(&quot;r&quot;, &quot;r&quot;, rep(&quot;c&quot;, 14)) , col.names = c(&quot;Outcome&quot;, &quot;Moderator&quot;, rep(&quot;b [CI]&quot;, 14))) %&gt;% kable_styling(full_width = F) %&gt;% add_header_above(hcols) %&gt;% save_kable(., file = sprintf(&quot;%s/results/psm/matched/tables/level 2/%s.html&quot;, wd, mod)) } vc_var %&gt;% filter(Moderator != &quot;none&quot;) %&gt;% group_by(Moderator) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(map2(data, Moderator, vc_tab_fun)) 4.4.3 Simple Effects load_fun &lt;- function(file, ob){ load(sprintf(&quot;%s/results/psm/matched/predicted/%s&quot;, wd, file)) get(ls()[ls() == ob]) } fx_pred &lt;- tibble(file = list.files(sprintf(&quot;%s/results/psm/matched/predicted&quot;, wd))) %&gt;% separate(file, c(&quot;scrap&quot;, &quot;type&quot;, &quot;Trait&quot;, &quot;Outcome&quot;, &quot;Moderator&quot;), sep = &quot;_&quot;, remove = F) %&gt;% mutate(Moderator = str_remove(Moderator, &quot;.RData&quot;), fx = map(file, ~load_fun(., &quot;pred.fx&quot;)), rx = map(file, ~load_fun(., &quot;pred.rx&quot;))) %&gt;% select(-scrap, -type, -file) # random effects predictions rx_pred &lt;- fx_pred %&gt;% select(-fx) # fixed effect predictions fx_pred &lt;- fx_pred %&gt;% select(-rx) 4.4.3.1 All Fixed-Effect Simple Effects simp_eff_fun &lt;- function(df, outcome, mod){ print(paste(outcome, mod)) o &lt;- mapvalues(outcome, outcomes$short_name, outcomes$long_name, warn_missing = F) m &lt;- mapvalues(mod, moderators$mod, moderators$mod_name, warn_missing = F) d &lt;- round(max(abs(1-min(df$Estimate_OR)), abs(1-max(df$Estimate_OR))), 2) mini &lt;- if(d &gt; 2) .05 else 1-(d+(d/5)) maxi &lt;- if(d &gt; 2) 2.05 else 1+d+(d/5) lim &lt;- c(mini, maxi) brk &lt;- if(d &gt; 2) c(0, 1, 2) else{round(c(1-d-(d/10), 1, 1+d+(d/10)),2)} lab &lt;- if(d &gt; 2){c(&quot;0&quot;, &quot;1&quot;, &quot;2&quot;)} else{str_remove(c(round(1-d-(d/10),2), 1, round(1+d+(d/10),2)), &quot;^0&quot;)} titl &lt;- if(mod == &quot;none&quot;){o} else {sprintf(&quot;%s: Personality x %s Simple Effects&quot;, o, m)} df &lt;- df %&gt;% unclass %&gt;% data.frame df$mod_value &lt;- df[,mod] df &lt;- df %&gt;% select(-all_of(mod)) %&gt;% as_tibble if(class(df$mod_value) == &quot;factor&quot;){df &lt;- df %&gt;% mutate(mod_fac = factor(mod_value))} else{df &lt;- df %&gt;% group_by(Trait) %&gt;% mutate(mod_fac = factor(mod_value, levels = unique(mod_value), labels = c(&quot;-1 SD&quot;, &quot;M&quot;, &quot;+1 SD&quot;))) %&gt;% ungroup() } lt &lt;- c(&quot;dotted&quot;, &quot;solid&quot;, &quot;dashed&quot;)[1:length(unique(df$mod_fac))] df %&gt;% mutate(Trait = factor(Trait, levels = traits$short_name, labels = traits$long_name), Q5.5_OR = ifelse(Q5.5_OR &lt; mini, mini, Q5.5_OR), Q94.5_OR = ifelse(Q94.5_OR &gt; maxi, maxi, Q94.5_OR)) %&gt;% ggplot(aes(x = p_value , y = Estimate_OR , group = mod_fac)) + scale_y_continuous(limits = lim , breaks = brk , labels = lab) + scale_linetype_manual(values = lt) + geom_hline(aes(yintercept = 1), size = .25) + geom_ribbon(aes(ymin = Q5.5_OR , ymax = Q94.5_OR , fill = mod_fac) , alpha = .25) + geom_line(aes(linetype = mod_fac)) + labs(x = &quot;Personality (POMP)&quot; , y = &quot;Odds Ratio&quot; , title = titl , linetype = m , fill = m) + facet_wrap(~Trait, nrow = 3) + theme_classic() + theme(legend.position = &quot;bottom&quot; , plot.title = element_text(face = &quot;bold&quot;, size = rel(1.2), hjust = .5) , strip.background = element_rect(fill = &quot;black&quot;) , strip.text = element_text(face = &quot;bold&quot;, color = &quot;white&quot;) , axis.text = element_text(color = &quot;black&quot;)) ggsave(file = sprintf(&quot;%s/results/psm/matched/plots/simple effects/%s/matched_%s.pdf&quot;, wd, mod, outcome), width = 12, height = 6) } fx_pred$fx[fx_pred$Trait==&quot;IQ&quot; &amp; fx_pred$Outcome== &quot;chldmvout&quot; &amp; fx_pred$Moderator==&quot;race&quot;][[1]] &lt;- fx_pred$fx[fx_pred$Trait==&quot;IQ&quot; &amp; fx_pred$Outcome== &quot;chldmvout&quot; &amp; fx_pred$Moderator==&quot;race&quot;][[1]] %&gt;% mutate(race = factor(race)) fx_pred$fx[fx_pred$Moderator == &quot;predInt&quot; &amp; fx_pred$Trait == &quot;NA&quot; &amp; fx_pred$Outcome == &quot;chldmvout&quot;][[1]] &lt;- fx_pred$fx[fx_pred$Moderator == &quot;predInt&quot; &amp; fx_pred$Trait == &quot;NA&quot; &amp; fx_pred$Outcome == &quot;chldmvout&quot;][[1]] %&gt;% mutate(predInt = as.numeric(as.character(predInt))) fx_pred %&gt;% filter(!Moderator %in% c(&quot;SES&quot;, &quot;reliability&quot;, &quot;predInt&quot;)) %&gt;% group_by(Outcome, Moderator) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% unnest(fx) %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), lst(OR = exp))), plot = pmap(list(data, Outcome, Moderator), simp_eff_fun)) 4.4.3.2 Reliable Simple Effects sig_simp_eff_fun &lt;- function(df, mod){ print(paste(mod)) num_sig &lt;- nrow(df %&gt;% select(Trait, Outcome) %&gt;% distinct()) ncols &lt;- if(num_sig%/%5&gt;=2) 5 else 3 nrows &lt;- ceiling(num_sig / ncols) m &lt;- mapvalues(mod, moderators$short_name, moderators$long_name, warn_missing = F) d &lt;- round(max(abs(1-min(df$Estimate_OR)), abs(1-max(df$Estimate_OR))), 2) mini &lt;- if(d &gt; 2) .05 else 1-(d+(d/5)) maxi &lt;- if(d &gt; 2) 2.05 else 1+d+(d/5) lim &lt;- c(mini, maxi) brk &lt;- if(d &gt; 2) c(0, 1, 2) else{round(c(1-d-(d/10), 1, 1+d+(d/10)),2)} lab &lt;- if(d &gt; 2){c(&quot;0&quot;, &quot;1&quot;, &quot;2&quot;)} else{str_remove(c(round(1-d-(d/10),2), 1, round(1+d+(d/10),2)), &quot;^0&quot;)} titl &lt;- sprintf(&quot;Simple Effects of %s Moderating Personality-Outcome Associations&quot;, m) df &lt;- df %&gt;% unclass %&gt;% data.frame df$mod_value &lt;- df[,mod] df &lt;- df %&gt;% select(-all_of(mod)) %&gt;% as_tibble if(class(df$mod_value) == &quot;factor&quot;){df &lt;- df %&gt;% mutate(mod_fac = factor(mod_value))} else{df &lt;- df %&gt;% group_by(Trait, Outcome) %&gt;% mutate(mod_fac = factor(mod_value, levels = unique(mod_value), labels = c(&quot;-1 SD&quot;, &quot;M&quot;, &quot;+1 SD&quot;))) %&gt;% ungroup() } lt &lt;- c(&quot;dotted&quot;, &quot;solid&quot;, &quot;dashed&quot;)[1:length(unique(df$mod_fac))] shrt_levs &lt;- paste(rep(outcomes$short_name, each = 14), rep(traits$short_name, times = 14)) long_levs &lt;- paste(rep(outcomes$long_name, each = 14), rep(traits$long_name, times = 14), sep = &quot;\\n&quot;) df %&gt;% unite(levs, Outcome, Trait, sep = &quot; &quot;) %&gt;% mutate(levs = factor(levs, shrt_levs, long_levs), Q5.5_OR = ifelse(Q5.5_OR &lt; mini, mini, Q5.5_OR), Q94.5_OR = ifelse(Q94.5_OR &gt; maxi, maxi, Q94.5_OR)) %&gt;% ggplot(aes(x = p_value , y = Estimate_OR , group = mod_fac)) + scale_y_continuous(limits = lim , breaks = brk , labels = lab) + scale_linetype_manual(values = lt) + geom_hline(aes(yintercept = 1), size = .25, color = &quot;gray50&quot;) + geom_ribbon(aes(ymin = Q5.5_OR , ymax = Q94.5_OR , fill = mod_fac) , alpha = .25) + geom_line(aes(linetype = mod_fac)) + labs(x = &quot;Personality (POMP)&quot; , y = &quot;Odds Ratio&quot; , title = titl , linetype = m , fill = m) + facet_wrap(~levs, ncol = ncols, nrow = nrows) + theme_classic() + theme(legend.position = &quot;bottom&quot; , panel.background = element_rect(color = &quot;black&quot;, fill = &quot;white&quot;) , plot.title = element_text(face = &quot;bold&quot;, size = rel(1.2), hjust = .5) , strip.background = element_blank()#element_rect(fill = &quot;black&quot;) , strip.text = element_text(color = &quot;black&quot;) , axis.text = element_text(color = &quot;black&quot;)) ggsave(file = sprintf(&quot;%s/results/psm/matched/plots/simple effects/reliable/matched_%s.pdf&quot;, wd, mod), width = ncols*2+2, height = nrows*2) } sig_mod &lt;- fx_res %&gt;% filter(Moderator != &quot;none&quot; &amp; grepl(&quot;p_value:&quot;, names) &amp; (sign(Q5.5) == sign(Q94.5))) %&gt;% select(Trait, Outcome, Moderator) %&gt;% distinct() %&gt;% mutate(sig = &quot;sig&quot;) fx_pred %&gt;% filter(!Moderator %in% c(&quot;SES&quot;)) %&gt;% left_join(sig_mod) %&gt;% filter(!is.na(sig)) %&gt;% arrange(Moderator, Outcome) %&gt;% group_by(Moderator) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% unnest(fx) %&gt;% mutate_at(vars(Estimate, Q5.5, Q94.5), lst(OR = exp))), plot = map2(data, Moderator, sig_simp_eff_fun)) "],
["specification-curve-analysis.html", "Chapter 5 Specification Curve Analysis 5.1 Load Data 5.2 SCA Data Setup 5.3 Functions 5.4 Setup 5.5 Re-Compiling 5.6 Results", " Chapter 5 Specification Curve Analysis 5.1 Load Data 5.1.1 Covariates loadRData &lt;- function(fileName, type){ #loads an RData file, and returns it path &lt;- sprintf(&quot;%s/data/imputed/%s_imputed_small.RData&quot;, wd, fileName) load(path) get(ls()[grepl(type, ls())]) } studies &lt;- c(&quot;addhealth&quot;, &quot;bhps&quot;, &quot;gsoep&quot;, &quot;hilda&quot;, &quot;hrs&quot;, &quot;liss&quot;, &quot;midus&quot;, &quot;nlsy&quot;, &quot;shp&quot;, &quot;wls&quot;) studies_long &lt;- c(&quot;Add Health&quot;, &quot;BHPS&quot;, &quot;GSOEP&quot;, &quot;HILDA&quot;, &quot;HRS&quot;, &quot;LISS&quot;, &quot;MIDUS&quot;, &quot;NLSY&quot;, &quot;SHP&quot;, &quot;WLS&quot;) studies_num &lt;- 1:10 sca_cov &lt;- tibble(study = studies) %&gt;% mutate(data = map(study, ~loadRData(., &quot;SCA_imp&quot;)), data = map(data, ~(.) %&gt;% mutate( p_year = as.numeric(p_year), SID = as.character(SID))), study = mapvalues(study, studies, studies_long)) %&gt;% unnest(data) %&gt;% filter(age &lt; 100) sca_cov_fun &lt;- function(item){ p_waves %&gt;% filter(p_item == item) %&gt;% select(study = Study, Used) %&gt;% full_join(sca_cov) %&gt;% filter(p_year == Used) %&gt;% distinct() %&gt;% select(-Used) %&gt;% mutate(BMI = ifelse(is.nan(BMI) | is.infinite(BMI), NA, BMI)) } sca_cov &lt;- tibble(Trait = unique(p_waves$p_item)) %&gt;% mutate(data = map(Trait, sca_cov_fun)) 5.1.2 Outcomes loadRData &lt;- function(fileName, type){ #loads an RData file, and returns it path &lt;- sprintf(&quot;%s/data/clean/%s_cleaned.RData&quot;, wd, fileName) load(path) get(ls()[grepl(type, ls())]) } sca_out &lt;- tibble(study = studies) %&gt;% mutate(data = map(study, ~loadRData(., &quot;out&quot;)), data = map(data, ~(.) %&gt;% mutate(p_year = as.numeric(p_year), SID = as.character(SID))), study = mapvalues(study, studies, studies_long)) %&gt;% unnest(data) %&gt;% filter(!grepl(&quot;sep&quot;, name)) %&gt;% select(study, SID, name, p_year, value) %&gt;% filter(complete.cases(.)) %&gt;% distinct() %&gt;% group_by(study, p_year, SID, name) %&gt;% summarize(value = max(value, na.rm = T)) %&gt;% ungroup() %&gt;% spread(name, value) %&gt;% full_join(p_waves %&gt;% select(study = Study, p_item, Used)) %&gt;% filter(p_year == Used) %&gt;% select(-p_year, -Used) %&gt;% group_by(p_item) %&gt;% nest() %&gt;% ungroup() %&gt;% mutate(data = map(data, ~(.) %&gt;% gather(Outcome, value, -study, -SID, na.rm = T))) %&gt;% rename(Trait = p_item) 5.1.3 Personality sca_pers &lt;- tibble(study = studies) %&gt;% mutate(data = map(study, ~loadRData(., &quot;pers&quot;)), data = map(data, ~(.) %&gt;% ungroup() %&gt;% mutate(year = as.numeric(year), SID = as.character(SID))), study = mapvalues(study, studies, studies_long)) %&gt;% unnest(data) %&gt;% filter(!is.na(name) &amp; !is.na(value)) %&gt;% full_join(p_waves %&gt;% select(study = Study, name = p_item, Used)) %&gt;% filter(year == Used) %&gt;% select(study:value) %&gt;% group_by(name) %&gt;% nest() %&gt;% ungroup() %&gt;% rename(Trait = name) 5.1.4 Moderators mod_data &lt;- tibble(study = studies) %&gt;% mutate(data = map(study, ~loadRData(., &quot;alpha&quot;)), data = map(data, ~(.) %&gt;% ungroup() %&gt;% mutate(year = as.numeric(year))), study = mapvalues(study, studies, studies_long)) %&gt;% unnest(data) %&gt;% mutate(alpha = map(alpha, possibly(~(.)$total[[1]], NA_real_))) %&gt;% filter(!is.na(name)) %&gt;% select(study, p_item = name, year, alpha) %&gt;% unnest(alpha) %&gt;% full_join(p_waves %&gt;% select(p_item, study = Study, Used, predInt)) %&gt;% filter(year == Used) %&gt;% select(-Used) %&gt;% rename(Trait = p_item, reliability = alpha) 5.2 SCA Data Setup factor_fun &lt;- function(x){if(is.numeric(x)){diff(range(x, na.rm = T)) %in% 1:2} else{F}} sca_data_fun &lt;- function(trait, outcome){ df1 &lt;- (sca_pers %&gt;% filter(Trait == trait))$data[[1]] %&gt;% select(study, SID, p_value = value) %&gt;% full_join((sca_out %&gt;% filter(Trait == trait))$data[[1]] %&gt;% filter(Outcome == outcome) %&gt;% select(study, SID, o_value = value)) %&gt;% filter(complete.cases(.)) %&gt;% mutate(o_value = factor(ifelse(as.numeric(as.character(o_value)) &gt; 1, 1, o_value))) %&gt;% full_join((sca_cov %&gt;% filter(Trait == trait))$data[[1]] %&gt;% select(-p_year)) %&gt;% full_join(mod_data %&gt;% filter(Trait == trait) %&gt;% select(-Trait, -year)) %&gt;% mutate_if(factor_fun, as.factor) %&gt;% filter(!is.na(o_value) &amp; !is.na(p_value)) %&gt;% group_by(study) %&gt;% mutate_at(vars(p_value, grsWages, SRhealth, BMI, exercise, parOccPrstg, parOccPrstg, numKids), ~((. - min(., na.rm = T))/(max(., na.rm = T) - min(., na.rm = T))*10)) %&gt;% mutate_if(is.numeric, ~ifelse(is.nan(.) | is.infinite(.), NA, .)) %&gt;% mutate(age = scale(age, center = T, scale = F)) %&gt;% ungroup() #%&gt;% if(trait == &quot;IQ&quot;){df1&lt;-df1 %&gt;% mutate_at(vars(physhlthevnt,numKids), ~ifelse(study == &quot;NLSY&quot; &amp; is.na(.), 0, .))} # mutate_at(vars(education, parEdu), ~ifelse(!is.na(.), as.numeric(as.character(.)) - 1, 0)) save(df1, file = sprintf(&quot;%s/data/sca/sca_%s_%s.RData&quot;, wd, trait, outcome)) } sca_nested &lt;- crossing( Trait = unique(sca_cov$Trait), Outcome = unique(sca_out$data[[1]]$Outcome) ) %&gt;% filter(Trait == &quot;N&quot;) %&gt;% mutate(data = map2(Trait, Outcome, sca_data_fun)) rm(list = c(&quot;sca_out&quot;, &quot;sca_pers&quot;, &quot;sca_cov&quot;)) 5.3 Functions 5.3.1 Permutation Samples sample_fun &lt;- function(i, dfx){ (dfx %&gt;% select(study, SID, p_value) %&gt;% group_by(study) %&gt;% mutate(p_value = sample(p_value, n(), replace = F)) %&gt;% ungroup())$p_value } 5.3.2 Permutation Models perm_fun &lt;- function(i, df3, f1, po){ n &lt;- df3$n po &lt;- po[n] which(n %in% 1:length(po)) x &lt;- df3 %&gt;% select(-p_value) %&gt;% mutate(p_value = po) start &lt;- Sys.time() fit2 &lt;- femlm(formula(f1), data = x, family = &quot;logit&quot;) print(Sys.time() - start) par2 &lt;- coef(fit2)[&quot;p_value&quot;] ci2 &lt;- as.matrix(confint(fit2, parm=&quot;p_value&quot;)[1,]) # tidy2 &lt;- tidy(fit2, effects = &quot;fixed&quot;, conf.int = T) %&gt;% # filter(term == &quot;p_value&quot;) %&gt;% # select(estimate, conf.low, conf.high) %&gt;% # as.matrix() tidy2 &lt;- c(par2, ci2) names(tidy2) &lt;- c(&quot;p_value&quot;, &quot;ci_lower&quot;, &quot;ci_upper&quot;) rm(list = c(&quot;x&quot;, &quot;df3&quot;, &quot;fit2&quot;)) gc() return(tidy2) } 5.3.3 Terms and Formulas sca_term_fun &lt;- function(trait, outcome){ terms &lt;- c(&quot;p_value&quot;, (specifications %&gt;% select(name, Effect, one_of(outcome)) %&gt;% filter(complete.cases(.)) %&gt;% mutate(name = ifelse(Effect == &quot;moderator&quot;, paste(name, &quot;: p_value&quot;, sep = &quot; &quot;), name)))$name) } sca_formula_fun &lt;- function(terms){ f &lt;- paste(&quot;o_value ~ &quot;, # outcome paste(terms, collapse = &quot; + &quot;), # fixed effects &quot;| study&quot;, collapse = &quot;&quot;) # random effects } 5.3.4 Full Models and Workspace Setup sca_setup_fun &lt;- function(trait, outcome, fixed = &quot;p_value&quot;){ terms &lt;- sca_term_fun(trait, outcome) terms &lt;- if(trait == &quot;OP&quot; &amp; outcome == &quot;mvInPrtnr&quot;){terms[terms != &quot;alcohol&quot;]} f &lt;- sca_formula_fun(terms) # wd &lt;- &quot;~/selection&quot; load(sprintf(&quot;%s/data/sca/sca_%s_%s.RData&quot;, wd, trait, outcome)) df1 &lt;- df1 std &lt;- df1 %&gt;% group_by(study, o_value) %&gt;% tally() %&gt;% full_join(crossing(study = unique(.$study), o_value = factor(c(0,1)))) std &lt;- unique(std$study[std$n &lt; 50 | is.na(std$n)]) df1 &lt;- df1 %&gt;% filter(!study %in% std) %&gt;% mutate(o_value = as.numeric(as.character(o_value)), n = row_number()) df2 &lt;- df1 %&gt;% select(study, SID, p_value, o_value, n, one_of(terms)) %&gt;% filter(complete.cases(.)) #%&gt;% # mutate_if(is.factor, factor) start &lt;- Sys.time() # optCtrl=list(maxfun=2e5)) full_mod &lt;- femlm(formula(f), data = df2, family = &quot;logit&quot;) # full_mod &lt;- glmer(formula(f), data = df1, family = &quot;binomial&quot;, na.action = &quot;na.omit&quot;, control = cntrl) print(Sys.time() - start) gmCall &lt;- get_call(full_mod) gmEnv &lt;- parent.frame() gmFormulaEnv &lt;- environment(as.formula(formula(full_mod), env = gmEnv)) # set up terms allTerms &lt;- allTerms0 &lt;- getAllTerms.fixest(full_mod, terms) deps &lt;- attr(allTerms0, &quot;deps&quot;) fixed &lt;- union(fixed, rownames(deps)[rowSums(deps, na.rm = TRUE) == ncol(deps)]) fixed &lt;- c(fixed, allTerms[allTerms %in% &quot;(Intercept)&quot;]) nFixed &lt;- length(fixed) gmCoefNames &lt;- gmCoefNames0 &lt;- names(coef(full_mod)) # this chunk makes sure that interactions include main effects varsOrder &lt;- order(allTerms %in% fixed) termsOrder &lt;- order(gmCoefNames %in% fixed) allTerms &lt;- allTerms[varsOrder] gmCoefNames &lt;- gmCoefNames[termsOrder] di &lt;- match(allTerms, rownames(deps)) deps &lt;- deps[di, di, drop = FALSE] # setup output nVars &lt;- length(allTerms) nTerms &lt;- length(gmCoefNames) # rvNcol &lt;- nVars + 3L + 2 # rtNcol &lt;- nTerms + 3L + 2 # resultChunkSize &lt;- 1000000L # rval &lt;- matrix(NA_real_, ncol = rtNcol, nrow = resultChunkSize) nFixed &lt;- 2 # p_value &amp; intercept nVariants &lt;- 1L nov &lt;- as.integer(nVars - nFixed) ncomb &lt;- (2L^nov) comb.sfx &lt;- rep(TRUE, nFixed) comb.seq &lt;- if (nov != 0L) {seq_len(nov)} # ord &lt;- integer(resultChunkSize) pval_out &lt;- sapply(1:500, function(x){sample_fun(x, df1)}) # change back to 500 # perm_res &lt;- array(NA_real_, c(10, 3, resultChunkSize)) # change back to 500 # no_cores &lt;- detectCores() - 1 k &lt;- 0L save(list = ls(all.names = TRUE), file = sprintf(&quot;%s/results/sca_workspace/sca_workspace_%s_%s.RData&quot;, wd, outcome, trait)) return(ncomb) } 5.3.5 Specifications and Permutations for Cluster sca_run_fun &lt;- function(trait, outcome, min, max){ load(sprintf(&quot;/scratch/edbeck/sca_workspace/sca_workspace_%s_%s.RData&quot;, wd, outcome, trait)) k &lt;- 0L seq_comb &lt;- seq(min, max, 1) # seq_comb &lt;- seq_comb[1:2] # remove after testing res &lt;- lapply(seq_comb, function(iComb){ varComb &lt;- iComb%%nVariants jComb &lt;- (iComb - varComb)%/%nVariants if (varComb == 0L) { isok &lt;- TRUE comb &lt;- c(as.logical(intToBits(jComb)[comb.seq]), comb.sfx) nvar &lt;- sum(comb) - 1 if (!formula_margin_check(comb, deps)) { isok &lt;- FALSE res &lt;- NA } new_terms &lt;- allTerms[comb] if(sum(grepl(&quot;:&quot;, new_terms)) &gt; 1){ isok &lt;- FALSE res &lt;- NA } } if (!isok) { res &lt;- NA } else{ f1 &lt;- paste(&quot;o_value ~ &quot;, # outcome paste(new_terms[new_terms != &quot;(Intercept)&quot;], collapse = &quot; + &quot;), # fixed effects &quot; | study&quot;, collapse = &quot;&quot;) std &lt;- df1 %&gt;% group_by(study, o_value) %&gt;% tally() %&gt;% full_join(crossing(study = unique(.$study), o_value = c(0,1))) std &lt;- unique(std$study[std$n &lt; 50 | is.na(std$n)]) df3 &lt;- df1 %&gt;% filter(!study %in% std) %&gt;% select(study:o_value, n, one_of(new_terms)) %&gt;% mutate(o_value = as.numeric(as.character(o_value))) %&gt;% filter(complete.cases(.)) # filter(study %in% std) fit &lt;- femlm(formula(f1), data = df3, family = &quot;logit&quot;) print(&quot;made it to creating fit&quot;) mci1 &lt;- confint(fit, parm = &quot;p_value&quot;) mcoef1 &lt;- matchCoef(fit, all.terms = gmCoefNames) ll1 &lt;- logLik(fit) bic1 &lt;- BIC(fit) nobs1 &lt;- nobs(fit) psr1 &lt;- fit$pseudo_r2 row1 &lt;- c(mcoef1[gmCoefNames], ci.lower = mci1[1,1], ci.upper = mci1[1,2], bic = bic1, psr2 = psr1, ll = ll1) perm1 &lt;- t(sapply(1:500, function(ii) perm_fun(ii, df3, f1, as.numeric(pval_out[,ii])))) print(Sys.time() - start) k &lt;- k + 1L print(sprintf(&quot;%s %s %s&quot;, iComb, f1, k)) res &lt;- list(rval = row1, perm_res = perm1, ord = iComb) rm(list = c(&quot;row1&quot;, &quot;perm1&quot;, &quot;fit&quot;, &quot;mci1&quot;, &quot;mcoef1&quot;, &quot;ll1&quot;, &quot;nobs1&quot;)) gc() } return(res) }) res &lt;- res[!is.na(res)] rval &lt;- ldply(res, `[[`, 1) perm_res &lt;- llply(res, `[[`, 2) ord &lt;- laply(res, `[[`, 3) perm_res &lt;- abind::abind(perm_res, along = 3) # colnames(rval) &lt;- c(gmCoefNames, &quot;ci.lower&quot;, &quot;ci.upper&quot;, &quot;df&quot;, &quot;ll&quot;) row.names(rval) &lt;- ord # rval[, seq_along(gmCoefNames)] &lt;- rval[, v &lt;- order(termsOrder)] save(rval, file = sprintf(&quot;/scratch/edbeck/raw/raw_%s_%s_%s_%s.RData&quot;, trait, outcome, min, max)) save(perm_res, file = sprintf(&quot;/scratch/edbeck/perm/perm_%s_%s_%s_%s.RData&quot;, trait, outcome, min, max)) } 5.4 Setup 5.4.1 Workspace source(sprintf(&quot;%s/scripts/mumin_fun.R&quot;, wd)) sca_nested &lt;- crossing( Trait = unique(p_waves$p_item), Outcome = (codebook$codebook[[2]] %&gt;% filter(category == &quot;out&quot;))$name ) %&gt;% # filter(Trait == &quot;OP&quot; &amp; Outcome == &quot;mvInPrtnr&quot;) %&gt;% mutate(sca = pmap(list(Trait, Outcome, &quot;p_value&quot;), sca_setup_fun)) 5.4.2 Job Arrays for the Cluster spl_fun &lt;- function(trait, outcome){ print(paste(trait, outcome)) load(sprintf(&quot;%s/results/sca_workspace/sca_workspace_%s_%s.RData&quot;, wd, outcome, trait)) x &lt;- seq(0,ncomb,1) seq_comb = split(x, sort(x%%150)) } done &lt;- tibble(file = list.files(sprintf(&quot;%s/results/sca/perm&quot;, wd))) %&gt;% separate(file, c(&quot;scrap&quot;, &quot;Trait&quot;, &quot;Outcome&quot;, &quot;min&quot;, &quot;max&quot;), sep = &quot;_&quot;) %&gt;% mutate(perm = &quot;done&quot;, max = str_remove_all(max, &quot;.RData&quot;)) %&gt;% select(-scrap) %&gt;% mutate_at(vars(min, max), as.numeric) sca_jobs &lt;- crossing( Trait = unique(p_waves$p_item), Outcome = (codebook$codebook[[2]] %&gt;% filter(category == &quot;out&quot;))$name ) %&gt;% # filter(Outcome %in% c(&quot;mvInPrtnr&quot;, &quot;frstjob&quot;) | # (Trait %in% c(&quot;E&quot;, &quot;SS&quot;, &quot;SWL&quot;) &amp; Outcome %in% c(&quot;physhlthevnt&quot;, &quot;mntlhlthevnt&quot;))) %&gt;% mutate(data = map2(Trait, Outcome, possibly(spl_fun, NA_real_))) %&gt;% unnest(data) %&gt;% mutate(min = map_dbl(data, min), max = map_dbl(data, max)) %&gt;% select(trait = Trait, outcome = Outcome, min, max) %&gt;% write.table(., file = sprintf(&quot;%s/scripts/sca_cluster/sca_args.txt&quot;, wd), row.names = F, col.names = F) 5.5 Re-Compiling 5.5.1 Raw Data Functions # read raw data raw_read_fun &lt;- function(file){ load(sprintf(&quot;%s/results/sca/raw/%s&quot;, wd, file)) rval &lt;- rval %&gt;% mutate(ci.lower = ifelse(is.na(ci.lower), -.01, ci.lower), ci.upper = ifelse(is.na(ci.upper), -.01, ci.upper)) return(rval) } # determine dominant sign for personality-outcome association dom_sign_fun &lt;- function(p){ signs &lt;- sign(p) dom&lt;-if(sum(signs == 1, na.rm = T) &gt; sum(signs == -1, na.rm = T)){1} else {-1} num_dom &lt;- sum(signs == dom, an.rm = T) return(c(&quot;dom_sign&quot; = dom, &quot;num_dom&quot; = num_dom)) } # determine number of significant dominant signs num_sig_fun &lt;- function(l, u, p, dom){ sum(sign(l) == sign(u) &amp; sign(p) == dom, na.rm = T) } 5.5.2 Perm Data Functions # read in permuted data perm_read_fun &lt;- function(file){ file &lt;- str_replace(file, &quot;raw&quot;, &quot;perm&quot;) load(sprintf(&quot;%s/results/sca/perm/%s&quot;, wd, file)) if(any(is.na(perm_res))){ perm_res[,2,] &lt;- apply(perm_res[,2,], 1, function(x) {x[is.na(x)] &lt;- -.01; x}) %&gt;% t() perm_res[,3,] &lt;- apply(perm_res[,3,], 1, function(x) {x[is.na(x)] &lt;- -.01; x}) %&gt;% t() } return(perm_res) } # calculate median and quantiles of permuted personality-outcome associations sum_fun &lt;- function(x){ t(apply(x[,1,], 2, function(y) c(median(y, na.rm = T), quantile(y, prob = c(.15, .85), na.rm = T)))) %&gt;% data.frame() %&gt;% setNames(c(&quot;perm_median&quot;, &quot;perm_lower&quot;, &quot;perm_upper&quot;)) } 5.5.3 Inferential-Based Tests Simonsohn et al. define 3 inferential-based tests: 1. the median overall point estimate within each specification curve. 2. the percentage of specifications that are of the dominant sign. 3. the percentage of specifications with the dominant sign that are also significant. # median permuted personality-outcome association for each model perm_med_fun &lt;- function(m){ apply(m[, 1, ], 1, function(x){ # m[, 1, ] = p_value column for each specification with length = 500 perm median(x, na.rm = T) }) } # number of (out of 500) dominant permuted sign of personality-outcome associations for each model perm_dom_sign_fun &lt;- function(m){ sapply(1:500, function(i){ x &lt;- m[i, 1, ] signs &lt;- sign(x) dom &lt;- if(sum(signs == 1, na.rm = T) &gt; sum(signs == -1, na.rm = T)){1} else {-1} num_dom &lt;- sum(signs == dom, an.rm = T) return(c(&quot;dom_sign&quot; = dom, &quot;num_dom&quot; = num_dom)) # return(dom) }, simplify = T) %&gt;% t() } # number of (out of 500) dominant and significant permuted sign of personality-outcome associations for each model perm_sig_fun &lt;- function(m, dom){ apply(m, 1, function(x){ if(any(is.na(x))){ x[] } sum(sign(x[2,]) == sign(x[3,]) &amp; sign(x[1,]) == dom, na.rm = T) }) } # combine permuted results across different models # previously split up to run smaller batches of models combine_fun &lt;- function(d1){ m&lt;-abind::abind(d1, along = 3) perm_med &lt;- perm_med_fun(m) perm_sign &lt;- perm_dom_sign_fun(m) perm_num_sign &lt;- perm_sign[,&quot;num_dom&quot;]; perm_sign &lt;- perm_sign[,&quot;dom_sign&quot;] perm_sig &lt;- perm_sig_fun(m, perm_sign[&quot;dom_sign&quot;]) tibble(perm_med, perm_sign, perm_num_sign, perm_sig) } # compute inferential permutation tests by comparing raw results to each of the permutations perm_inf_test_fun &lt;- function(perm,med, sign, sig){ tibble(med_test = sum(abs(perm$perm_med) &gt; abs(med))/500, sign_test = sum(perm$perm_num_sign &gt; sign)/500, sig = sum(perm$perm_sig &gt; sig)/500) } 5.5.4 Plotting Function # plot the results sca_plot_fun &lt;- function(d1, type, trait, outcome){ d &lt;- round(max(abs(1-min(exp(d1$p_value))), abs(1-exp(max(d1$p_value)))), 2) lim &lt;- c(1-d-(d/2.5), 1+d+(d/2.5)) brk &lt;- round(c(1-d-(d/5), 1, 1+d+(d/5)),2) lab &lt;- str_remove(round(c(1-d-(d/5), 1, 1+d+(d/5)),2), &quot;^0&quot;) ns &lt;- diff(lim) / 100; sg &lt;- diff(lim) / 50 top &lt;- d1 %&gt;% arrange(p_value) %&gt;% mutate(sig = ifelse(sign(ci.lower) == sign(ci.upper), &quot;sig&quot;, &quot;ns&quot;), specification = 1:n()) %&gt;% mutate_at(vars(-(Min:Max), -n, -(bic:specification)), exp) %&gt;% mutate(p_min = ifelse(sig == &quot;sig&quot;, p_value - sg, p_value - ns), p_max = ifelse(sig == &quot;sig&quot;, p_value + sg, p_value + ns)) %&gt;% ggplot(aes(x = specification, y = p_value)) + scale_y_continuous(limits = lim, breaks = brk, labels = lab) + scale_color_manual(values = c(&quot;black&quot;, &quot;red&quot;)) + geom_hline(aes(yintercept = 1), linetype = &quot;dashed&quot;) + geom_linerange(aes(ymin = p_min, ymax = p_max, color = sig), size = .05) + # geom_errorbar(aes(color = sig, ymin = ci.lower, ymax = ci.upper), # width = 0, size = .01, alpha = .4) + # geom_point(shape = &quot;|&quot;, aes(color = sig), size = .25) + labs(x = &quot;\\nSpecification Number&quot;, y = str_wrap(sprintf(&quot;Effect of %s on %s (OR)\\n&quot;, trait, outcome), 30), title = bquote(.(trait) %-&gt;% .(outcome))) + theme_minimal(base_size = 11) + theme(legend.title = element_text(size = 10), legend.text = element_text(size = 9), axis.text = element_text(color = &quot;black&quot;), axis.line = element_line(colour = &quot;black&quot;), legend.position = &quot;none&quot;, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank(), panel.background = element_blank(), plot.title = element_text(hjust = .5, face = &quot;bold&quot;)) if(type == &quot;perm&quot;){ top &lt;- top + geom_smooth(aes(y = perm_lower), color = &quot;gray&quot;, linetype = &quot;dotted&quot;, se = F) + geom_smooth(aes(y = perm_upper), color = &quot;gray&quot;, linetype = &quot;dotted&quot;, se = F) + geom_smooth(aes(y = perm_median), color = &quot;lightblue&quot;, linetype = &quot;dashed&quot;, se = F) } bottom &lt;- d1 %&gt;% arrange(p_value) %&gt;% mutate(sig = ifelse(sign(ci.lower) == sign(ci.upper), &quot;sig&quot;, &quot;ns&quot;), specification = 1:n(), # model = fct_reorder(specification, .x = p_value, .fun = min) ) %&gt;% select(-(perm_median:perm_upper), -(bic:ll)) %&gt;% gather(variable, value, -(Min:n), -(ci.lower:specification)) %&gt;% mutate(value = ifelse(!is.na(value), &quot;|&quot;, &quot;&quot;)) %&gt;% ggplot(aes(specification, variable, color = sig)) + # geom_point(aes(size = sig)shape = &quot;|&quot;) + geom_text(aes(label = value), size = rel(2)) + scale_color_manual(values = c(&quot;black&quot;, &quot;red&quot;)) + # scale_size_manual(values = c(2,3))+ labs(x = &quot;\\nSpecification Number&quot;, y = &quot;Variables\\n&quot;) + theme_minimal(base_size = 11) + theme(legend.title = element_text(size = 10), legend.text = element_text(size = 9), axis.text = element_text(color = &quot;black&quot;), axis.line = element_line(colour = &quot;black&quot;), legend.position = &quot;none&quot;, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank(), panel.background = element_blank()) p_val = cowplot::plot_grid(top, bottom, ncol = 1, align = &quot;v&quot;, labels = c(&#39;A&#39;, &#39;B&#39;)) file &lt;- sprintf(&quot;%s/results/sca/plots/%s/sca_%s_%s.pdf&quot;, wd, type, outcome, trait) ggsave(p_val, width = 12, height = 8, file = file) } 5.5.5 Compiling Function # Compile the results # written as below because of RAM issues. Everything done at once. sca_compile_fun &lt;- function(trait, outcome, d){ # bring in raw data raw &lt;- d %&gt;% mutate(raw = map(files, raw_read_fun), Min = as.numeric(Min)) %&gt;% select(-files, -type, -scrap) %&gt;% arrange(Min) %&gt;% unnest(raw) %&gt;% mutate(n = 1:n()) # get values for inferential tests med_size &lt;- median(raw$p_value) dom_sign &lt;- dom_sign_fun(raw$p_value) sig_sign &lt;- with(raw, num_sig_fun(ci.lower, ci.upper, p_value, dom_sign[&quot;dom_sign&quot;])) raw_test &lt;- c(med_size, dom_sign, sig_sign) names(raw_test) &lt;- c(&quot;med_size&quot;, &quot;dom_sign&quot;, &quot;num_dom&quot;, &quot;sig_sign&quot;) # bring in permutations perm &lt;- d %&gt;% mutate(data = map(files, perm_read_fun), quant = map(data, sum_fun), Min = as.numeric(Min)) %&gt;% select(-files, -type, -scrap) %&gt;% arrange(Min) # get values for inferential test perm_test &lt;- combine_fun(perm$data) # perform inferential permutation test test &lt;- perm_inf_test_fun(perm_test, med_size, dom_sign[&quot;num_dom&quot;], sig_sign) # plotting d &lt;- perm %&gt;% select(-data) %&gt;% unnest(quant) %&gt;% mutate(n = 1:n()) %&gt;% full_join(raw) sca_plot_fun(d, &quot;raw&quot;, trait, outcome) sca_plot_fun(d, &quot;perm&quot;, trait, outcome) results &lt;- list(inf_test = test, raw_test = raw_test, perm_test = perm_test) save(results, file = sprintf(&quot;%s/results/sca/inf_test/%s_%s.RData&quot;, wd, outcome, trait)) rm(list = c(&quot;d&quot;, &quot;test&quot;, &quot;raw_test&quot;, &quot;perm_test&quot;, &quot;perm&quot;, &quot;raw&quot;)) gc() return(results) } # done &lt;- tibble( # files = sprintf(&quot;%s/results/sca/inf_test&quot;, wd) %&gt;% list.files() # ) %&gt;% # separate(files, c(&quot;Outcome&quot;, &quot;Trait&quot;), sep = &quot;_&quot;) %&gt;% # mutate(Trait = str_remove(Trait, &quot;.RData&quot;), # done = &quot;done&quot;) plan(multiprocess(workers = 5L)) sca_res_nested &lt;- tibble( files = sprintf(&quot;%s/results/sca/raw&quot;, wd) %&gt;% list.files() ) %&gt;% separate(files, c(&quot;type&quot;, &quot;Trait&quot;, &quot;Outcome&quot;, &quot;Min&quot;, &quot;Max&quot;, &quot;scrap&quot;), remove = F) %&gt;% arrange(Min) %&gt;% group_by(Trait, Outcome) %&gt;% nest() %&gt;% filter(map(data, nrow) == 150) %&gt;% ungroup() %&gt;% mutate(Trait = mapvalues(Trait, traits$short_name, traits$long_name), Outcome = mapvalues(Outcome, outcomes$short_name, outcomes$long_name)) %&gt;% # full_join(done) %&gt;% # filter(is.na(done)) %&gt;% mutate(#results = pmap(list(Trait, Outcome, data), sca_compile_fun)) results = future_pmap(list(Trait, Outcome, data) , sca_compile_fun , .progress = T , .options = future_options( globals = c(&quot;combine_fun&quot;, &quot;dom_sign_fun&quot;, &quot;num_sig_fun&quot;, &quot;perm_dom_sign_fun&quot;, &quot;perm_inf_test_fun&quot;, &quot;perm_med_fun&quot;, &quot;perm_read_fun&quot;, &quot;wd&quot;, &quot;perm_sig_fun&quot;, &quot;raw_read_fun&quot;, &quot;read_fun&quot;, &quot;sca_plot_fun&quot;, &quot;sum_fun&quot;, &quot;traits&quot;, &quot;outcomes&quot;) , packages = c(&quot;plyr&quot;, &quot;tidyverse&quot;, &quot;cowplot&quot;, &quot;abind&quot;)))) closeAllConnections() 5.6 Results 5.6.1 Tables read_fun &lt;- function(file){ load(sprintf(&quot;%s/results/sca/inf_test/%s&quot;, wd, file)) return(results) } sca_res &lt;- tibble( files = sprintf(&quot;%s/results/sca/inf_test&quot;, wd) %&gt;% list.files() ) %&gt;% separate(files, c(&quot;Outcome&quot;, &quot;Trait&quot;), sep = &quot;_&quot;, remove = F) %&gt;% mutate(Trait = str_remove(Trait, &quot;.RData&quot;), data = map(files, read_fun), inf_test = map(data, ~(.)$inf_test), raw_test = map(data, ~(.)$raw_test), perm_test = map(data, ~(.)$perm_test)) sca_res %&gt;% select(Outcome, Trait, inf_test) %&gt;% unnest(inf_test) %&gt;% mutate(num_sig = rowSums(cbind(med_test, sign_test, sig) &lt; (.05/3))) %&gt;% group_by(Outcome, num_sig) %&gt;% tally() %&gt;% spread(num_sig, n) ## # A tibble: 14 x 4 ## # Groups: Outcome [14] ## Outcome `1` `2` `3` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Child Birth 5 3 6 ## 2 Child Moves Out 8 4 2 ## 3 Criminality 2 NA 12 ## 4 Divorce 3 1 10 ## 5 First Job 5 6 3 ## 6 Higher Ed 7 1 6 ## 7 Major Health Event 5 5 4 ## 8 Marriage 4 5 5 ## 9 Mental Health Event 1 1 12 ## 10 Mortality 2 8 4 ## 11 Move in with a partner 4 5 5 ## 12 Retirement 3 5 6 ## 13 Unemployment NA NA 14 ## 14 Volunteering 1 NA 13 t_names &lt;- c(1, rep(3, 14)) sca_res %&gt;% select(Outcome, Trait, inf_test) %&gt;% unnest(inf_test) %&gt;% pivot_longer(cols = c(&quot;med_test&quot;, &quot;sign_test&quot;, &quot;sig&quot;) , names_to = &quot;Test&quot; , values_to = &quot;val&quot;) %&gt;% mutate(Trait = mapvalues(Trait, traits$long_name, traits$short_name)) %&gt;% pivot_wider(names_from = &quot;Trait&quot;, values_from = &quot;val&quot;) %&gt;% select(Outcome, Test, all_of(traits$short_name)) %&gt;% mutate(Test = mapvalues(Test, c(&quot;med_test&quot;, &quot;sign_test&quot;, &quot;sig&quot;), c(&quot;Median&quot;, &quot;Sign&quot;, &quot;Significance&quot;))) %&gt;% mutate_at(vars(-Outcome, -Test), ~ifelse(. &lt; .05, sprintf(&quot;&lt;strong&gt;%.2f&lt;/strong&quot;,.), sprintf(&quot;%.2f&quot;,.))) %&gt;% kable(. , &quot;html&quot; , escape = F , align = c(&quot;r&quot;, &quot;r&quot;, rep(&quot;c&quot;, 14)) , caption = &quot;Results of the Permuation Based Inference Tests from Specification Curve Analyses&quot;) %&gt;% kable_styling(full_width = F) %&gt;% collapse_rows(1:2 , valign = &quot;top&quot; , row_group_label_position = &quot;stack&quot;) %&gt;% footnote(&quot;Median = Percentage of permutations in which the raw median effect size of the dominant sign was larger than the permuted median effect size; Sign = Percentage of permutations in which the total number of raw specifications of the dominant sign was greater than permuted. Signifiance = Percentage of permutations in which the total number of raw, significant specifications of the dominant sign was greater than the permuted.&quot;) %&gt;% save_kable(., file = sprintf(&quot;%s/results/sca/inferential_tests.html&quot;, wd)) "]
]
